
CircularQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08007a90  08007a90  00017a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de8  08007de8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007de8  08007de8  00017de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007df0  08007df0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  200001dc  08007fd4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000658  08007fd4  00020658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b7e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000197c  00000000  00000000  00028d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  0002a708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f0  00000000  00000000  0002aed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002191e  00000000  00000000  0002b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000710f  00000000  00000000  0004cede  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8f26  00000000  00000000  00053fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011cf13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030fc  00000000  00000000  0011cf90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a78 	.word	0x08007a78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007a78 	.word	0x08007a78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_UART_RxCpltCallback+0x5c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d11e      	bne.n	800101a <HAL_UART_RxCpltCallback+0x52>
		HAL_UART_Receive_IT(&huart2, &tmpbuf, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4912      	ldr	r1, [pc, #72]	; (8001028 <HAL_UART_RxCpltCallback+0x60>)
 8000fe0:	4810      	ldr	r0, [pc, #64]	; (8001024 <HAL_UART_RxCpltCallback+0x5c>)
 8000fe2:	f001 fca7 	bl	8002934 <HAL_UART_Receive_IT>
		buf[bufTail] = huart->pRxBuffPtr[0];
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_UART_RxCpltCallback+0x64>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	7811      	ldrb	r1, [r2, #0]
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <HAL_UART_RxCpltCallback+0x68>)
 8000ff2:	54d1      	strb	r1, [r2, r3]
		bufTail++;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_UART_RxCpltCallback+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <HAL_UART_RxCpltCallback+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]
		bufTail %= 200;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_UART_RxCpltCallback+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_UART_RxCpltCallback+0x6c>)
 8001004:	fb83 1302 	smull	r1, r3, r3, r2
 8001008:	1199      	asrs	r1, r3, #6
 800100a:	17d3      	asrs	r3, r2, #31
 800100c:	1acb      	subs	r3, r1, r3
 800100e:	21c8      	movs	r1, #200	; 0xc8
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <HAL_UART_RxCpltCallback+0x64>)
 8001018:	6013      	str	r3, [r2, #0]
	}
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000610 	.word	0x20000610
 8001028:	2000020c 	.word	0x2000020c
 800102c:	200001fc 	.word	0x200001fc
 8001030:	20000210 	.word	0x20000210
 8001034:	51eb851f 	.word	0x51eb851f

08001038 <__io_putchar>:

int __io_putchar(int ch) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	uint8_t *tr = (uint8_t*) &ch;
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &tr[0], 1, -1);
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	2201      	movs	r2, #1
 800104a:	68f9      	ldr	r1, [r7, #12]
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <__io_putchar+0x24>)
 800104e:	f001 fbd8 	bl	8002802 <HAL_UART_Transmit>
	return ch;
 8001052:	687b      	ldr	r3, [r7, #4]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000610 	.word	0x20000610

08001060 <__io_getchar>:
int __io_getchar() {
 8001060:	b490      	push	{r4, r7}
 8001062:	af00      	add	r7, sp, #0
	register int ret;

	__retry: if (bufHead != bufTail) {
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <__io_getchar+0x4c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <__io_getchar+0x50>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d0f9      	beq.n	8001064 <__io_getchar+0x4>
		ret = buf[bufHead];
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <__io_getchar+0x4c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <__io_getchar+0x54>)
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	461c      	mov	r4, r3
		if (ret == '\r') {
 800107a:	2c0d      	cmp	r4, #13
 800107c:	d100      	bne.n	8001080 <__io_getchar+0x20>
			ret = '\n';
 800107e:	240a      	movs	r4, #10
		}
		bufHead++;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <__io_getchar+0x4c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <__io_getchar+0x4c>)
 8001088:	6013      	str	r3, [r2, #0]
		bufHead %= MAX_BUFLEN;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <__io_getchar+0x4c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	425a      	negs	r2, r3
 8001090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001094:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001098:	bf58      	it	pl
 800109a:	4253      	negpl	r3, r2
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <__io_getchar+0x4c>)
 800109e:	6013      	str	r3, [r2, #0]
	} else {
		goto __retry;
	}
	return ret;
 80010a0:	4623      	mov	r3, r4
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc90      	pop	{r4, r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200001f8 	.word	0x200001f8
 80010b0:	200001fc 	.word	0x200001fc
 80010b4:	20000210 	.word	0x20000210

080010b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0cc      	sub	sp, #304	; 0x130
 80010bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010be:	f000 facb 	bl	8001658 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010c2:	f000 f825 	bl	8001110 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010c6:	f000 f8bb 	bl	8001240 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80010ca:	f000 f88f 	bl	80011ec <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart2, &tmpbuf, 1);
 80010ce:	2201      	movs	r2, #1
 80010d0:	490b      	ldr	r1, [pc, #44]	; (8001100 <main+0x48>)
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <main+0x4c>)
 80010d4:	f001 fc2e 	bl	8002934 <HAL_UART_Receive_IT>
	puts("Hello World!");
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <main+0x50>)
 80010da:	f003 f993 	bl	8004404 <puts>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		gets(mainBuf);
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fac1 	bl	8003668 <gets>
		puts("\r\nREcved: ");
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <main+0x54>)
 80010e8:	f003 f98c 	bl	8004404 <puts>
		puts(mainBuf);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 f988 	bl	8004404 <puts>
		HAL_Delay(1000);
 80010f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f8:	f000 fb20 	bl	800173c <HAL_Delay>
	while (1) {
 80010fc:	e7ef      	b.n	80010de <main+0x26>
 80010fe:	bf00      	nop
 8001100:	2000020c 	.word	0x2000020c
 8001104:	20000610 	.word	0x20000610
 8001108:	08007a90 	.word	0x08007a90
 800110c:	08007aa0 	.word	0x08007aa0

08001110 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2234      	movs	r2, #52	; 0x34
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f002 face 	bl	80036c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <SystemClock_Config+0xd4>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <SystemClock_Config+0xd4>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <SystemClock_Config+0xd4>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001150:	2300      	movs	r3, #0
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <SystemClock_Config+0xd8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800115c:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <SystemClock_Config+0xd8>)
 800115e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <SystemClock_Config+0xd8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001178:	2310      	movs	r3, #16
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	2302      	movs	r3, #2
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001180:	2300      	movs	r3, #0
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001184:	2310      	movs	r3, #16
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001188:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800118c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800118e:	2304      	movs	r3, #4
 8001190:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001192:	2302      	movs	r3, #2
 8001194:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 f888 	bl	80022b4 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x9e>
		Error_Handler();
 80011aa:	f000 f8b9 	bl	8001320 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2302      	movs	r3, #2
 80011b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011be:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	2102      	movs	r1, #2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fdb8 	bl	8001d40 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xca>
		Error_Handler();
 80011d6:	f000 f8a3 	bl	8001320 <Error_Handler>
	}
}
 80011da:	bf00      	nop
 80011dc:	3750      	adds	r7, #80	; 0x50
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_USART2_UART_Init+0x50>)
 80011f4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001224:	f001 faa0 	bl	8002768 <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800122e:	f000 f877 	bl	8001320 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000610 	.word	0x20000610
 800123c:	40004400 	.word	0x40004400

08001240 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <MX_GPIO_Init+0xd0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a25      	ldr	r2, [pc, #148]	; (8001310 <MX_GPIO_Init+0xd0>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_GPIO_Init+0xd0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_GPIO_Init+0xd0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <MX_GPIO_Init+0xd0>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_GPIO_Init+0xd0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2120      	movs	r1, #32
 80012ca:	4812      	ldr	r0, [pc, #72]	; (8001314 <MX_GPIO_Init+0xd4>)
 80012cc:	f000 fd1e 	bl	8001d0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80012d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_GPIO_Init+0xd8>)
 80012d8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_GPIO_Init+0xdc>)
 80012e6:	f000 fb7f 	bl	80019e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80012ea:	2320      	movs	r3, #32
 80012ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_GPIO_Init+0xd4>)
 8001302:	f000 fb71 	bl	80019e8 <HAL_GPIO_Init>

}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000
 8001318:	10210000 	.word	0x10210000
 800131c:	40020800 	.word	0x40020800

08001320 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_MspInit+0x4c>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x4c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800136e:	2007      	movs	r0, #7
 8001370:	f000 fad6 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_UART_MspInit+0x94>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d133      	bne.n	800140a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_UART_MspInit+0x98>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_UART_MspInit+0x98>)
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_UART_MspInit+0x98>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_UART_MspInit+0x98>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <HAL_UART_MspInit+0x98>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_UART_MspInit+0x98>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013da:	230c      	movs	r3, #12
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ea:	2307      	movs	r3, #7
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <HAL_UART_MspInit+0x9c>)
 80013f6:	f000 faf7 	bl	80019e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2026      	movs	r0, #38	; 0x26
 8001400:	f000 fa99 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001404:	2026      	movs	r0, #38	; 0x26
 8001406:	f000 fab2 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40004400 	.word	0x40004400
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001474:	f000 f942 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <USART2_IRQHandler+0x10>)
 8001482:	f001 faad 	bl	80029e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000610 	.word	0x20000610

08001490 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < 1; DataIdx++)
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e00b      	b.n	80014ba <_read+0x2a>
	{
		(*ptr=__io_getchar());
 80014a2:	f7ff fddd 	bl	8001060 <__io_getchar>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	701a      	strb	r2, [r3, #0]
		ptr++;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < 1; DataIdx++)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3301      	adds	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	ddf0      	ble.n	80014a2 <_read+0x12>
	}

return 1;
 80014c0:	2301      	movs	r3, #1
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e009      	b.n	80014f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fda7 	bl	8001038 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf1      	blt.n	80014dc <_write+0x12>
	}
	return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_close>:

int _close(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
	return -1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152a:	605a      	str	r2, [r3, #4]
	return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_isatty>:

int _isatty(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	return 1;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
	return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f002 f81c 	bl	80035d8 <__errno>
 80015a0:	4602      	mov	r2, r0
 80015a2:	230c      	movs	r3, #12
 80015a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20020000 	.word	0x20020000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	20000200 	.word	0x20000200
 80015d4:	20000658 	.word	0x20000658

080015d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <SystemInit+0x28>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <SystemInit+0x28>)
 80015e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SystemInit+0x28>)
 80015ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f2:	609a      	str	r2, [r3, #8]
#endif
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001608:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800160a:	e003      	b.n	8001614 <LoopCopyDataInit>

0800160c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800160e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001610:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001612:	3104      	adds	r1, #4

08001614 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001618:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800161a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800161c:	d3f6      	bcc.n	800160c <CopyDataInit>
  ldr  r2, =_sbss
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001620:	e002      	b.n	8001628 <LoopFillZerobss>

08001622 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001622:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001624:	f842 3b04 	str.w	r3, [r2], #4

08001628 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800162a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800162c:	d3f9      	bcc.n	8001622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800162e:	f7ff ffd3 	bl	80015d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001632:	f002 f821 	bl	8003678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff fd3f 	bl	80010b8 <main>
  bx  lr    
 800163a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001640:	08007df8 	.word	0x08007df8
  ldr  r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001648:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800164c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001650:	20000658 	.word	0x20000658

08001654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>
	...

08001658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_Init+0x40>)
 8001662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_Init+0x40>)
 800166e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_Init+0x40>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f000 f94d 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001686:	2000      	movs	r0, #0
 8001688:	f000 f808 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800168c:	f7ff fe50 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00

0800169c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x54>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x58>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f965 	bl	800198a <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f000 f92d 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_InitTick+0x5c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000008 	.word	0x20000008
 8001720:	20000650 	.word	0x20000650

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000650 	.word	0x20000650

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_Delay+0x40>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000008 	.word	0x20000008

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff29 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff3e 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff8e 	bl	8001874 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff31 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d004      	beq.n	80019c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e00c      	b.n	80019da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2205      	movs	r2, #5
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	e165      	b.n	8001cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 8154 	bne.w	8001cca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d00b      	beq.n	8001a42 <HAL_GPIO_Init+0x5a>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d007      	beq.n	8001a42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a36:	2b11      	cmp	r3, #17
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d130      	bne.n	8001aa4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 0201 	and.w	r2, r3, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0xfc>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b12      	cmp	r3, #18
 8001ae2:	d123      	bne.n	8001b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	69b9      	ldr	r1, [r7, #24]
 8001b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80ae 	beq.w	8001cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b5c      	ldr	r3, [pc, #368]	; (8001ce4 <HAL_GPIO_Init+0x2fc>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a5b      	ldr	r2, [pc, #364]	; (8001ce4 <HAL_GPIO_Init+0x2fc>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <HAL_GPIO_Init+0x2fc>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8a:	4a57      	ldr	r2, [pc, #348]	; (8001ce8 <HAL_GPIO_Init+0x300>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d025      	beq.n	8001c02 <HAL_GPIO_Init+0x21a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x308>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01f      	beq.n	8001bfe <HAL_GPIO_Init+0x216>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x30c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x212>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_GPIO_Init+0x310>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4a      	ldr	r2, [pc, #296]	; (8001cfc <HAL_GPIO_Init+0x314>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x20a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a49      	ldr	r2, [pc, #292]	; (8001d00 <HAL_GPIO_Init+0x318>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x206>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a48      	ldr	r2, [pc, #288]	; (8001d04 <HAL_GPIO_Init+0x31c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x202>
 8001be6:	2306      	movs	r3, #6
 8001be8:	e00c      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e00a      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e008      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001c02:	2300      	movs	r3, #0
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f002 0203 	and.w	r2, r2, #3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c14:	4934      	ldr	r1, [pc, #208]	; (8001ce8 <HAL_GPIO_Init+0x300>)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c22:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_GPIO_Init+0x320>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c46:	4a30      	ldr	r2, [pc, #192]	; (8001d08 <HAL_GPIO_Init+0x320>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_GPIO_Init+0x320>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_GPIO_Init+0x320>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <HAL_GPIO_Init+0x320>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <HAL_GPIO_Init+0x320>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_GPIO_Init+0x320>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc4:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_GPIO_Init+0x320>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	f67f ae96 	bls.w	8001a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3724      	adds	r7, #36	; 0x24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40013800 	.word	0x40013800
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40021400 	.word	0x40021400
 8001d04:	40021800 	.word	0x40021800
 8001d08:	40013c00 	.word	0x40013c00

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0cc      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d90c      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b65      	ldr	r3, [pc, #404]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0b8      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d94:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a58      	ldr	r2, [pc, #352]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dac:	4b53      	ldr	r3, [pc, #332]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b50      	ldr	r3, [pc, #320]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	494d      	ldr	r1, [pc, #308]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d044      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d119      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e07f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e067      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b37      	ldr	r3, [pc, #220]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4934      	ldr	r1, [pc, #208]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff fc78 	bl	8001724 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff fc74 	bl	8001724 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e04f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d20c      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e032      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4916      	ldr	r1, [pc, #88]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	490e      	ldr	r1, [pc, #56]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec6:	f000 f855 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001eca:	4601      	mov	r1, r0
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	5cd3      	ldrb	r3, [r2, r3]
 8001eda:	fa21 f303 	lsr.w	r3, r1, r3
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fbd8 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00
 8001efc:	40023800 	.word	0x40023800
 8001f00:	08007aac 	.word	0x08007aac
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000000 	.word	0x20000000

08001f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f28:	f7ff fff0 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f2c:	4601      	mov	r1, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4a03      	ldr	r2, [pc, #12]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	08007abc 	.word	0x08007abc

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f50:	f7ff ffdc 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f54:	4601      	mov	r1, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0b5b      	lsrs	r3, r3, #13
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	08007abc 	.word	0x08007abc

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8e:	4bc6      	ldr	r3, [pc, #792]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	f200 817e 	bhi.w	8002298 <HAL_RCC_GetSysClockFreq+0x324>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <HAL_RCC_GetSysClockFreq+0x30>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fd9 	.word	0x08001fd9
 8001fa8:	08002299 	.word	0x08002299
 8001fac:	08002299 	.word	0x08002299
 8001fb0:	08002299 	.word	0x08002299
 8001fb4:	08001fdf 	.word	0x08001fdf
 8001fb8:	08002299 	.word	0x08002299
 8001fbc:	08002299 	.word	0x08002299
 8001fc0:	08002299 	.word	0x08002299
 8001fc4:	08001fe5 	.word	0x08001fe5
 8001fc8:	08002299 	.word	0x08002299
 8001fcc:	08002299 	.word	0x08002299
 8001fd0:	08002299 	.word	0x08002299
 8001fd4:	08002141 	.word	0x08002141
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd8:	4bb4      	ldr	r3, [pc, #720]	; (80022ac <HAL_RCC_GetSysClockFreq+0x338>)
 8001fda:	613b      	str	r3, [r7, #16]
       break;
 8001fdc:	e15f      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fde:	4bb4      	ldr	r3, [pc, #720]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001fe0:	613b      	str	r3, [r7, #16]
      break;
 8001fe2:	e15c      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe4:	4bb0      	ldr	r3, [pc, #704]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fee:	4bae      	ldr	r3, [pc, #696]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d04a      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffa:	4bab      	ldr	r3, [pc, #684]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	099b      	lsrs	r3, r3, #6
 8002000:	f04f 0400 	mov.w	r4, #0
 8002004:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	ea03 0501 	and.w	r5, r3, r1
 8002010:	ea04 0602 	and.w	r6, r4, r2
 8002014:	4629      	mov	r1, r5
 8002016:	4632      	mov	r2, r6
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	f04f 0400 	mov.w	r4, #0
 8002020:	0154      	lsls	r4, r2, #5
 8002022:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002026:	014b      	lsls	r3, r1, #5
 8002028:	4619      	mov	r1, r3
 800202a:	4622      	mov	r2, r4
 800202c:	1b49      	subs	r1, r1, r5
 800202e:	eb62 0206 	sbc.w	r2, r2, r6
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	f04f 0400 	mov.w	r4, #0
 800203a:	0194      	lsls	r4, r2, #6
 800203c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002040:	018b      	lsls	r3, r1, #6
 8002042:	1a5b      	subs	r3, r3, r1
 8002044:	eb64 0402 	sbc.w	r4, r4, r2
 8002048:	f04f 0100 	mov.w	r1, #0
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	00e2      	lsls	r2, r4, #3
 8002052:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002056:	00d9      	lsls	r1, r3, #3
 8002058:	460b      	mov	r3, r1
 800205a:	4614      	mov	r4, r2
 800205c:	195b      	adds	r3, r3, r5
 800205e:	eb44 0406 	adc.w	r4, r4, r6
 8002062:	f04f 0100 	mov.w	r1, #0
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	0262      	lsls	r2, r4, #9
 800206c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002070:	0259      	lsls	r1, r3, #9
 8002072:	460b      	mov	r3, r1
 8002074:	4614      	mov	r4, r2
 8002076:	4618      	mov	r0, r3
 8002078:	4621      	mov	r1, r4
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f04f 0400 	mov.w	r4, #0
 8002080:	461a      	mov	r2, r3
 8002082:	4623      	mov	r3, r4
 8002084:	f7fe fe20 	bl	8000cc8 <__aeabi_uldivmod>
 8002088:	4603      	mov	r3, r0
 800208a:	460c      	mov	r4, r1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e049      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002090:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	f04f 0400 	mov.w	r4, #0
 800209a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	ea03 0501 	and.w	r5, r3, r1
 80020a6:	ea04 0602 	and.w	r6, r4, r2
 80020aa:	4629      	mov	r1, r5
 80020ac:	4632      	mov	r2, r6
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	f04f 0400 	mov.w	r4, #0
 80020b6:	0154      	lsls	r4, r2, #5
 80020b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020bc:	014b      	lsls	r3, r1, #5
 80020be:	4619      	mov	r1, r3
 80020c0:	4622      	mov	r2, r4
 80020c2:	1b49      	subs	r1, r1, r5
 80020c4:	eb62 0206 	sbc.w	r2, r2, r6
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f04f 0400 	mov.w	r4, #0
 80020d0:	0194      	lsls	r4, r2, #6
 80020d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020d6:	018b      	lsls	r3, r1, #6
 80020d8:	1a5b      	subs	r3, r3, r1
 80020da:	eb64 0402 	sbc.w	r4, r4, r2
 80020de:	f04f 0100 	mov.w	r1, #0
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	00e2      	lsls	r2, r4, #3
 80020e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020ec:	00d9      	lsls	r1, r3, #3
 80020ee:	460b      	mov	r3, r1
 80020f0:	4614      	mov	r4, r2
 80020f2:	195b      	adds	r3, r3, r5
 80020f4:	eb44 0406 	adc.w	r4, r4, r6
 80020f8:	f04f 0100 	mov.w	r1, #0
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	02a2      	lsls	r2, r4, #10
 8002102:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002106:	0299      	lsls	r1, r3, #10
 8002108:	460b      	mov	r3, r1
 800210a:	4614      	mov	r4, r2
 800210c:	4618      	mov	r0, r3
 800210e:	4621      	mov	r1, r4
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f04f 0400 	mov.w	r4, #0
 8002116:	461a      	mov	r2, r3
 8002118:	4623      	mov	r3, r4
 800211a:	f7fe fdd5 	bl	8000cc8 <__aeabi_uldivmod>
 800211e:	4603      	mov	r3, r0
 8002120:	460c      	mov	r4, r1
 8002122:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002124:	4b60      	ldr	r3, [pc, #384]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	3301      	adds	r3, #1
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	613b      	str	r3, [r7, #16]
      break;
 800213e:	e0ae      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002140:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002148:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800214a:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d04a      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	f04f 0400 	mov.w	r4, #0
 8002160:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	ea03 0501 	and.w	r5, r3, r1
 800216c:	ea04 0602 	and.w	r6, r4, r2
 8002170:	4629      	mov	r1, r5
 8002172:	4632      	mov	r2, r6
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	f04f 0400 	mov.w	r4, #0
 800217c:	0154      	lsls	r4, r2, #5
 800217e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002182:	014b      	lsls	r3, r1, #5
 8002184:	4619      	mov	r1, r3
 8002186:	4622      	mov	r2, r4
 8002188:	1b49      	subs	r1, r1, r5
 800218a:	eb62 0206 	sbc.w	r2, r2, r6
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	f04f 0400 	mov.w	r4, #0
 8002196:	0194      	lsls	r4, r2, #6
 8002198:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800219c:	018b      	lsls	r3, r1, #6
 800219e:	1a5b      	subs	r3, r3, r1
 80021a0:	eb64 0402 	sbc.w	r4, r4, r2
 80021a4:	f04f 0100 	mov.w	r1, #0
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	00e2      	lsls	r2, r4, #3
 80021ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021b2:	00d9      	lsls	r1, r3, #3
 80021b4:	460b      	mov	r3, r1
 80021b6:	4614      	mov	r4, r2
 80021b8:	195b      	adds	r3, r3, r5
 80021ba:	eb44 0406 	adc.w	r4, r4, r6
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	0262      	lsls	r2, r4, #9
 80021c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80021cc:	0259      	lsls	r1, r3, #9
 80021ce:	460b      	mov	r3, r1
 80021d0:	4614      	mov	r4, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	4621      	mov	r1, r4
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f04f 0400 	mov.w	r4, #0
 80021dc:	461a      	mov	r2, r3
 80021de:	4623      	mov	r3, r4
 80021e0:	f7fe fd72 	bl	8000cc8 <__aeabi_uldivmod>
 80021e4:	4603      	mov	r3, r0
 80021e6:	460c      	mov	r4, r1
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e049      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ec:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	f04f 0400 	mov.w	r4, #0
 80021f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	ea03 0501 	and.w	r5, r3, r1
 8002202:	ea04 0602 	and.w	r6, r4, r2
 8002206:	4629      	mov	r1, r5
 8002208:	4632      	mov	r2, r6
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	f04f 0400 	mov.w	r4, #0
 8002212:	0154      	lsls	r4, r2, #5
 8002214:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002218:	014b      	lsls	r3, r1, #5
 800221a:	4619      	mov	r1, r3
 800221c:	4622      	mov	r2, r4
 800221e:	1b49      	subs	r1, r1, r5
 8002220:	eb62 0206 	sbc.w	r2, r2, r6
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	f04f 0400 	mov.w	r4, #0
 800222c:	0194      	lsls	r4, r2, #6
 800222e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002232:	018b      	lsls	r3, r1, #6
 8002234:	1a5b      	subs	r3, r3, r1
 8002236:	eb64 0402 	sbc.w	r4, r4, r2
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	00e2      	lsls	r2, r4, #3
 8002244:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002248:	00d9      	lsls	r1, r3, #3
 800224a:	460b      	mov	r3, r1
 800224c:	4614      	mov	r4, r2
 800224e:	195b      	adds	r3, r3, r5
 8002250:	eb44 0406 	adc.w	r4, r4, r6
 8002254:	f04f 0100 	mov.w	r1, #0
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	02a2      	lsls	r2, r4, #10
 800225e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002262:	0299      	lsls	r1, r3, #10
 8002264:	460b      	mov	r3, r1
 8002266:	4614      	mov	r4, r2
 8002268:	4618      	mov	r0, r3
 800226a:	4621      	mov	r1, r4
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f04f 0400 	mov.w	r4, #0
 8002272:	461a      	mov	r2, r3
 8002274:	4623      	mov	r3, r4
 8002276:	f7fe fd27 	bl	8000cc8 <__aeabi_uldivmod>
 800227a:	4603      	mov	r3, r0
 800227c:	460c      	mov	r4, r1
 800227e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	0f1b      	lsrs	r3, r3, #28
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
      break;
 8002296:	e002      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <HAL_RCC_GetSysClockFreq+0x338>)
 800229a:	613b      	str	r3, [r7, #16]
      break;
 800229c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229e:	693b      	ldr	r3, [r7, #16]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	00f42400 	.word	0x00f42400
 80022b0:	007a1200 	.word	0x007a1200

080022b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8083 	beq.w	80023d4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022ce:	4b95      	ldr	r3, [pc, #596]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d019      	beq.n	800230e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022da:	4b92      	ldr	r3, [pc, #584]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d106      	bne.n	80022f4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022e6:	4b8f      	ldr	r3, [pc, #572]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f2:	d00c      	beq.n	800230e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f4:	4b8b      	ldr	r3, [pc, #556]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022fc:	2b0c      	cmp	r3, #12
 80022fe:	d112      	bne.n	8002326 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002300:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800230c:	d10b      	bne.n	8002326 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230e:	4b85      	ldr	r3, [pc, #532]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d05b      	beq.n	80023d2 <HAL_RCC_OscConfig+0x11e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d157      	bne.n	80023d2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e216      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x8a>
 8002330:	4b7c      	ldr	r3, [pc, #496]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a7b      	ldr	r2, [pc, #492]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	e01d      	b.n	800237a <HAL_RCC_OscConfig+0xc6>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002346:	d10c      	bne.n	8002362 <HAL_RCC_OscConfig+0xae>
 8002348:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a75      	ldr	r2, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800234e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a72      	ldr	r2, [pc, #456]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800235a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	e00b      	b.n	800237a <HAL_RCC_OscConfig+0xc6>
 8002362:	4b70      	ldr	r3, [pc, #448]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6f      	ldr	r2, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6c      	ldr	r2, [pc, #432]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d013      	beq.n	80023aa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7ff f9cf 	bl	8001724 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238a:	f7ff f9cb 	bl	8001724 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e1db      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239c:	4b61      	ldr	r3, [pc, #388]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0xd6>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7ff f9bb 	bl	8001724 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b2:	f7ff f9b7 	bl	8001724 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1c7      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0xfe>
 80023d0:	e000      	b.n	80023d4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d06f      	beq.n	80024c0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d017      	beq.n	800241c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ec:	4b4d      	ldr	r3, [pc, #308]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d105      	bne.n	8002404 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023f8:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002404:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800240c:	2b0c      	cmp	r3, #12
 800240e:	d11c      	bne.n	800244a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002410:	4b44      	ldr	r3, [pc, #272]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d116      	bne.n	800244a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241c:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_OscConfig+0x180>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d001      	beq.n	8002434 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e18f      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4938      	ldr	r1, [pc, #224]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002448:	e03a      	b.n	80024c0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d020      	beq.n	8002494 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002452:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_RCC_OscConfig+0x274>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7ff f964 	bl	8001724 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002460:	f7ff f960 	bl	8001724 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e170      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4925      	ldr	r1, [pc, #148]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
 8002492:	e015      	b.n	80024c0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_OscConfig+0x274>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7ff f943 	bl	8001724 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff f93f 	bl	8001724 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e14f      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d037      	beq.n	800253c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d016      	beq.n	8002502 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_RCC_OscConfig+0x278>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7ff f923 	bl	8001724 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e2:	f7ff f91f 	bl	8001724 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e12f      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 80024f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x22e>
 8002500:	e01c      	b.n	800253c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_RCC_OscConfig+0x278>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7ff f90c 	bl	8001724 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250e:	e00f      	b.n	8002530 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002510:	f7ff f908 	bl	8001724 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d908      	bls.n	8002530 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e118      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	42470000 	.word	0x42470000
 800252c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002530:	4b8a      	ldr	r3, [pc, #552]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e9      	bne.n	8002510 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8097 	beq.w	8002678 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254e:	4b83      	ldr	r3, [pc, #524]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10f      	bne.n	800257a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b7f      	ldr	r3, [pc, #508]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a7e      	ldr	r2, [pc, #504]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b7c      	ldr	r3, [pc, #496]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b79      	ldr	r3, [pc, #484]	; (8002760 <HAL_RCC_OscConfig+0x4ac>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002586:	4b76      	ldr	r3, [pc, #472]	; (8002760 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a75      	ldr	r2, [pc, #468]	; (8002760 <HAL_RCC_OscConfig+0x4ac>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7ff f8c7 	bl	8001724 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7ff f8c3 	bl	8001724 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0d3      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b6c      	ldr	r3, [pc, #432]	; (8002760 <HAL_RCC_OscConfig+0x4ac>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x31a>
 80025c0:	4b66      	ldr	r3, [pc, #408]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a65      	ldr	r2, [pc, #404]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
 80025cc:	e01c      	b.n	8002608 <HAL_RCC_OscConfig+0x354>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x33c>
 80025d6:	4b61      	ldr	r3, [pc, #388]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a60      	ldr	r2, [pc, #384]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70
 80025e2:	4b5e      	ldr	r3, [pc, #376]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a5d      	ldr	r2, [pc, #372]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0x354>
 80025f0:	4b5a      	ldr	r3, [pc, #360]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a59      	ldr	r2, [pc, #356]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	4b57      	ldr	r3, [pc, #348]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a56      	ldr	r2, [pc, #344]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 8002602:	f023 0304 	bic.w	r3, r3, #4
 8002606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7ff f888 	bl	8001724 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7ff f884 	bl	8001724 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e092      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	4b4b      	ldr	r3, [pc, #300]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0ee      	beq.n	8002618 <HAL_RCC_OscConfig+0x364>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7ff f872 	bl	8001724 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7ff f86e 	bl	8001724 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e07c      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	4b40      	ldr	r3, [pc, #256]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ee      	bne.n	8002644 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	4a3a      	ldr	r2, [pc, #232]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d068      	beq.n	8002752 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d060      	beq.n	800274e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d145      	bne.n	8002720 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002694:	4b33      	ldr	r3, [pc, #204]	; (8002764 <HAL_RCC_OscConfig+0x4b0>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7ff f843 	bl	8001724 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a2:	f7ff f83f 	bl	8001724 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e04f      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b4:	4b29      	ldr	r3, [pc, #164]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	019b      	lsls	r3, r3, #6
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	3b01      	subs	r3, #1
 80026da:	041b      	lsls	r3, r3, #16
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	061b      	lsls	r3, r3, #24
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	071b      	lsls	r3, r3, #28
 80026ec:	491b      	ldr	r1, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_RCC_OscConfig+0x4b0>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7ff f814 	bl	8001724 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7ff f810 	bl	8001724 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e020      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x44c>
 800271e:	e018      	b.n	8002752 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <HAL_RCC_OscConfig+0x4b0>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fffd 	bl	8001724 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7fe fff9 	bl	8001724 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e009      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_OscConfig+0x4a8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x47a>
 800274c:	e001      	b.n	8002752 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
 8002764:	42470060 	.word	0x42470060

08002768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e03f      	b.n	80027fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fdf6 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fb97 	bl	8002ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b088      	sub	sp, #32
 8002806:	af02      	add	r7, sp, #8
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	4613      	mov	r3, r2
 8002810:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b20      	cmp	r3, #32
 8002820:	f040 8083 	bne.w	800292a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_UART_Transmit+0x2e>
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e07b      	b.n	800292c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_UART_Transmit+0x40>
 800283e:	2302      	movs	r3, #2
 8002840:	e074      	b.n	800292c <HAL_UART_Transmit+0x12a>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2221      	movs	r2, #33	; 0x21
 8002854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002858:	f7fe ff64 	bl	8001724 <HAL_GetTick>
 800285c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	88fa      	ldrh	r2, [r7, #6]
 8002862:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002872:	e042      	b.n	80028fa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	d122      	bne.n	80028d2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f9b6 	bl	8002c08 <UART_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e042      	b.n	800292c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3302      	adds	r3, #2
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	e017      	b.n	80028fa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3301      	adds	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	e013      	b.n	80028fa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f993 	bl	8002c08 <UART_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e01f      	b.n	800292c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	60ba      	str	r2, [r7, #8]
 80028f2:	781a      	ldrb	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1b7      	bne.n	8002874 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2200      	movs	r2, #0
 800290c:	2140      	movs	r1, #64	; 0x40
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f97a 	bl	8002c08 <UART_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e006      	b.n	800292c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b20      	cmp	r3, #32
 800294c:	d140      	bne.n	80029d0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_UART_Receive_IT+0x26>
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e039      	b.n	80029d2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_UART_Receive_IT+0x38>
 8002968:	2302      	movs	r3, #2
 800296a:	e032      	b.n	80029d2 <HAL_UART_Receive_IT+0x9e>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2222      	movs	r2, #34	; 0x22
 8002990:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029aa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0220 	orr.w	r2, r2, #32
 80029ca:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_UART_IRQHandler+0x52>
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9d6 	bl	8002ddc <UART_Receive_IT>
      return;
 8002a30:	e0d1      	b.n	8002bd6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80b0 	beq.w	8002b9a <HAL_UART_IRQHandler+0x1ba>
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_UART_IRQHandler+0x70>
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80a5 	beq.w	8002b9a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_UART_IRQHandler+0x90>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_UART_IRQHandler+0xb0>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	f043 0202 	orr.w	r2, r3, #2
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_UART_IRQHandler+0xd0>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	f043 0204 	orr.w	r2, r3, #4
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00f      	beq.n	8002ada <HAL_UART_IRQHandler+0xfa>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <HAL_UART_IRQHandler+0xee>
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	f043 0208 	orr.w	r2, r3, #8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d078      	beq.n	8002bd4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_UART_IRQHandler+0x11c>
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f970 	bl	8002ddc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	bf0c      	ite	eq
 8002b0a:	2301      	moveq	r3, #1
 8002b0c:	2300      	movne	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <HAL_UART_IRQHandler+0x144>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d031      	beq.n	8002b88 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8b9 	bl	8002c9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d123      	bne.n	8002b80 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b46:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HAL_UART_IRQHandler+0x1fc>)
 8002b56:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe ff20 	bl	80019a2 <HAL_DMA_Abort_IT>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d016      	beq.n	8002b96 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b72:	4610      	mov	r0, r2
 8002b74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b76:	e00e      	b.n	8002b96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f83b 	bl	8002bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7e:	e00a      	b.n	8002b96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f837 	bl	8002bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b86:	e006      	b.n	8002b96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f833 	bl	8002bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002b94:	e01e      	b.n	8002bd4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b96:	bf00      	nop
    return;
 8002b98:	e01c      	b.n	8002bd4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x1d6>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f8a6 	bl	8002d00 <UART_Transmit_IT>
    return;
 8002bb4:	e00f      	b.n	8002bd6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1f6>
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f8ee 	bl	8002dac <UART_EndTransmit_IT>
    return;
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002bd4:	bf00      	nop
  }
}
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	08002cd9 	.word	0x08002cd9

08002be0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c18:	e02c      	b.n	8002c74 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d028      	beq.n	8002c74 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c28:	f7fe fd7c 	bl	8001724 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d21d      	bcs.n	8002c74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c46:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e00f      	b.n	8002c94 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d0c3      	beq.n	8002c1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cb2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7ff ff7e 	bl	8002bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b21      	cmp	r3, #33	; 0x21
 8002d12:	d144      	bne.n	8002d9e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1c:	d11a      	bne.n	8002d54 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d32:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	1c9a      	adds	r2, r3, #2
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	621a      	str	r2, [r3, #32]
 8002d46:	e00e      	b.n	8002d66 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	621a      	str	r2, [r3, #32]
 8002d52:	e008      	b.n	8002d66 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	1c59      	adds	r1, r3, #1
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6211      	str	r1, [r2, #32]
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4619      	mov	r1, r3
 8002d74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10f      	bne.n	8002d9a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
  }
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff07 	bl	8002be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b22      	cmp	r3, #34	; 0x22
 8002dee:	d171      	bne.n	8002ed4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df8:	d123      	bne.n	8002e42 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10e      	bne.n	8002e26 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	1c9a      	adds	r2, r3, #2
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
 8002e24:	e029      	b.n	8002e7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e40:	e01b      	b.n	8002e7a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6858      	ldr	r0, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	1c59      	adds	r1, r3, #1
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6291      	str	r1, [r2, #40]	; 0x28
 8002e5a:	b2c2      	uxtb	r2, r0
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e00c      	b.n	8002e7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	1c58      	adds	r0, r3, #1
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	6288      	str	r0, [r1, #40]	; 0x28
 8002e72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4619      	mov	r1, r3
 8002e88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d120      	bne.n	8002ed0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0220 	bic.w	r2, r2, #32
 8002e9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fe f87e 	bl	8000fc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e002      	b.n	8002ed6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f22:	f023 030c 	bic.w	r3, r3, #12
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	68f9      	ldr	r1, [r7, #12]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4e:	f040 818b 	bne.w	8003268 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4ac1      	ldr	r2, [pc, #772]	; (800325c <UART_SetConfig+0x37c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d005      	beq.n	8002f68 <UART_SetConfig+0x88>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4abf      	ldr	r2, [pc, #764]	; (8003260 <UART_SetConfig+0x380>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	f040 80bd 	bne.w	80030e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f68:	f7fe fff0 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8002f6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	461d      	mov	r5, r3
 8002f72:	f04f 0600 	mov.w	r6, #0
 8002f76:	46a8      	mov	r8, r5
 8002f78:	46b1      	mov	r9, r6
 8002f7a:	eb18 0308 	adds.w	r3, r8, r8
 8002f7e:	eb49 0409 	adc.w	r4, r9, r9
 8002f82:	4698      	mov	r8, r3
 8002f84:	46a1      	mov	r9, r4
 8002f86:	eb18 0805 	adds.w	r8, r8, r5
 8002f8a:	eb49 0906 	adc.w	r9, r9, r6
 8002f8e:	f04f 0100 	mov.w	r1, #0
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fa2:	4688      	mov	r8, r1
 8002fa4:	4691      	mov	r9, r2
 8002fa6:	eb18 0005 	adds.w	r0, r8, r5
 8002faa:	eb49 0106 	adc.w	r1, r9, r6
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	461d      	mov	r5, r3
 8002fb4:	f04f 0600 	mov.w	r6, #0
 8002fb8:	196b      	adds	r3, r5, r5
 8002fba:	eb46 0406 	adc.w	r4, r6, r6
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4623      	mov	r3, r4
 8002fc2:	f7fd fe81 	bl	8000cc8 <__aeabi_uldivmod>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	460c      	mov	r4, r1
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4ba5      	ldr	r3, [pc, #660]	; (8003264 <UART_SetConfig+0x384>)
 8002fce:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	461d      	mov	r5, r3
 8002fdc:	f04f 0600 	mov.w	r6, #0
 8002fe0:	46a9      	mov	r9, r5
 8002fe2:	46b2      	mov	sl, r6
 8002fe4:	eb19 0309 	adds.w	r3, r9, r9
 8002fe8:	eb4a 040a 	adc.w	r4, sl, sl
 8002fec:	4699      	mov	r9, r3
 8002fee:	46a2      	mov	sl, r4
 8002ff0:	eb19 0905 	adds.w	r9, r9, r5
 8002ff4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003004:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003008:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800300c:	4689      	mov	r9, r1
 800300e:	4692      	mov	sl, r2
 8003010:	eb19 0005 	adds.w	r0, r9, r5
 8003014:	eb4a 0106 	adc.w	r1, sl, r6
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	461d      	mov	r5, r3
 800301e:	f04f 0600 	mov.w	r6, #0
 8003022:	196b      	adds	r3, r5, r5
 8003024:	eb46 0406 	adc.w	r4, r6, r6
 8003028:	461a      	mov	r2, r3
 800302a:	4623      	mov	r3, r4
 800302c:	f7fd fe4c 	bl	8000cc8 <__aeabi_uldivmod>
 8003030:	4603      	mov	r3, r0
 8003032:	460c      	mov	r4, r1
 8003034:	461a      	mov	r2, r3
 8003036:	4b8b      	ldr	r3, [pc, #556]	; (8003264 <UART_SetConfig+0x384>)
 8003038:	fba3 1302 	umull	r1, r3, r3, r2
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	2164      	movs	r1, #100	; 0x64
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	3332      	adds	r3, #50	; 0x32
 800304a:	4a86      	ldr	r2, [pc, #536]	; (8003264 <UART_SetConfig+0x384>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003058:	4498      	add	r8, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	461d      	mov	r5, r3
 800305e:	f04f 0600 	mov.w	r6, #0
 8003062:	46a9      	mov	r9, r5
 8003064:	46b2      	mov	sl, r6
 8003066:	eb19 0309 	adds.w	r3, r9, r9
 800306a:	eb4a 040a 	adc.w	r4, sl, sl
 800306e:	4699      	mov	r9, r3
 8003070:	46a2      	mov	sl, r4
 8003072:	eb19 0905 	adds.w	r9, r9, r5
 8003076:	eb4a 0a06 	adc.w	sl, sl, r6
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003086:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800308a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800308e:	4689      	mov	r9, r1
 8003090:	4692      	mov	sl, r2
 8003092:	eb19 0005 	adds.w	r0, r9, r5
 8003096:	eb4a 0106 	adc.w	r1, sl, r6
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	461d      	mov	r5, r3
 80030a0:	f04f 0600 	mov.w	r6, #0
 80030a4:	196b      	adds	r3, r5, r5
 80030a6:	eb46 0406 	adc.w	r4, r6, r6
 80030aa:	461a      	mov	r2, r3
 80030ac:	4623      	mov	r3, r4
 80030ae:	f7fd fe0b 	bl	8000cc8 <__aeabi_uldivmod>
 80030b2:	4603      	mov	r3, r0
 80030b4:	460c      	mov	r4, r1
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b6a      	ldr	r3, [pc, #424]	; (8003264 <UART_SetConfig+0x384>)
 80030ba:	fba3 1302 	umull	r1, r3, r3, r2
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2164      	movs	r1, #100	; 0x64
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	3332      	adds	r3, #50	; 0x32
 80030cc:	4a65      	ldr	r2, [pc, #404]	; (8003264 <UART_SetConfig+0x384>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	f003 0207 	and.w	r2, r3, #7
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4442      	add	r2, r8
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e26f      	b.n	80035c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030e2:	f7fe ff1f 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 80030e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	461d      	mov	r5, r3
 80030ec:	f04f 0600 	mov.w	r6, #0
 80030f0:	46a8      	mov	r8, r5
 80030f2:	46b1      	mov	r9, r6
 80030f4:	eb18 0308 	adds.w	r3, r8, r8
 80030f8:	eb49 0409 	adc.w	r4, r9, r9
 80030fc:	4698      	mov	r8, r3
 80030fe:	46a1      	mov	r9, r4
 8003100:	eb18 0805 	adds.w	r8, r8, r5
 8003104:	eb49 0906 	adc.w	r9, r9, r6
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003114:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003118:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800311c:	4688      	mov	r8, r1
 800311e:	4691      	mov	r9, r2
 8003120:	eb18 0005 	adds.w	r0, r8, r5
 8003124:	eb49 0106 	adc.w	r1, r9, r6
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	461d      	mov	r5, r3
 800312e:	f04f 0600 	mov.w	r6, #0
 8003132:	196b      	adds	r3, r5, r5
 8003134:	eb46 0406 	adc.w	r4, r6, r6
 8003138:	461a      	mov	r2, r3
 800313a:	4623      	mov	r3, r4
 800313c:	f7fd fdc4 	bl	8000cc8 <__aeabi_uldivmod>
 8003140:	4603      	mov	r3, r0
 8003142:	460c      	mov	r4, r1
 8003144:	461a      	mov	r2, r3
 8003146:	4b47      	ldr	r3, [pc, #284]	; (8003264 <UART_SetConfig+0x384>)
 8003148:	fba3 2302 	umull	r2, r3, r3, r2
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	461d      	mov	r5, r3
 8003156:	f04f 0600 	mov.w	r6, #0
 800315a:	46a9      	mov	r9, r5
 800315c:	46b2      	mov	sl, r6
 800315e:	eb19 0309 	adds.w	r3, r9, r9
 8003162:	eb4a 040a 	adc.w	r4, sl, sl
 8003166:	4699      	mov	r9, r3
 8003168:	46a2      	mov	sl, r4
 800316a:	eb19 0905 	adds.w	r9, r9, r5
 800316e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003172:	f04f 0100 	mov.w	r1, #0
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800317e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003182:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003186:	4689      	mov	r9, r1
 8003188:	4692      	mov	sl, r2
 800318a:	eb19 0005 	adds.w	r0, r9, r5
 800318e:	eb4a 0106 	adc.w	r1, sl, r6
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	461d      	mov	r5, r3
 8003198:	f04f 0600 	mov.w	r6, #0
 800319c:	196b      	adds	r3, r5, r5
 800319e:	eb46 0406 	adc.w	r4, r6, r6
 80031a2:	461a      	mov	r2, r3
 80031a4:	4623      	mov	r3, r4
 80031a6:	f7fd fd8f 	bl	8000cc8 <__aeabi_uldivmod>
 80031aa:	4603      	mov	r3, r0
 80031ac:	460c      	mov	r4, r1
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <UART_SetConfig+0x384>)
 80031b2:	fba3 1302 	umull	r1, r3, r3, r2
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2164      	movs	r1, #100	; 0x64
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	3332      	adds	r3, #50	; 0x32
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <UART_SetConfig+0x384>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031d2:	4498      	add	r8, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	461d      	mov	r5, r3
 80031d8:	f04f 0600 	mov.w	r6, #0
 80031dc:	46a9      	mov	r9, r5
 80031de:	46b2      	mov	sl, r6
 80031e0:	eb19 0309 	adds.w	r3, r9, r9
 80031e4:	eb4a 040a 	adc.w	r4, sl, sl
 80031e8:	4699      	mov	r9, r3
 80031ea:	46a2      	mov	sl, r4
 80031ec:	eb19 0905 	adds.w	r9, r9, r5
 80031f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80031f4:	f04f 0100 	mov.w	r1, #0
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003200:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003204:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003208:	4689      	mov	r9, r1
 800320a:	4692      	mov	sl, r2
 800320c:	eb19 0005 	adds.w	r0, r9, r5
 8003210:	eb4a 0106 	adc.w	r1, sl, r6
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	461d      	mov	r5, r3
 800321a:	f04f 0600 	mov.w	r6, #0
 800321e:	196b      	adds	r3, r5, r5
 8003220:	eb46 0406 	adc.w	r4, r6, r6
 8003224:	461a      	mov	r2, r3
 8003226:	4623      	mov	r3, r4
 8003228:	f7fd fd4e 	bl	8000cc8 <__aeabi_uldivmod>
 800322c:	4603      	mov	r3, r0
 800322e:	460c      	mov	r4, r1
 8003230:	461a      	mov	r2, r3
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <UART_SetConfig+0x384>)
 8003234:	fba3 1302 	umull	r1, r3, r3, r2
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	2164      	movs	r1, #100	; 0x64
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	3332      	adds	r3, #50	; 0x32
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <UART_SetConfig+0x384>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	f003 0207 	and.w	r2, r3, #7
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4442      	add	r2, r8
 8003258:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800325a:	e1b2      	b.n	80035c2 <UART_SetConfig+0x6e2>
 800325c:	40011000 	.word	0x40011000
 8003260:	40011400 	.word	0x40011400
 8003264:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4ad7      	ldr	r2, [pc, #860]	; (80035cc <UART_SetConfig+0x6ec>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d005      	beq.n	800327e <UART_SetConfig+0x39e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4ad6      	ldr	r2, [pc, #856]	; (80035d0 <UART_SetConfig+0x6f0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	f040 80d1 	bne.w	8003420 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800327e:	f7fe fe65 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8003282:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	469a      	mov	sl, r3
 8003288:	f04f 0b00 	mov.w	fp, #0
 800328c:	46d0      	mov	r8, sl
 800328e:	46d9      	mov	r9, fp
 8003290:	eb18 0308 	adds.w	r3, r8, r8
 8003294:	eb49 0409 	adc.w	r4, r9, r9
 8003298:	4698      	mov	r8, r3
 800329a:	46a1      	mov	r9, r4
 800329c:	eb18 080a 	adds.w	r8, r8, sl
 80032a0:	eb49 090b 	adc.w	r9, r9, fp
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032b8:	4688      	mov	r8, r1
 80032ba:	4691      	mov	r9, r2
 80032bc:	eb1a 0508 	adds.w	r5, sl, r8
 80032c0:	eb4b 0609 	adc.w	r6, fp, r9
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	f04f 0400 	mov.w	r4, #0
 80032d6:	0094      	lsls	r4, r2, #2
 80032d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032dc:	008b      	lsls	r3, r1, #2
 80032de:	461a      	mov	r2, r3
 80032e0:	4623      	mov	r3, r4
 80032e2:	4628      	mov	r0, r5
 80032e4:	4631      	mov	r1, r6
 80032e6:	f7fd fcef 	bl	8000cc8 <__aeabi_uldivmod>
 80032ea:	4603      	mov	r3, r0
 80032ec:	460c      	mov	r4, r1
 80032ee:	461a      	mov	r2, r3
 80032f0:	4bb8      	ldr	r3, [pc, #736]	; (80035d4 <UART_SetConfig+0x6f4>)
 80032f2:	fba3 2302 	umull	r2, r3, r3, r2
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	469b      	mov	fp, r3
 8003300:	f04f 0c00 	mov.w	ip, #0
 8003304:	46d9      	mov	r9, fp
 8003306:	46e2      	mov	sl, ip
 8003308:	eb19 0309 	adds.w	r3, r9, r9
 800330c:	eb4a 040a 	adc.w	r4, sl, sl
 8003310:	4699      	mov	r9, r3
 8003312:	46a2      	mov	sl, r4
 8003314:	eb19 090b 	adds.w	r9, r9, fp
 8003318:	eb4a 0a0c 	adc.w	sl, sl, ip
 800331c:	f04f 0100 	mov.w	r1, #0
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003328:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800332c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003330:	4689      	mov	r9, r1
 8003332:	4692      	mov	sl, r2
 8003334:	eb1b 0509 	adds.w	r5, fp, r9
 8003338:	eb4c 060a 	adc.w	r6, ip, sl
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4619      	mov	r1, r3
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	f04f 0400 	mov.w	r4, #0
 800334e:	0094      	lsls	r4, r2, #2
 8003350:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003354:	008b      	lsls	r3, r1, #2
 8003356:	461a      	mov	r2, r3
 8003358:	4623      	mov	r3, r4
 800335a:	4628      	mov	r0, r5
 800335c:	4631      	mov	r1, r6
 800335e:	f7fd fcb3 	bl	8000cc8 <__aeabi_uldivmod>
 8003362:	4603      	mov	r3, r0
 8003364:	460c      	mov	r4, r1
 8003366:	461a      	mov	r2, r3
 8003368:	4b9a      	ldr	r3, [pc, #616]	; (80035d4 <UART_SetConfig+0x6f4>)
 800336a:	fba3 1302 	umull	r1, r3, r3, r2
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2164      	movs	r1, #100	; 0x64
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	3332      	adds	r3, #50	; 0x32
 800337c:	4a95      	ldr	r2, [pc, #596]	; (80035d4 <UART_SetConfig+0x6f4>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003388:	4498      	add	r8, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	469b      	mov	fp, r3
 800338e:	f04f 0c00 	mov.w	ip, #0
 8003392:	46d9      	mov	r9, fp
 8003394:	46e2      	mov	sl, ip
 8003396:	eb19 0309 	adds.w	r3, r9, r9
 800339a:	eb4a 040a 	adc.w	r4, sl, sl
 800339e:	4699      	mov	r9, r3
 80033a0:	46a2      	mov	sl, r4
 80033a2:	eb19 090b 	adds.w	r9, r9, fp
 80033a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033aa:	f04f 0100 	mov.w	r1, #0
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033be:	4689      	mov	r9, r1
 80033c0:	4692      	mov	sl, r2
 80033c2:	eb1b 0509 	adds.w	r5, fp, r9
 80033c6:	eb4c 060a 	adc.w	r6, ip, sl
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4619      	mov	r1, r3
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	f04f 0400 	mov.w	r4, #0
 80033dc:	0094      	lsls	r4, r2, #2
 80033de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033e2:	008b      	lsls	r3, r1, #2
 80033e4:	461a      	mov	r2, r3
 80033e6:	4623      	mov	r3, r4
 80033e8:	4628      	mov	r0, r5
 80033ea:	4631      	mov	r1, r6
 80033ec:	f7fd fc6c 	bl	8000cc8 <__aeabi_uldivmod>
 80033f0:	4603      	mov	r3, r0
 80033f2:	460c      	mov	r4, r1
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <UART_SetConfig+0x6f4>)
 80033f8:	fba3 1302 	umull	r1, r3, r3, r2
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	2164      	movs	r1, #100	; 0x64
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	3332      	adds	r3, #50	; 0x32
 800340a:	4a72      	ldr	r2, [pc, #456]	; (80035d4 <UART_SetConfig+0x6f4>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	f003 020f 	and.w	r2, r3, #15
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4442      	add	r2, r8
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	e0d0      	b.n	80035c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7fe fd80 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8003424:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	469a      	mov	sl, r3
 800342a:	f04f 0b00 	mov.w	fp, #0
 800342e:	46d0      	mov	r8, sl
 8003430:	46d9      	mov	r9, fp
 8003432:	eb18 0308 	adds.w	r3, r8, r8
 8003436:	eb49 0409 	adc.w	r4, r9, r9
 800343a:	4698      	mov	r8, r3
 800343c:	46a1      	mov	r9, r4
 800343e:	eb18 080a 	adds.w	r8, r8, sl
 8003442:	eb49 090b 	adc.w	r9, r9, fp
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003452:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003456:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800345a:	4688      	mov	r8, r1
 800345c:	4691      	mov	r9, r2
 800345e:	eb1a 0508 	adds.w	r5, sl, r8
 8003462:	eb4b 0609 	adc.w	r6, fp, r9
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4619      	mov	r1, r3
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f04f 0400 	mov.w	r4, #0
 8003478:	0094      	lsls	r4, r2, #2
 800347a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800347e:	008b      	lsls	r3, r1, #2
 8003480:	461a      	mov	r2, r3
 8003482:	4623      	mov	r3, r4
 8003484:	4628      	mov	r0, r5
 8003486:	4631      	mov	r1, r6
 8003488:	f7fd fc1e 	bl	8000cc8 <__aeabi_uldivmod>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	461a      	mov	r2, r3
 8003492:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <UART_SetConfig+0x6f4>)
 8003494:	fba3 2302 	umull	r2, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	469b      	mov	fp, r3
 80034a2:	f04f 0c00 	mov.w	ip, #0
 80034a6:	46d9      	mov	r9, fp
 80034a8:	46e2      	mov	sl, ip
 80034aa:	eb19 0309 	adds.w	r3, r9, r9
 80034ae:	eb4a 040a 	adc.w	r4, sl, sl
 80034b2:	4699      	mov	r9, r3
 80034b4:	46a2      	mov	sl, r4
 80034b6:	eb19 090b 	adds.w	r9, r9, fp
 80034ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034d2:	4689      	mov	r9, r1
 80034d4:	4692      	mov	sl, r2
 80034d6:	eb1b 0509 	adds.w	r5, fp, r9
 80034da:	eb4c 060a 	adc.w	r6, ip, sl
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4619      	mov	r1, r3
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	f04f 0400 	mov.w	r4, #0
 80034f0:	0094      	lsls	r4, r2, #2
 80034f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034f6:	008b      	lsls	r3, r1, #2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4623      	mov	r3, r4
 80034fc:	4628      	mov	r0, r5
 80034fe:	4631      	mov	r1, r6
 8003500:	f7fd fbe2 	bl	8000cc8 <__aeabi_uldivmod>
 8003504:	4603      	mov	r3, r0
 8003506:	460c      	mov	r4, r1
 8003508:	461a      	mov	r2, r3
 800350a:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <UART_SetConfig+0x6f4>)
 800350c:	fba3 1302 	umull	r1, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	2164      	movs	r1, #100	; 0x64
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	3332      	adds	r3, #50	; 0x32
 800351e:	4a2d      	ldr	r2, [pc, #180]	; (80035d4 <UART_SetConfig+0x6f4>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352a:	4498      	add	r8, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	469b      	mov	fp, r3
 8003530:	f04f 0c00 	mov.w	ip, #0
 8003534:	46d9      	mov	r9, fp
 8003536:	46e2      	mov	sl, ip
 8003538:	eb19 0309 	adds.w	r3, r9, r9
 800353c:	eb4a 040a 	adc.w	r4, sl, sl
 8003540:	4699      	mov	r9, r3
 8003542:	46a2      	mov	sl, r4
 8003544:	eb19 090b 	adds.w	r9, r9, fp
 8003548:	eb4a 0a0c 	adc.w	sl, sl, ip
 800354c:	f04f 0100 	mov.w	r1, #0
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003558:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800355c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003560:	4689      	mov	r9, r1
 8003562:	4692      	mov	sl, r2
 8003564:	eb1b 0509 	adds.w	r5, fp, r9
 8003568:	eb4c 060a 	adc.w	r6, ip, sl
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4619      	mov	r1, r3
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	f04f 0400 	mov.w	r4, #0
 800357e:	0094      	lsls	r4, r2, #2
 8003580:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003584:	008b      	lsls	r3, r1, #2
 8003586:	461a      	mov	r2, r3
 8003588:	4623      	mov	r3, r4
 800358a:	4628      	mov	r0, r5
 800358c:	4631      	mov	r1, r6
 800358e:	f7fd fb9b 	bl	8000cc8 <__aeabi_uldivmod>
 8003592:	4603      	mov	r3, r0
 8003594:	460c      	mov	r4, r1
 8003596:	461a      	mov	r2, r3
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <UART_SetConfig+0x6f4>)
 800359a:	fba3 1302 	umull	r1, r3, r3, r2
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2164      	movs	r1, #100	; 0x64
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	3332      	adds	r3, #50	; 0x32
 80035ac:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <UART_SetConfig+0x6f4>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	f003 020f 	and.w	r2, r3, #15
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4442      	add	r2, r8
 80035be:	609a      	str	r2, [r3, #8]
}
 80035c0:	e7ff      	b.n	80035c2 <UART_SetConfig+0x6e2>
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035cc:	40011000 	.word	0x40011000
 80035d0:	40011400 	.word	0x40011400
 80035d4:	51eb851f 	.word	0x51eb851f

080035d8 <__errno>:
 80035d8:	4b01      	ldr	r3, [pc, #4]	; (80035e0 <__errno+0x8>)
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <_gets_r>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	460e      	mov	r6, r1
 80035e8:	4605      	mov	r5, r0
 80035ea:	b118      	cbz	r0, 80035f4 <_gets_r+0x10>
 80035ec:	6983      	ldr	r3, [r0, #24]
 80035ee:	b90b      	cbnz	r3, 80035f4 <_gets_r+0x10>
 80035f0:	f002 fe18 	bl	8006224 <__sinit>
 80035f4:	69ab      	ldr	r3, [r5, #24]
 80035f6:	686c      	ldr	r4, [r5, #4]
 80035f8:	b913      	cbnz	r3, 8003600 <_gets_r+0x1c>
 80035fa:	4628      	mov	r0, r5
 80035fc:	f002 fe12 	bl	8006224 <__sinit>
 8003600:	4b16      	ldr	r3, [pc, #88]	; (800365c <_gets_r+0x78>)
 8003602:	429c      	cmp	r4, r3
 8003604:	d114      	bne.n	8003630 <_gets_r+0x4c>
 8003606:	686c      	ldr	r4, [r5, #4]
 8003608:	4637      	mov	r7, r6
 800360a:	6863      	ldr	r3, [r4, #4]
 800360c:	3b01      	subs	r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	6063      	str	r3, [r4, #4]
 8003612:	da17      	bge.n	8003644 <_gets_r+0x60>
 8003614:	4621      	mov	r1, r4
 8003616:	4628      	mov	r0, r5
 8003618:	f000 fefc 	bl	8004414 <__srget_r>
 800361c:	280a      	cmp	r0, #10
 800361e:	d003      	beq.n	8003628 <_gets_r+0x44>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d115      	bne.n	8003650 <_gets_r+0x6c>
 8003624:	42b7      	cmp	r7, r6
 8003626:	d016      	beq.n	8003656 <_gets_r+0x72>
 8003628:	2300      	movs	r3, #0
 800362a:	703b      	strb	r3, [r7, #0]
 800362c:	4630      	mov	r0, r6
 800362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <_gets_r+0x7c>)
 8003632:	429c      	cmp	r4, r3
 8003634:	d101      	bne.n	800363a <_gets_r+0x56>
 8003636:	68ac      	ldr	r4, [r5, #8]
 8003638:	e7e6      	b.n	8003608 <_gets_r+0x24>
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <_gets_r+0x80>)
 800363c:	429c      	cmp	r4, r3
 800363e:	bf08      	it	eq
 8003640:	68ec      	ldreq	r4, [r5, #12]
 8003642:	e7e1      	b.n	8003608 <_gets_r+0x24>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	6022      	str	r2, [r4, #0]
 800364a:	7818      	ldrb	r0, [r3, #0]
 800364c:	280a      	cmp	r0, #10
 800364e:	d0eb      	beq.n	8003628 <_gets_r+0x44>
 8003650:	f807 0b01 	strb.w	r0, [r7], #1
 8003654:	e7d9      	b.n	800360a <_gets_r+0x26>
 8003656:	2000      	movs	r0, #0
 8003658:	e7e9      	b.n	800362e <_gets_r+0x4a>
 800365a:	bf00      	nop
 800365c:	08007b88 	.word	0x08007b88
 8003660:	08007ba8 	.word	0x08007ba8
 8003664:	08007b68 	.word	0x08007b68

08003668 <gets>:
 8003668:	4b02      	ldr	r3, [pc, #8]	; (8003674 <gets+0xc>)
 800366a:	4601      	mov	r1, r0
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	f7ff bfb9 	b.w	80035e4 <_gets_r>
 8003672:	bf00      	nop
 8003674:	2000000c 	.word	0x2000000c

08003678 <__libc_init_array>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4e0d      	ldr	r6, [pc, #52]	; (80036b0 <__libc_init_array+0x38>)
 800367c:	4c0d      	ldr	r4, [pc, #52]	; (80036b4 <__libc_init_array+0x3c>)
 800367e:	1ba4      	subs	r4, r4, r6
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	2500      	movs	r5, #0
 8003684:	42a5      	cmp	r5, r4
 8003686:	d109      	bne.n	800369c <__libc_init_array+0x24>
 8003688:	4e0b      	ldr	r6, [pc, #44]	; (80036b8 <__libc_init_array+0x40>)
 800368a:	4c0c      	ldr	r4, [pc, #48]	; (80036bc <__libc_init_array+0x44>)
 800368c:	f004 f9f4 	bl	8007a78 <_init>
 8003690:	1ba4      	subs	r4, r4, r6
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	2500      	movs	r5, #0
 8003696:	42a5      	cmp	r5, r4
 8003698:	d105      	bne.n	80036a6 <__libc_init_array+0x2e>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036a0:	4798      	blx	r3
 80036a2:	3501      	adds	r5, #1
 80036a4:	e7ee      	b.n	8003684 <__libc_init_array+0xc>
 80036a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036aa:	4798      	blx	r3
 80036ac:	3501      	adds	r5, #1
 80036ae:	e7f2      	b.n	8003696 <__libc_init_array+0x1e>
 80036b0:	08007df0 	.word	0x08007df0
 80036b4:	08007df0 	.word	0x08007df0
 80036b8:	08007df0 	.word	0x08007df0
 80036bc:	08007df4 	.word	0x08007df4

080036c0 <memset>:
 80036c0:	4402      	add	r2, r0
 80036c2:	4603      	mov	r3, r0
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d100      	bne.n	80036ca <memset+0xa>
 80036c8:	4770      	bx	lr
 80036ca:	f803 1b01 	strb.w	r1, [r3], #1
 80036ce:	e7f9      	b.n	80036c4 <memset+0x4>

080036d0 <__cvt>:
 80036d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	ec55 4b10 	vmov	r4, r5, d0
 80036d8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80036da:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80036de:	2d00      	cmp	r5, #0
 80036e0:	460e      	mov	r6, r1
 80036e2:	4691      	mov	r9, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	bfb8      	it	lt
 80036e8:	4622      	movlt	r2, r4
 80036ea:	462b      	mov	r3, r5
 80036ec:	f027 0720 	bic.w	r7, r7, #32
 80036f0:	bfbb      	ittet	lt
 80036f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80036f6:	461d      	movlt	r5, r3
 80036f8:	2300      	movge	r3, #0
 80036fa:	232d      	movlt	r3, #45	; 0x2d
 80036fc:	bfb8      	it	lt
 80036fe:	4614      	movlt	r4, r2
 8003700:	2f46      	cmp	r7, #70	; 0x46
 8003702:	700b      	strb	r3, [r1, #0]
 8003704:	d004      	beq.n	8003710 <__cvt+0x40>
 8003706:	2f45      	cmp	r7, #69	; 0x45
 8003708:	d100      	bne.n	800370c <__cvt+0x3c>
 800370a:	3601      	adds	r6, #1
 800370c:	2102      	movs	r1, #2
 800370e:	e000      	b.n	8003712 <__cvt+0x42>
 8003710:	2103      	movs	r1, #3
 8003712:	ab03      	add	r3, sp, #12
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	ab02      	add	r3, sp, #8
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	4632      	mov	r2, r6
 800371c:	4653      	mov	r3, sl
 800371e:	ec45 4b10 	vmov	d0, r4, r5
 8003722:	f001 fec5 	bl	80054b0 <_dtoa_r>
 8003726:	2f47      	cmp	r7, #71	; 0x47
 8003728:	4680      	mov	r8, r0
 800372a:	d102      	bne.n	8003732 <__cvt+0x62>
 800372c:	f019 0f01 	tst.w	r9, #1
 8003730:	d026      	beq.n	8003780 <__cvt+0xb0>
 8003732:	2f46      	cmp	r7, #70	; 0x46
 8003734:	eb08 0906 	add.w	r9, r8, r6
 8003738:	d111      	bne.n	800375e <__cvt+0x8e>
 800373a:	f898 3000 	ldrb.w	r3, [r8]
 800373e:	2b30      	cmp	r3, #48	; 0x30
 8003740:	d10a      	bne.n	8003758 <__cvt+0x88>
 8003742:	2200      	movs	r2, #0
 8003744:	2300      	movs	r3, #0
 8003746:	4620      	mov	r0, r4
 8003748:	4629      	mov	r1, r5
 800374a:	f7fd f9dd 	bl	8000b08 <__aeabi_dcmpeq>
 800374e:	b918      	cbnz	r0, 8003758 <__cvt+0x88>
 8003750:	f1c6 0601 	rsb	r6, r6, #1
 8003754:	f8ca 6000 	str.w	r6, [sl]
 8003758:	f8da 3000 	ldr.w	r3, [sl]
 800375c:	4499      	add	r9, r3
 800375e:	2200      	movs	r2, #0
 8003760:	2300      	movs	r3, #0
 8003762:	4620      	mov	r0, r4
 8003764:	4629      	mov	r1, r5
 8003766:	f7fd f9cf 	bl	8000b08 <__aeabi_dcmpeq>
 800376a:	b938      	cbnz	r0, 800377c <__cvt+0xac>
 800376c:	2230      	movs	r2, #48	; 0x30
 800376e:	9b03      	ldr	r3, [sp, #12]
 8003770:	454b      	cmp	r3, r9
 8003772:	d205      	bcs.n	8003780 <__cvt+0xb0>
 8003774:	1c59      	adds	r1, r3, #1
 8003776:	9103      	str	r1, [sp, #12]
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e7f8      	b.n	800376e <__cvt+0x9e>
 800377c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003780:	9b03      	ldr	r3, [sp, #12]
 8003782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003784:	eba3 0308 	sub.w	r3, r3, r8
 8003788:	4640      	mov	r0, r8
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	b004      	add	sp, #16
 800378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003792 <__exponent>:
 8003792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003794:	2900      	cmp	r1, #0
 8003796:	4604      	mov	r4, r0
 8003798:	bfba      	itte	lt
 800379a:	4249      	neglt	r1, r1
 800379c:	232d      	movlt	r3, #45	; 0x2d
 800379e:	232b      	movge	r3, #43	; 0x2b
 80037a0:	2909      	cmp	r1, #9
 80037a2:	f804 2b02 	strb.w	r2, [r4], #2
 80037a6:	7043      	strb	r3, [r0, #1]
 80037a8:	dd20      	ble.n	80037ec <__exponent+0x5a>
 80037aa:	f10d 0307 	add.w	r3, sp, #7
 80037ae:	461f      	mov	r7, r3
 80037b0:	260a      	movs	r6, #10
 80037b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80037b6:	fb06 1115 	mls	r1, r6, r5, r1
 80037ba:	3130      	adds	r1, #48	; 0x30
 80037bc:	2d09      	cmp	r5, #9
 80037be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80037c2:	f103 32ff 	add.w	r2, r3, #4294967295
 80037c6:	4629      	mov	r1, r5
 80037c8:	dc09      	bgt.n	80037de <__exponent+0x4c>
 80037ca:	3130      	adds	r1, #48	; 0x30
 80037cc:	3b02      	subs	r3, #2
 80037ce:	f802 1c01 	strb.w	r1, [r2, #-1]
 80037d2:	42bb      	cmp	r3, r7
 80037d4:	4622      	mov	r2, r4
 80037d6:	d304      	bcc.n	80037e2 <__exponent+0x50>
 80037d8:	1a10      	subs	r0, r2, r0
 80037da:	b003      	add	sp, #12
 80037dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037de:	4613      	mov	r3, r2
 80037e0:	e7e7      	b.n	80037b2 <__exponent+0x20>
 80037e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037e6:	f804 2b01 	strb.w	r2, [r4], #1
 80037ea:	e7f2      	b.n	80037d2 <__exponent+0x40>
 80037ec:	2330      	movs	r3, #48	; 0x30
 80037ee:	4419      	add	r1, r3
 80037f0:	7083      	strb	r3, [r0, #2]
 80037f2:	1d02      	adds	r2, r0, #4
 80037f4:	70c1      	strb	r1, [r0, #3]
 80037f6:	e7ef      	b.n	80037d8 <__exponent+0x46>

080037f8 <_printf_float>:
 80037f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037fc:	b08d      	sub	sp, #52	; 0x34
 80037fe:	460c      	mov	r4, r1
 8003800:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003804:	4616      	mov	r6, r2
 8003806:	461f      	mov	r7, r3
 8003808:	4605      	mov	r5, r0
 800380a:	f003 f8dd 	bl	80069c8 <_localeconv_r>
 800380e:	6803      	ldr	r3, [r0, #0]
 8003810:	9304      	str	r3, [sp, #16]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fc fcfc 	bl	8000210 <strlen>
 8003818:	2300      	movs	r3, #0
 800381a:	930a      	str	r3, [sp, #40]	; 0x28
 800381c:	f8d8 3000 	ldr.w	r3, [r8]
 8003820:	9005      	str	r0, [sp, #20]
 8003822:	3307      	adds	r3, #7
 8003824:	f023 0307 	bic.w	r3, r3, #7
 8003828:	f103 0208 	add.w	r2, r3, #8
 800382c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003830:	f8d4 b000 	ldr.w	fp, [r4]
 8003834:	f8c8 2000 	str.w	r2, [r8]
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003840:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003844:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003848:	9307      	str	r3, [sp, #28]
 800384a:	f8cd 8018 	str.w	r8, [sp, #24]
 800384e:	f04f 32ff 	mov.w	r2, #4294967295
 8003852:	4ba7      	ldr	r3, [pc, #668]	; (8003af0 <_printf_float+0x2f8>)
 8003854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003858:	f7fd f988 	bl	8000b6c <__aeabi_dcmpun>
 800385c:	bb70      	cbnz	r0, 80038bc <_printf_float+0xc4>
 800385e:	f04f 32ff 	mov.w	r2, #4294967295
 8003862:	4ba3      	ldr	r3, [pc, #652]	; (8003af0 <_printf_float+0x2f8>)
 8003864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003868:	f7fd f962 	bl	8000b30 <__aeabi_dcmple>
 800386c:	bb30      	cbnz	r0, 80038bc <_printf_float+0xc4>
 800386e:	2200      	movs	r2, #0
 8003870:	2300      	movs	r3, #0
 8003872:	4640      	mov	r0, r8
 8003874:	4649      	mov	r1, r9
 8003876:	f7fd f951 	bl	8000b1c <__aeabi_dcmplt>
 800387a:	b110      	cbz	r0, 8003882 <_printf_float+0x8a>
 800387c:	232d      	movs	r3, #45	; 0x2d
 800387e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003882:	4a9c      	ldr	r2, [pc, #624]	; (8003af4 <_printf_float+0x2fc>)
 8003884:	4b9c      	ldr	r3, [pc, #624]	; (8003af8 <_printf_float+0x300>)
 8003886:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800388a:	bf8c      	ite	hi
 800388c:	4690      	movhi	r8, r2
 800388e:	4698      	movls	r8, r3
 8003890:	2303      	movs	r3, #3
 8003892:	f02b 0204 	bic.w	r2, fp, #4
 8003896:	6123      	str	r3, [r4, #16]
 8003898:	6022      	str	r2, [r4, #0]
 800389a:	f04f 0900 	mov.w	r9, #0
 800389e:	9700      	str	r7, [sp, #0]
 80038a0:	4633      	mov	r3, r6
 80038a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80038a4:	4621      	mov	r1, r4
 80038a6:	4628      	mov	r0, r5
 80038a8:	f000 f9e6 	bl	8003c78 <_printf_common>
 80038ac:	3001      	adds	r0, #1
 80038ae:	f040 808d 	bne.w	80039cc <_printf_float+0x1d4>
 80038b2:	f04f 30ff 	mov.w	r0, #4294967295
 80038b6:	b00d      	add	sp, #52	; 0x34
 80038b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	4640      	mov	r0, r8
 80038c2:	4649      	mov	r1, r9
 80038c4:	f7fd f952 	bl	8000b6c <__aeabi_dcmpun>
 80038c8:	b110      	cbz	r0, 80038d0 <_printf_float+0xd8>
 80038ca:	4a8c      	ldr	r2, [pc, #560]	; (8003afc <_printf_float+0x304>)
 80038cc:	4b8c      	ldr	r3, [pc, #560]	; (8003b00 <_printf_float+0x308>)
 80038ce:	e7da      	b.n	8003886 <_printf_float+0x8e>
 80038d0:	6861      	ldr	r1, [r4, #4]
 80038d2:	1c4b      	adds	r3, r1, #1
 80038d4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80038d8:	a80a      	add	r0, sp, #40	; 0x28
 80038da:	d13e      	bne.n	800395a <_printf_float+0x162>
 80038dc:	2306      	movs	r3, #6
 80038de:	6063      	str	r3, [r4, #4]
 80038e0:	2300      	movs	r3, #0
 80038e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80038e6:	ab09      	add	r3, sp, #36	; 0x24
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	ec49 8b10 	vmov	d0, r8, r9
 80038ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80038f2:	6022      	str	r2, [r4, #0]
 80038f4:	f8cd a004 	str.w	sl, [sp, #4]
 80038f8:	6861      	ldr	r1, [r4, #4]
 80038fa:	4628      	mov	r0, r5
 80038fc:	f7ff fee8 	bl	80036d0 <__cvt>
 8003900:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003904:	2b47      	cmp	r3, #71	; 0x47
 8003906:	4680      	mov	r8, r0
 8003908:	d109      	bne.n	800391e <_printf_float+0x126>
 800390a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800390c:	1cd8      	adds	r0, r3, #3
 800390e:	db02      	blt.n	8003916 <_printf_float+0x11e>
 8003910:	6862      	ldr	r2, [r4, #4]
 8003912:	4293      	cmp	r3, r2
 8003914:	dd47      	ble.n	80039a6 <_printf_float+0x1ae>
 8003916:	f1aa 0a02 	sub.w	sl, sl, #2
 800391a:	fa5f fa8a 	uxtb.w	sl, sl
 800391e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003922:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003924:	d824      	bhi.n	8003970 <_printf_float+0x178>
 8003926:	3901      	subs	r1, #1
 8003928:	4652      	mov	r2, sl
 800392a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800392e:	9109      	str	r1, [sp, #36]	; 0x24
 8003930:	f7ff ff2f 	bl	8003792 <__exponent>
 8003934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003936:	1813      	adds	r3, r2, r0
 8003938:	2a01      	cmp	r2, #1
 800393a:	4681      	mov	r9, r0
 800393c:	6123      	str	r3, [r4, #16]
 800393e:	dc02      	bgt.n	8003946 <_printf_float+0x14e>
 8003940:	6822      	ldr	r2, [r4, #0]
 8003942:	07d1      	lsls	r1, r2, #31
 8003944:	d501      	bpl.n	800394a <_printf_float+0x152>
 8003946:	3301      	adds	r3, #1
 8003948:	6123      	str	r3, [r4, #16]
 800394a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0a5      	beq.n	800389e <_printf_float+0xa6>
 8003952:	232d      	movs	r3, #45	; 0x2d
 8003954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003958:	e7a1      	b.n	800389e <_printf_float+0xa6>
 800395a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800395e:	f000 8177 	beq.w	8003c50 <_printf_float+0x458>
 8003962:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003966:	d1bb      	bne.n	80038e0 <_printf_float+0xe8>
 8003968:	2900      	cmp	r1, #0
 800396a:	d1b9      	bne.n	80038e0 <_printf_float+0xe8>
 800396c:	2301      	movs	r3, #1
 800396e:	e7b6      	b.n	80038de <_printf_float+0xe6>
 8003970:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003974:	d119      	bne.n	80039aa <_printf_float+0x1b2>
 8003976:	2900      	cmp	r1, #0
 8003978:	6863      	ldr	r3, [r4, #4]
 800397a:	dd0c      	ble.n	8003996 <_printf_float+0x19e>
 800397c:	6121      	str	r1, [r4, #16]
 800397e:	b913      	cbnz	r3, 8003986 <_printf_float+0x18e>
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	07d2      	lsls	r2, r2, #31
 8003984:	d502      	bpl.n	800398c <_printf_float+0x194>
 8003986:	3301      	adds	r3, #1
 8003988:	440b      	add	r3, r1
 800398a:	6123      	str	r3, [r4, #16]
 800398c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800398e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003990:	f04f 0900 	mov.w	r9, #0
 8003994:	e7d9      	b.n	800394a <_printf_float+0x152>
 8003996:	b913      	cbnz	r3, 800399e <_printf_float+0x1a6>
 8003998:	6822      	ldr	r2, [r4, #0]
 800399a:	07d0      	lsls	r0, r2, #31
 800399c:	d501      	bpl.n	80039a2 <_printf_float+0x1aa>
 800399e:	3302      	adds	r3, #2
 80039a0:	e7f3      	b.n	800398a <_printf_float+0x192>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e7f1      	b.n	800398a <_printf_float+0x192>
 80039a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80039aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80039ae:	4293      	cmp	r3, r2
 80039b0:	db05      	blt.n	80039be <_printf_float+0x1c6>
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	6123      	str	r3, [r4, #16]
 80039b6:	07d1      	lsls	r1, r2, #31
 80039b8:	d5e8      	bpl.n	800398c <_printf_float+0x194>
 80039ba:	3301      	adds	r3, #1
 80039bc:	e7e5      	b.n	800398a <_printf_float+0x192>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bfd4      	ite	le
 80039c2:	f1c3 0302 	rsble	r3, r3, #2
 80039c6:	2301      	movgt	r3, #1
 80039c8:	4413      	add	r3, r2
 80039ca:	e7de      	b.n	800398a <_printf_float+0x192>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	055a      	lsls	r2, r3, #21
 80039d0:	d407      	bmi.n	80039e2 <_printf_float+0x1ea>
 80039d2:	6923      	ldr	r3, [r4, #16]
 80039d4:	4642      	mov	r2, r8
 80039d6:	4631      	mov	r1, r6
 80039d8:	4628      	mov	r0, r5
 80039da:	47b8      	blx	r7
 80039dc:	3001      	adds	r0, #1
 80039de:	d12b      	bne.n	8003a38 <_printf_float+0x240>
 80039e0:	e767      	b.n	80038b2 <_printf_float+0xba>
 80039e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80039e6:	f240 80dc 	bls.w	8003ba2 <_printf_float+0x3aa>
 80039ea:	2200      	movs	r2, #0
 80039ec:	2300      	movs	r3, #0
 80039ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039f2:	f7fd f889 	bl	8000b08 <__aeabi_dcmpeq>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d033      	beq.n	8003a62 <_printf_float+0x26a>
 80039fa:	2301      	movs	r3, #1
 80039fc:	4a41      	ldr	r2, [pc, #260]	; (8003b04 <_printf_float+0x30c>)
 80039fe:	4631      	mov	r1, r6
 8003a00:	4628      	mov	r0, r5
 8003a02:	47b8      	blx	r7
 8003a04:	3001      	adds	r0, #1
 8003a06:	f43f af54 	beq.w	80038b2 <_printf_float+0xba>
 8003a0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	db02      	blt.n	8003a18 <_printf_float+0x220>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	07d8      	lsls	r0, r3, #31
 8003a16:	d50f      	bpl.n	8003a38 <_printf_float+0x240>
 8003a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a1c:	4631      	mov	r1, r6
 8003a1e:	4628      	mov	r0, r5
 8003a20:	47b8      	blx	r7
 8003a22:	3001      	adds	r0, #1
 8003a24:	f43f af45 	beq.w	80038b2 <_printf_float+0xba>
 8003a28:	f04f 0800 	mov.w	r8, #0
 8003a2c:	f104 091a 	add.w	r9, r4, #26
 8003a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a32:	3b01      	subs	r3, #1
 8003a34:	4543      	cmp	r3, r8
 8003a36:	dc09      	bgt.n	8003a4c <_printf_float+0x254>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	079b      	lsls	r3, r3, #30
 8003a3c:	f100 8103 	bmi.w	8003c46 <_printf_float+0x44e>
 8003a40:	68e0      	ldr	r0, [r4, #12]
 8003a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a44:	4298      	cmp	r0, r3
 8003a46:	bfb8      	it	lt
 8003a48:	4618      	movlt	r0, r3
 8003a4a:	e734      	b.n	80038b6 <_printf_float+0xbe>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	464a      	mov	r2, r9
 8003a50:	4631      	mov	r1, r6
 8003a52:	4628      	mov	r0, r5
 8003a54:	47b8      	blx	r7
 8003a56:	3001      	adds	r0, #1
 8003a58:	f43f af2b 	beq.w	80038b2 <_printf_float+0xba>
 8003a5c:	f108 0801 	add.w	r8, r8, #1
 8003a60:	e7e6      	b.n	8003a30 <_printf_float+0x238>
 8003a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	dc2b      	bgt.n	8003ac0 <_printf_float+0x2c8>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4a26      	ldr	r2, [pc, #152]	; (8003b04 <_printf_float+0x30c>)
 8003a6c:	4631      	mov	r1, r6
 8003a6e:	4628      	mov	r0, r5
 8003a70:	47b8      	blx	r7
 8003a72:	3001      	adds	r0, #1
 8003a74:	f43f af1d 	beq.w	80038b2 <_printf_float+0xba>
 8003a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7a:	b923      	cbnz	r3, 8003a86 <_printf_float+0x28e>
 8003a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a7e:	b913      	cbnz	r3, 8003a86 <_printf_float+0x28e>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	07d9      	lsls	r1, r3, #31
 8003a84:	d5d8      	bpl.n	8003a38 <_printf_float+0x240>
 8003a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a8a:	4631      	mov	r1, r6
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	47b8      	blx	r7
 8003a90:	3001      	adds	r0, #1
 8003a92:	f43f af0e 	beq.w	80038b2 <_printf_float+0xba>
 8003a96:	f04f 0900 	mov.w	r9, #0
 8003a9a:	f104 0a1a 	add.w	sl, r4, #26
 8003a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa0:	425b      	negs	r3, r3
 8003aa2:	454b      	cmp	r3, r9
 8003aa4:	dc01      	bgt.n	8003aaa <_printf_float+0x2b2>
 8003aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003aa8:	e794      	b.n	80039d4 <_printf_float+0x1dc>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4652      	mov	r2, sl
 8003aae:	4631      	mov	r1, r6
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	47b8      	blx	r7
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	f43f aefc 	beq.w	80038b2 <_printf_float+0xba>
 8003aba:	f109 0901 	add.w	r9, r9, #1
 8003abe:	e7ee      	b.n	8003a9e <_printf_float+0x2a6>
 8003ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ac2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	bfa8      	it	ge
 8003ac8:	461a      	movge	r2, r3
 8003aca:	2a00      	cmp	r2, #0
 8003acc:	4691      	mov	r9, r2
 8003ace:	dd07      	ble.n	8003ae0 <_printf_float+0x2e8>
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	47b8      	blx	r7
 8003ada:	3001      	adds	r0, #1
 8003adc:	f43f aee9 	beq.w	80038b2 <_printf_float+0xba>
 8003ae0:	f104 031a 	add.w	r3, r4, #26
 8003ae4:	f04f 0b00 	mov.w	fp, #0
 8003ae8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003aec:	9306      	str	r3, [sp, #24]
 8003aee:	e015      	b.n	8003b1c <_printf_float+0x324>
 8003af0:	7fefffff 	.word	0x7fefffff
 8003af4:	08007acc 	.word	0x08007acc
 8003af8:	08007ac8 	.word	0x08007ac8
 8003afc:	08007ad4 	.word	0x08007ad4
 8003b00:	08007ad0 	.word	0x08007ad0
 8003b04:	08007ad8 	.word	0x08007ad8
 8003b08:	2301      	movs	r3, #1
 8003b0a:	9a06      	ldr	r2, [sp, #24]
 8003b0c:	4631      	mov	r1, r6
 8003b0e:	4628      	mov	r0, r5
 8003b10:	47b8      	blx	r7
 8003b12:	3001      	adds	r0, #1
 8003b14:	f43f aecd 	beq.w	80038b2 <_printf_float+0xba>
 8003b18:	f10b 0b01 	add.w	fp, fp, #1
 8003b1c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003b20:	ebaa 0309 	sub.w	r3, sl, r9
 8003b24:	455b      	cmp	r3, fp
 8003b26:	dcef      	bgt.n	8003b08 <_printf_float+0x310>
 8003b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	44d0      	add	r8, sl
 8003b30:	db15      	blt.n	8003b5e <_printf_float+0x366>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	07da      	lsls	r2, r3, #31
 8003b36:	d412      	bmi.n	8003b5e <_printf_float+0x366>
 8003b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b3c:	eba3 020a 	sub.w	r2, r3, sl
 8003b40:	eba3 0a01 	sub.w	sl, r3, r1
 8003b44:	4592      	cmp	sl, r2
 8003b46:	bfa8      	it	ge
 8003b48:	4692      	movge	sl, r2
 8003b4a:	f1ba 0f00 	cmp.w	sl, #0
 8003b4e:	dc0e      	bgt.n	8003b6e <_printf_float+0x376>
 8003b50:	f04f 0800 	mov.w	r8, #0
 8003b54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003b58:	f104 091a 	add.w	r9, r4, #26
 8003b5c:	e019      	b.n	8003b92 <_printf_float+0x39a>
 8003b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b62:	4631      	mov	r1, r6
 8003b64:	4628      	mov	r0, r5
 8003b66:	47b8      	blx	r7
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d1e5      	bne.n	8003b38 <_printf_float+0x340>
 8003b6c:	e6a1      	b.n	80038b2 <_printf_float+0xba>
 8003b6e:	4653      	mov	r3, sl
 8003b70:	4642      	mov	r2, r8
 8003b72:	4631      	mov	r1, r6
 8003b74:	4628      	mov	r0, r5
 8003b76:	47b8      	blx	r7
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d1e9      	bne.n	8003b50 <_printf_float+0x358>
 8003b7c:	e699      	b.n	80038b2 <_printf_float+0xba>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	464a      	mov	r2, r9
 8003b82:	4631      	mov	r1, r6
 8003b84:	4628      	mov	r0, r5
 8003b86:	47b8      	blx	r7
 8003b88:	3001      	adds	r0, #1
 8003b8a:	f43f ae92 	beq.w	80038b2 <_printf_float+0xba>
 8003b8e:	f108 0801 	add.w	r8, r8, #1
 8003b92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	eba3 030a 	sub.w	r3, r3, sl
 8003b9c:	4543      	cmp	r3, r8
 8003b9e:	dcee      	bgt.n	8003b7e <_printf_float+0x386>
 8003ba0:	e74a      	b.n	8003a38 <_printf_float+0x240>
 8003ba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ba4:	2a01      	cmp	r2, #1
 8003ba6:	dc01      	bgt.n	8003bac <_printf_float+0x3b4>
 8003ba8:	07db      	lsls	r3, r3, #31
 8003baa:	d53a      	bpl.n	8003c22 <_printf_float+0x42a>
 8003bac:	2301      	movs	r3, #1
 8003bae:	4642      	mov	r2, r8
 8003bb0:	4631      	mov	r1, r6
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	47b8      	blx	r7
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	f43f ae7b 	beq.w	80038b2 <_printf_float+0xba>
 8003bbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bc0:	4631      	mov	r1, r6
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	47b8      	blx	r7
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	f108 0801 	add.w	r8, r8, #1
 8003bcc:	f43f ae71 	beq.w	80038b2 <_printf_float+0xba>
 8003bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f103 3aff 	add.w	sl, r3, #4294967295
 8003bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f7fc ff93 	bl	8000b08 <__aeabi_dcmpeq>
 8003be2:	b9c8      	cbnz	r0, 8003c18 <_printf_float+0x420>
 8003be4:	4653      	mov	r3, sl
 8003be6:	4642      	mov	r2, r8
 8003be8:	4631      	mov	r1, r6
 8003bea:	4628      	mov	r0, r5
 8003bec:	47b8      	blx	r7
 8003bee:	3001      	adds	r0, #1
 8003bf0:	d10e      	bne.n	8003c10 <_printf_float+0x418>
 8003bf2:	e65e      	b.n	80038b2 <_printf_float+0xba>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	4652      	mov	r2, sl
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	47b8      	blx	r7
 8003bfe:	3001      	adds	r0, #1
 8003c00:	f43f ae57 	beq.w	80038b2 <_printf_float+0xba>
 8003c04:	f108 0801 	add.w	r8, r8, #1
 8003c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	4543      	cmp	r3, r8
 8003c0e:	dcf1      	bgt.n	8003bf4 <_printf_float+0x3fc>
 8003c10:	464b      	mov	r3, r9
 8003c12:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c16:	e6de      	b.n	80039d6 <_printf_float+0x1de>
 8003c18:	f04f 0800 	mov.w	r8, #0
 8003c1c:	f104 0a1a 	add.w	sl, r4, #26
 8003c20:	e7f2      	b.n	8003c08 <_printf_float+0x410>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e7df      	b.n	8003be6 <_printf_float+0x3ee>
 8003c26:	2301      	movs	r3, #1
 8003c28:	464a      	mov	r2, r9
 8003c2a:	4631      	mov	r1, r6
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	47b8      	blx	r7
 8003c30:	3001      	adds	r0, #1
 8003c32:	f43f ae3e 	beq.w	80038b2 <_printf_float+0xba>
 8003c36:	f108 0801 	add.w	r8, r8, #1
 8003c3a:	68e3      	ldr	r3, [r4, #12]
 8003c3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	4543      	cmp	r3, r8
 8003c42:	dcf0      	bgt.n	8003c26 <_printf_float+0x42e>
 8003c44:	e6fc      	b.n	8003a40 <_printf_float+0x248>
 8003c46:	f04f 0800 	mov.w	r8, #0
 8003c4a:	f104 0919 	add.w	r9, r4, #25
 8003c4e:	e7f4      	b.n	8003c3a <_printf_float+0x442>
 8003c50:	2900      	cmp	r1, #0
 8003c52:	f43f ae8b 	beq.w	800396c <_printf_float+0x174>
 8003c56:	2300      	movs	r3, #0
 8003c58:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003c5c:	ab09      	add	r3, sp, #36	; 0x24
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	ec49 8b10 	vmov	d0, r8, r9
 8003c64:	6022      	str	r2, [r4, #0]
 8003c66:	f8cd a004 	str.w	sl, [sp, #4]
 8003c6a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f7ff fd2e 	bl	80036d0 <__cvt>
 8003c74:	4680      	mov	r8, r0
 8003c76:	e648      	b.n	800390a <_printf_float+0x112>

08003c78 <_printf_common>:
 8003c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c7c:	4691      	mov	r9, r2
 8003c7e:	461f      	mov	r7, r3
 8003c80:	688a      	ldr	r2, [r1, #8]
 8003c82:	690b      	ldr	r3, [r1, #16]
 8003c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	bfb8      	it	lt
 8003c8c:	4613      	movlt	r3, r2
 8003c8e:	f8c9 3000 	str.w	r3, [r9]
 8003c92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c96:	4606      	mov	r6, r0
 8003c98:	460c      	mov	r4, r1
 8003c9a:	b112      	cbz	r2, 8003ca2 <_printf_common+0x2a>
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f8c9 3000 	str.w	r3, [r9]
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	0699      	lsls	r1, r3, #26
 8003ca6:	bf42      	ittt	mi
 8003ca8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003cac:	3302      	addmi	r3, #2
 8003cae:	f8c9 3000 	strmi.w	r3, [r9]
 8003cb2:	6825      	ldr	r5, [r4, #0]
 8003cb4:	f015 0506 	ands.w	r5, r5, #6
 8003cb8:	d107      	bne.n	8003cca <_printf_common+0x52>
 8003cba:	f104 0a19 	add.w	sl, r4, #25
 8003cbe:	68e3      	ldr	r3, [r4, #12]
 8003cc0:	f8d9 2000 	ldr.w	r2, [r9]
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	42ab      	cmp	r3, r5
 8003cc8:	dc28      	bgt.n	8003d1c <_printf_common+0xa4>
 8003cca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003cce:	6822      	ldr	r2, [r4, #0]
 8003cd0:	3300      	adds	r3, #0
 8003cd2:	bf18      	it	ne
 8003cd4:	2301      	movne	r3, #1
 8003cd6:	0692      	lsls	r2, r2, #26
 8003cd8:	d42d      	bmi.n	8003d36 <_printf_common+0xbe>
 8003cda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cde:	4639      	mov	r1, r7
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	47c0      	blx	r8
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d020      	beq.n	8003d2a <_printf_common+0xb2>
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	68e5      	ldr	r5, [r4, #12]
 8003cec:	f8d9 2000 	ldr.w	r2, [r9]
 8003cf0:	f003 0306 	and.w	r3, r3, #6
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	bf08      	it	eq
 8003cf8:	1aad      	subeq	r5, r5, r2
 8003cfa:	68a3      	ldr	r3, [r4, #8]
 8003cfc:	6922      	ldr	r2, [r4, #16]
 8003cfe:	bf0c      	ite	eq
 8003d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d04:	2500      	movne	r5, #0
 8003d06:	4293      	cmp	r3, r2
 8003d08:	bfc4      	itt	gt
 8003d0a:	1a9b      	subgt	r3, r3, r2
 8003d0c:	18ed      	addgt	r5, r5, r3
 8003d0e:	f04f 0900 	mov.w	r9, #0
 8003d12:	341a      	adds	r4, #26
 8003d14:	454d      	cmp	r5, r9
 8003d16:	d11a      	bne.n	8003d4e <_printf_common+0xd6>
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e008      	b.n	8003d2e <_printf_common+0xb6>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4652      	mov	r2, sl
 8003d20:	4639      	mov	r1, r7
 8003d22:	4630      	mov	r0, r6
 8003d24:	47c0      	blx	r8
 8003d26:	3001      	adds	r0, #1
 8003d28:	d103      	bne.n	8003d32 <_printf_common+0xba>
 8003d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d32:	3501      	adds	r5, #1
 8003d34:	e7c3      	b.n	8003cbe <_printf_common+0x46>
 8003d36:	18e1      	adds	r1, r4, r3
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	2030      	movs	r0, #48	; 0x30
 8003d3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d40:	4422      	add	r2, r4
 8003d42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d4a:	3302      	adds	r3, #2
 8003d4c:	e7c5      	b.n	8003cda <_printf_common+0x62>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	4622      	mov	r2, r4
 8003d52:	4639      	mov	r1, r7
 8003d54:	4630      	mov	r0, r6
 8003d56:	47c0      	blx	r8
 8003d58:	3001      	adds	r0, #1
 8003d5a:	d0e6      	beq.n	8003d2a <_printf_common+0xb2>
 8003d5c:	f109 0901 	add.w	r9, r9, #1
 8003d60:	e7d8      	b.n	8003d14 <_printf_common+0x9c>
	...

08003d64 <_printf_i>:
 8003d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	7e09      	ldrb	r1, [r1, #24]
 8003d70:	b085      	sub	sp, #20
 8003d72:	296e      	cmp	r1, #110	; 0x6e
 8003d74:	4617      	mov	r7, r2
 8003d76:	4606      	mov	r6, r0
 8003d78:	4698      	mov	r8, r3
 8003d7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d7c:	f000 80b3 	beq.w	8003ee6 <_printf_i+0x182>
 8003d80:	d822      	bhi.n	8003dc8 <_printf_i+0x64>
 8003d82:	2963      	cmp	r1, #99	; 0x63
 8003d84:	d036      	beq.n	8003df4 <_printf_i+0x90>
 8003d86:	d80a      	bhi.n	8003d9e <_printf_i+0x3a>
 8003d88:	2900      	cmp	r1, #0
 8003d8a:	f000 80b9 	beq.w	8003f00 <_printf_i+0x19c>
 8003d8e:	2958      	cmp	r1, #88	; 0x58
 8003d90:	f000 8083 	beq.w	8003e9a <_printf_i+0x136>
 8003d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d9c:	e032      	b.n	8003e04 <_printf_i+0xa0>
 8003d9e:	2964      	cmp	r1, #100	; 0x64
 8003da0:	d001      	beq.n	8003da6 <_printf_i+0x42>
 8003da2:	2969      	cmp	r1, #105	; 0x69
 8003da4:	d1f6      	bne.n	8003d94 <_printf_i+0x30>
 8003da6:	6820      	ldr	r0, [r4, #0]
 8003da8:	6813      	ldr	r3, [r2, #0]
 8003daa:	0605      	lsls	r5, r0, #24
 8003dac:	f103 0104 	add.w	r1, r3, #4
 8003db0:	d52a      	bpl.n	8003e08 <_printf_i+0xa4>
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6011      	str	r1, [r2, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	da03      	bge.n	8003dc2 <_printf_i+0x5e>
 8003dba:	222d      	movs	r2, #45	; 0x2d
 8003dbc:	425b      	negs	r3, r3
 8003dbe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003dc2:	486f      	ldr	r0, [pc, #444]	; (8003f80 <_printf_i+0x21c>)
 8003dc4:	220a      	movs	r2, #10
 8003dc6:	e039      	b.n	8003e3c <_printf_i+0xd8>
 8003dc8:	2973      	cmp	r1, #115	; 0x73
 8003dca:	f000 809d 	beq.w	8003f08 <_printf_i+0x1a4>
 8003dce:	d808      	bhi.n	8003de2 <_printf_i+0x7e>
 8003dd0:	296f      	cmp	r1, #111	; 0x6f
 8003dd2:	d020      	beq.n	8003e16 <_printf_i+0xb2>
 8003dd4:	2970      	cmp	r1, #112	; 0x70
 8003dd6:	d1dd      	bne.n	8003d94 <_printf_i+0x30>
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	f043 0320 	orr.w	r3, r3, #32
 8003dde:	6023      	str	r3, [r4, #0]
 8003de0:	e003      	b.n	8003dea <_printf_i+0x86>
 8003de2:	2975      	cmp	r1, #117	; 0x75
 8003de4:	d017      	beq.n	8003e16 <_printf_i+0xb2>
 8003de6:	2978      	cmp	r1, #120	; 0x78
 8003de8:	d1d4      	bne.n	8003d94 <_printf_i+0x30>
 8003dea:	2378      	movs	r3, #120	; 0x78
 8003dec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003df0:	4864      	ldr	r0, [pc, #400]	; (8003f84 <_printf_i+0x220>)
 8003df2:	e055      	b.n	8003ea0 <_printf_i+0x13c>
 8003df4:	6813      	ldr	r3, [r2, #0]
 8003df6:	1d19      	adds	r1, r3, #4
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6011      	str	r1, [r2, #0]
 8003dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e04:	2301      	movs	r3, #1
 8003e06:	e08c      	b.n	8003f22 <_printf_i+0x1be>
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6011      	str	r1, [r2, #0]
 8003e0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e10:	bf18      	it	ne
 8003e12:	b21b      	sxthne	r3, r3
 8003e14:	e7cf      	b.n	8003db6 <_printf_i+0x52>
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	6825      	ldr	r5, [r4, #0]
 8003e1a:	1d18      	adds	r0, r3, #4
 8003e1c:	6010      	str	r0, [r2, #0]
 8003e1e:	0628      	lsls	r0, r5, #24
 8003e20:	d501      	bpl.n	8003e26 <_printf_i+0xc2>
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	e002      	b.n	8003e2c <_printf_i+0xc8>
 8003e26:	0668      	lsls	r0, r5, #25
 8003e28:	d5fb      	bpl.n	8003e22 <_printf_i+0xbe>
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	4854      	ldr	r0, [pc, #336]	; (8003f80 <_printf_i+0x21c>)
 8003e2e:	296f      	cmp	r1, #111	; 0x6f
 8003e30:	bf14      	ite	ne
 8003e32:	220a      	movne	r2, #10
 8003e34:	2208      	moveq	r2, #8
 8003e36:	2100      	movs	r1, #0
 8003e38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e3c:	6865      	ldr	r5, [r4, #4]
 8003e3e:	60a5      	str	r5, [r4, #8]
 8003e40:	2d00      	cmp	r5, #0
 8003e42:	f2c0 8095 	blt.w	8003f70 <_printf_i+0x20c>
 8003e46:	6821      	ldr	r1, [r4, #0]
 8003e48:	f021 0104 	bic.w	r1, r1, #4
 8003e4c:	6021      	str	r1, [r4, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d13d      	bne.n	8003ece <_printf_i+0x16a>
 8003e52:	2d00      	cmp	r5, #0
 8003e54:	f040 808e 	bne.w	8003f74 <_printf_i+0x210>
 8003e58:	4665      	mov	r5, ip
 8003e5a:	2a08      	cmp	r2, #8
 8003e5c:	d10b      	bne.n	8003e76 <_printf_i+0x112>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	07db      	lsls	r3, r3, #31
 8003e62:	d508      	bpl.n	8003e76 <_printf_i+0x112>
 8003e64:	6923      	ldr	r3, [r4, #16]
 8003e66:	6862      	ldr	r2, [r4, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	bfde      	ittt	le
 8003e6c:	2330      	movle	r3, #48	; 0x30
 8003e6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e76:	ebac 0305 	sub.w	r3, ip, r5
 8003e7a:	6123      	str	r3, [r4, #16]
 8003e7c:	f8cd 8000 	str.w	r8, [sp]
 8003e80:	463b      	mov	r3, r7
 8003e82:	aa03      	add	r2, sp, #12
 8003e84:	4621      	mov	r1, r4
 8003e86:	4630      	mov	r0, r6
 8003e88:	f7ff fef6 	bl	8003c78 <_printf_common>
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d14d      	bne.n	8003f2c <_printf_i+0x1c8>
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295
 8003e94:	b005      	add	sp, #20
 8003e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e9a:	4839      	ldr	r0, [pc, #228]	; (8003f80 <_printf_i+0x21c>)
 8003e9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ea0:	6813      	ldr	r3, [r2, #0]
 8003ea2:	6821      	ldr	r1, [r4, #0]
 8003ea4:	1d1d      	adds	r5, r3, #4
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6015      	str	r5, [r2, #0]
 8003eaa:	060a      	lsls	r2, r1, #24
 8003eac:	d50b      	bpl.n	8003ec6 <_printf_i+0x162>
 8003eae:	07ca      	lsls	r2, r1, #31
 8003eb0:	bf44      	itt	mi
 8003eb2:	f041 0120 	orrmi.w	r1, r1, #32
 8003eb6:	6021      	strmi	r1, [r4, #0]
 8003eb8:	b91b      	cbnz	r3, 8003ec2 <_printf_i+0x15e>
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	f022 0220 	bic.w	r2, r2, #32
 8003ec0:	6022      	str	r2, [r4, #0]
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	e7b7      	b.n	8003e36 <_printf_i+0xd2>
 8003ec6:	064d      	lsls	r5, r1, #25
 8003ec8:	bf48      	it	mi
 8003eca:	b29b      	uxthmi	r3, r3
 8003ecc:	e7ef      	b.n	8003eae <_printf_i+0x14a>
 8003ece:	4665      	mov	r5, ip
 8003ed0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ed4:	fb02 3311 	mls	r3, r2, r1, r3
 8003ed8:	5cc3      	ldrb	r3, [r0, r3]
 8003eda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ede:	460b      	mov	r3, r1
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	d1f5      	bne.n	8003ed0 <_printf_i+0x16c>
 8003ee4:	e7b9      	b.n	8003e5a <_printf_i+0xf6>
 8003ee6:	6813      	ldr	r3, [r2, #0]
 8003ee8:	6825      	ldr	r5, [r4, #0]
 8003eea:	6961      	ldr	r1, [r4, #20]
 8003eec:	1d18      	adds	r0, r3, #4
 8003eee:	6010      	str	r0, [r2, #0]
 8003ef0:	0628      	lsls	r0, r5, #24
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	d501      	bpl.n	8003efa <_printf_i+0x196>
 8003ef6:	6019      	str	r1, [r3, #0]
 8003ef8:	e002      	b.n	8003f00 <_printf_i+0x19c>
 8003efa:	066a      	lsls	r2, r5, #25
 8003efc:	d5fb      	bpl.n	8003ef6 <_printf_i+0x192>
 8003efe:	8019      	strh	r1, [r3, #0]
 8003f00:	2300      	movs	r3, #0
 8003f02:	6123      	str	r3, [r4, #16]
 8003f04:	4665      	mov	r5, ip
 8003f06:	e7b9      	b.n	8003e7c <_printf_i+0x118>
 8003f08:	6813      	ldr	r3, [r2, #0]
 8003f0a:	1d19      	adds	r1, r3, #4
 8003f0c:	6011      	str	r1, [r2, #0]
 8003f0e:	681d      	ldr	r5, [r3, #0]
 8003f10:	6862      	ldr	r2, [r4, #4]
 8003f12:	2100      	movs	r1, #0
 8003f14:	4628      	mov	r0, r5
 8003f16:	f7fc f983 	bl	8000220 <memchr>
 8003f1a:	b108      	cbz	r0, 8003f20 <_printf_i+0x1bc>
 8003f1c:	1b40      	subs	r0, r0, r5
 8003f1e:	6060      	str	r0, [r4, #4]
 8003f20:	6863      	ldr	r3, [r4, #4]
 8003f22:	6123      	str	r3, [r4, #16]
 8003f24:	2300      	movs	r3, #0
 8003f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f2a:	e7a7      	b.n	8003e7c <_printf_i+0x118>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	462a      	mov	r2, r5
 8003f30:	4639      	mov	r1, r7
 8003f32:	4630      	mov	r0, r6
 8003f34:	47c0      	blx	r8
 8003f36:	3001      	adds	r0, #1
 8003f38:	d0aa      	beq.n	8003e90 <_printf_i+0x12c>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	079b      	lsls	r3, r3, #30
 8003f3e:	d413      	bmi.n	8003f68 <_printf_i+0x204>
 8003f40:	68e0      	ldr	r0, [r4, #12]
 8003f42:	9b03      	ldr	r3, [sp, #12]
 8003f44:	4298      	cmp	r0, r3
 8003f46:	bfb8      	it	lt
 8003f48:	4618      	movlt	r0, r3
 8003f4a:	e7a3      	b.n	8003e94 <_printf_i+0x130>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	464a      	mov	r2, r9
 8003f50:	4639      	mov	r1, r7
 8003f52:	4630      	mov	r0, r6
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d09a      	beq.n	8003e90 <_printf_i+0x12c>
 8003f5a:	3501      	adds	r5, #1
 8003f5c:	68e3      	ldr	r3, [r4, #12]
 8003f5e:	9a03      	ldr	r2, [sp, #12]
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	42ab      	cmp	r3, r5
 8003f64:	dcf2      	bgt.n	8003f4c <_printf_i+0x1e8>
 8003f66:	e7eb      	b.n	8003f40 <_printf_i+0x1dc>
 8003f68:	2500      	movs	r5, #0
 8003f6a:	f104 0919 	add.w	r9, r4, #25
 8003f6e:	e7f5      	b.n	8003f5c <_printf_i+0x1f8>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ac      	bne.n	8003ece <_printf_i+0x16a>
 8003f74:	7803      	ldrb	r3, [r0, #0]
 8003f76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f7e:	e76c      	b.n	8003e5a <_printf_i+0xf6>
 8003f80:	08007ada 	.word	0x08007ada
 8003f84:	08007aeb 	.word	0x08007aeb

08003f88 <_scanf_float>:
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	469a      	mov	sl, r3
 8003f8e:	688b      	ldr	r3, [r1, #8]
 8003f90:	4616      	mov	r6, r2
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003f98:	b087      	sub	sp, #28
 8003f9a:	bf83      	ittte	hi
 8003f9c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003fa0:	189b      	addhi	r3, r3, r2
 8003fa2:	9301      	strhi	r3, [sp, #4]
 8003fa4:	2300      	movls	r3, #0
 8003fa6:	bf86      	itte	hi
 8003fa8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003fac:	608b      	strhi	r3, [r1, #8]
 8003fae:	9301      	strls	r3, [sp, #4]
 8003fb0:	680b      	ldr	r3, [r1, #0]
 8003fb2:	4688      	mov	r8, r1
 8003fb4:	f04f 0b00 	mov.w	fp, #0
 8003fb8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003fbc:	f848 3b1c 	str.w	r3, [r8], #28
 8003fc0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	4645      	mov	r5, r8
 8003fca:	465a      	mov	r2, fp
 8003fcc:	46d9      	mov	r9, fp
 8003fce:	f8cd b008 	str.w	fp, [sp, #8]
 8003fd2:	68a1      	ldr	r1, [r4, #8]
 8003fd4:	b181      	cbz	r1, 8003ff8 <_scanf_float+0x70>
 8003fd6:	6833      	ldr	r3, [r6, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b49      	cmp	r3, #73	; 0x49
 8003fdc:	d071      	beq.n	80040c2 <_scanf_float+0x13a>
 8003fde:	d84d      	bhi.n	800407c <_scanf_float+0xf4>
 8003fe0:	2b39      	cmp	r3, #57	; 0x39
 8003fe2:	d840      	bhi.n	8004066 <_scanf_float+0xde>
 8003fe4:	2b31      	cmp	r3, #49	; 0x31
 8003fe6:	f080 8088 	bcs.w	80040fa <_scanf_float+0x172>
 8003fea:	2b2d      	cmp	r3, #45	; 0x2d
 8003fec:	f000 8090 	beq.w	8004110 <_scanf_float+0x188>
 8003ff0:	d815      	bhi.n	800401e <_scanf_float+0x96>
 8003ff2:	2b2b      	cmp	r3, #43	; 0x2b
 8003ff4:	f000 808c 	beq.w	8004110 <_scanf_float+0x188>
 8003ff8:	f1b9 0f00 	cmp.w	r9, #0
 8003ffc:	d003      	beq.n	8004006 <_scanf_float+0x7e>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	3a01      	subs	r2, #1
 8004008:	2a01      	cmp	r2, #1
 800400a:	f200 80ea 	bhi.w	80041e2 <_scanf_float+0x25a>
 800400e:	4545      	cmp	r5, r8
 8004010:	f200 80dc 	bhi.w	80041cc <_scanf_float+0x244>
 8004014:	2601      	movs	r6, #1
 8004016:	4630      	mov	r0, r6
 8004018:	b007      	add	sp, #28
 800401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401e:	2b2e      	cmp	r3, #46	; 0x2e
 8004020:	f000 809f 	beq.w	8004162 <_scanf_float+0x1da>
 8004024:	2b30      	cmp	r3, #48	; 0x30
 8004026:	d1e7      	bne.n	8003ff8 <_scanf_float+0x70>
 8004028:	6820      	ldr	r0, [r4, #0]
 800402a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800402e:	d064      	beq.n	80040fa <_scanf_float+0x172>
 8004030:	9b01      	ldr	r3, [sp, #4]
 8004032:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004036:	6020      	str	r0, [r4, #0]
 8004038:	f109 0901 	add.w	r9, r9, #1
 800403c:	b11b      	cbz	r3, 8004046 <_scanf_float+0xbe>
 800403e:	3b01      	subs	r3, #1
 8004040:	3101      	adds	r1, #1
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	60a1      	str	r1, [r4, #8]
 8004046:	68a3      	ldr	r3, [r4, #8]
 8004048:	3b01      	subs	r3, #1
 800404a:	60a3      	str	r3, [r4, #8]
 800404c:	6923      	ldr	r3, [r4, #16]
 800404e:	3301      	adds	r3, #1
 8004050:	6123      	str	r3, [r4, #16]
 8004052:	6873      	ldr	r3, [r6, #4]
 8004054:	3b01      	subs	r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	6073      	str	r3, [r6, #4]
 800405a:	f340 80ac 	ble.w	80041b6 <_scanf_float+0x22e>
 800405e:	6833      	ldr	r3, [r6, #0]
 8004060:	3301      	adds	r3, #1
 8004062:	6033      	str	r3, [r6, #0]
 8004064:	e7b5      	b.n	8003fd2 <_scanf_float+0x4a>
 8004066:	2b45      	cmp	r3, #69	; 0x45
 8004068:	f000 8085 	beq.w	8004176 <_scanf_float+0x1ee>
 800406c:	2b46      	cmp	r3, #70	; 0x46
 800406e:	d06a      	beq.n	8004146 <_scanf_float+0x1be>
 8004070:	2b41      	cmp	r3, #65	; 0x41
 8004072:	d1c1      	bne.n	8003ff8 <_scanf_float+0x70>
 8004074:	2a01      	cmp	r2, #1
 8004076:	d1bf      	bne.n	8003ff8 <_scanf_float+0x70>
 8004078:	2202      	movs	r2, #2
 800407a:	e046      	b.n	800410a <_scanf_float+0x182>
 800407c:	2b65      	cmp	r3, #101	; 0x65
 800407e:	d07a      	beq.n	8004176 <_scanf_float+0x1ee>
 8004080:	d818      	bhi.n	80040b4 <_scanf_float+0x12c>
 8004082:	2b54      	cmp	r3, #84	; 0x54
 8004084:	d066      	beq.n	8004154 <_scanf_float+0x1cc>
 8004086:	d811      	bhi.n	80040ac <_scanf_float+0x124>
 8004088:	2b4e      	cmp	r3, #78	; 0x4e
 800408a:	d1b5      	bne.n	8003ff8 <_scanf_float+0x70>
 800408c:	2a00      	cmp	r2, #0
 800408e:	d146      	bne.n	800411e <_scanf_float+0x196>
 8004090:	f1b9 0f00 	cmp.w	r9, #0
 8004094:	d145      	bne.n	8004122 <_scanf_float+0x19a>
 8004096:	6821      	ldr	r1, [r4, #0]
 8004098:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800409c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80040a0:	d13f      	bne.n	8004122 <_scanf_float+0x19a>
 80040a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80040a6:	6021      	str	r1, [r4, #0]
 80040a8:	2201      	movs	r2, #1
 80040aa:	e02e      	b.n	800410a <_scanf_float+0x182>
 80040ac:	2b59      	cmp	r3, #89	; 0x59
 80040ae:	d01e      	beq.n	80040ee <_scanf_float+0x166>
 80040b0:	2b61      	cmp	r3, #97	; 0x61
 80040b2:	e7de      	b.n	8004072 <_scanf_float+0xea>
 80040b4:	2b6e      	cmp	r3, #110	; 0x6e
 80040b6:	d0e9      	beq.n	800408c <_scanf_float+0x104>
 80040b8:	d815      	bhi.n	80040e6 <_scanf_float+0x15e>
 80040ba:	2b66      	cmp	r3, #102	; 0x66
 80040bc:	d043      	beq.n	8004146 <_scanf_float+0x1be>
 80040be:	2b69      	cmp	r3, #105	; 0x69
 80040c0:	d19a      	bne.n	8003ff8 <_scanf_float+0x70>
 80040c2:	f1bb 0f00 	cmp.w	fp, #0
 80040c6:	d138      	bne.n	800413a <_scanf_float+0x1b2>
 80040c8:	f1b9 0f00 	cmp.w	r9, #0
 80040cc:	d197      	bne.n	8003ffe <_scanf_float+0x76>
 80040ce:	6821      	ldr	r1, [r4, #0]
 80040d0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80040d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80040d8:	d195      	bne.n	8004006 <_scanf_float+0x7e>
 80040da:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80040de:	6021      	str	r1, [r4, #0]
 80040e0:	f04f 0b01 	mov.w	fp, #1
 80040e4:	e011      	b.n	800410a <_scanf_float+0x182>
 80040e6:	2b74      	cmp	r3, #116	; 0x74
 80040e8:	d034      	beq.n	8004154 <_scanf_float+0x1cc>
 80040ea:	2b79      	cmp	r3, #121	; 0x79
 80040ec:	d184      	bne.n	8003ff8 <_scanf_float+0x70>
 80040ee:	f1bb 0f07 	cmp.w	fp, #7
 80040f2:	d181      	bne.n	8003ff8 <_scanf_float+0x70>
 80040f4:	f04f 0b08 	mov.w	fp, #8
 80040f8:	e007      	b.n	800410a <_scanf_float+0x182>
 80040fa:	eb12 0f0b 	cmn.w	r2, fp
 80040fe:	f47f af7b 	bne.w	8003ff8 <_scanf_float+0x70>
 8004102:	6821      	ldr	r1, [r4, #0]
 8004104:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004108:	6021      	str	r1, [r4, #0]
 800410a:	702b      	strb	r3, [r5, #0]
 800410c:	3501      	adds	r5, #1
 800410e:	e79a      	b.n	8004046 <_scanf_float+0xbe>
 8004110:	6821      	ldr	r1, [r4, #0]
 8004112:	0608      	lsls	r0, r1, #24
 8004114:	f57f af70 	bpl.w	8003ff8 <_scanf_float+0x70>
 8004118:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800411c:	e7f4      	b.n	8004108 <_scanf_float+0x180>
 800411e:	2a02      	cmp	r2, #2
 8004120:	d047      	beq.n	80041b2 <_scanf_float+0x22a>
 8004122:	f1bb 0f01 	cmp.w	fp, #1
 8004126:	d003      	beq.n	8004130 <_scanf_float+0x1a8>
 8004128:	f1bb 0f04 	cmp.w	fp, #4
 800412c:	f47f af64 	bne.w	8003ff8 <_scanf_float+0x70>
 8004130:	f10b 0b01 	add.w	fp, fp, #1
 8004134:	fa5f fb8b 	uxtb.w	fp, fp
 8004138:	e7e7      	b.n	800410a <_scanf_float+0x182>
 800413a:	f1bb 0f03 	cmp.w	fp, #3
 800413e:	d0f7      	beq.n	8004130 <_scanf_float+0x1a8>
 8004140:	f1bb 0f05 	cmp.w	fp, #5
 8004144:	e7f2      	b.n	800412c <_scanf_float+0x1a4>
 8004146:	f1bb 0f02 	cmp.w	fp, #2
 800414a:	f47f af55 	bne.w	8003ff8 <_scanf_float+0x70>
 800414e:	f04f 0b03 	mov.w	fp, #3
 8004152:	e7da      	b.n	800410a <_scanf_float+0x182>
 8004154:	f1bb 0f06 	cmp.w	fp, #6
 8004158:	f47f af4e 	bne.w	8003ff8 <_scanf_float+0x70>
 800415c:	f04f 0b07 	mov.w	fp, #7
 8004160:	e7d3      	b.n	800410a <_scanf_float+0x182>
 8004162:	6821      	ldr	r1, [r4, #0]
 8004164:	0588      	lsls	r0, r1, #22
 8004166:	f57f af47 	bpl.w	8003ff8 <_scanf_float+0x70>
 800416a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800416e:	6021      	str	r1, [r4, #0]
 8004170:	f8cd 9008 	str.w	r9, [sp, #8]
 8004174:	e7c9      	b.n	800410a <_scanf_float+0x182>
 8004176:	6821      	ldr	r1, [r4, #0]
 8004178:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800417c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004180:	d006      	beq.n	8004190 <_scanf_float+0x208>
 8004182:	0548      	lsls	r0, r1, #21
 8004184:	f57f af38 	bpl.w	8003ff8 <_scanf_float+0x70>
 8004188:	f1b9 0f00 	cmp.w	r9, #0
 800418c:	f43f af3b 	beq.w	8004006 <_scanf_float+0x7e>
 8004190:	0588      	lsls	r0, r1, #22
 8004192:	bf58      	it	pl
 8004194:	9802      	ldrpl	r0, [sp, #8]
 8004196:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800419a:	bf58      	it	pl
 800419c:	eba9 0000 	subpl.w	r0, r9, r0
 80041a0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80041a4:	bf58      	it	pl
 80041a6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80041aa:	6021      	str	r1, [r4, #0]
 80041ac:	f04f 0900 	mov.w	r9, #0
 80041b0:	e7ab      	b.n	800410a <_scanf_float+0x182>
 80041b2:	2203      	movs	r2, #3
 80041b4:	e7a9      	b.n	800410a <_scanf_float+0x182>
 80041b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041ba:	9205      	str	r2, [sp, #20]
 80041bc:	4631      	mov	r1, r6
 80041be:	4638      	mov	r0, r7
 80041c0:	4798      	blx	r3
 80041c2:	9a05      	ldr	r2, [sp, #20]
 80041c4:	2800      	cmp	r0, #0
 80041c6:	f43f af04 	beq.w	8003fd2 <_scanf_float+0x4a>
 80041ca:	e715      	b.n	8003ff8 <_scanf_float+0x70>
 80041cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80041d4:	4632      	mov	r2, r6
 80041d6:	4638      	mov	r0, r7
 80041d8:	4798      	blx	r3
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	3b01      	subs	r3, #1
 80041de:	6123      	str	r3, [r4, #16]
 80041e0:	e715      	b.n	800400e <_scanf_float+0x86>
 80041e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80041e6:	2b06      	cmp	r3, #6
 80041e8:	d80a      	bhi.n	8004200 <_scanf_float+0x278>
 80041ea:	f1bb 0f02 	cmp.w	fp, #2
 80041ee:	d968      	bls.n	80042c2 <_scanf_float+0x33a>
 80041f0:	f1ab 0b03 	sub.w	fp, fp, #3
 80041f4:	fa5f fb8b 	uxtb.w	fp, fp
 80041f8:	eba5 0b0b 	sub.w	fp, r5, fp
 80041fc:	455d      	cmp	r5, fp
 80041fe:	d14b      	bne.n	8004298 <_scanf_float+0x310>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	05da      	lsls	r2, r3, #23
 8004204:	d51f      	bpl.n	8004246 <_scanf_float+0x2be>
 8004206:	055b      	lsls	r3, r3, #21
 8004208:	d468      	bmi.n	80042dc <_scanf_float+0x354>
 800420a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800420e:	6923      	ldr	r3, [r4, #16]
 8004210:	2965      	cmp	r1, #101	; 0x65
 8004212:	f103 33ff 	add.w	r3, r3, #4294967295
 8004216:	f105 3bff 	add.w	fp, r5, #4294967295
 800421a:	6123      	str	r3, [r4, #16]
 800421c:	d00d      	beq.n	800423a <_scanf_float+0x2b2>
 800421e:	2945      	cmp	r1, #69	; 0x45
 8004220:	d00b      	beq.n	800423a <_scanf_float+0x2b2>
 8004222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004226:	4632      	mov	r2, r6
 8004228:	4638      	mov	r0, r7
 800422a:	4798      	blx	r3
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004232:	3b01      	subs	r3, #1
 8004234:	f1a5 0b02 	sub.w	fp, r5, #2
 8004238:	6123      	str	r3, [r4, #16]
 800423a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800423e:	4632      	mov	r2, r6
 8004240:	4638      	mov	r0, r7
 8004242:	4798      	blx	r3
 8004244:	465d      	mov	r5, fp
 8004246:	6826      	ldr	r6, [r4, #0]
 8004248:	f016 0610 	ands.w	r6, r6, #16
 800424c:	d17a      	bne.n	8004344 <_scanf_float+0x3bc>
 800424e:	702e      	strb	r6, [r5, #0]
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d142      	bne.n	80042e2 <_scanf_float+0x35a>
 800425c:	9b02      	ldr	r3, [sp, #8]
 800425e:	eba9 0303 	sub.w	r3, r9, r3
 8004262:	425a      	negs	r2, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d149      	bne.n	80042fc <_scanf_float+0x374>
 8004268:	2200      	movs	r2, #0
 800426a:	4641      	mov	r1, r8
 800426c:	4638      	mov	r0, r7
 800426e:	f000 ff33 	bl	80050d8 <_strtod_r>
 8004272:	6825      	ldr	r5, [r4, #0]
 8004274:	f8da 3000 	ldr.w	r3, [sl]
 8004278:	f015 0f02 	tst.w	r5, #2
 800427c:	f103 0204 	add.w	r2, r3, #4
 8004280:	ec59 8b10 	vmov	r8, r9, d0
 8004284:	f8ca 2000 	str.w	r2, [sl]
 8004288:	d043      	beq.n	8004312 <_scanf_float+0x38a>
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	e9c3 8900 	strd	r8, r9, [r3]
 8004290:	68e3      	ldr	r3, [r4, #12]
 8004292:	3301      	adds	r3, #1
 8004294:	60e3      	str	r3, [r4, #12]
 8004296:	e6be      	b.n	8004016 <_scanf_float+0x8e>
 8004298:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800429c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80042a0:	4632      	mov	r2, r6
 80042a2:	4638      	mov	r0, r7
 80042a4:	4798      	blx	r3
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	6123      	str	r3, [r4, #16]
 80042ac:	e7a6      	b.n	80041fc <_scanf_float+0x274>
 80042ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042b2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80042b6:	4632      	mov	r2, r6
 80042b8:	4638      	mov	r0, r7
 80042ba:	4798      	blx	r3
 80042bc:	6923      	ldr	r3, [r4, #16]
 80042be:	3b01      	subs	r3, #1
 80042c0:	6123      	str	r3, [r4, #16]
 80042c2:	4545      	cmp	r5, r8
 80042c4:	d8f3      	bhi.n	80042ae <_scanf_float+0x326>
 80042c6:	e6a5      	b.n	8004014 <_scanf_float+0x8c>
 80042c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80042d0:	4632      	mov	r2, r6
 80042d2:	4638      	mov	r0, r7
 80042d4:	4798      	blx	r3
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	3b01      	subs	r3, #1
 80042da:	6123      	str	r3, [r4, #16]
 80042dc:	4545      	cmp	r5, r8
 80042de:	d8f3      	bhi.n	80042c8 <_scanf_float+0x340>
 80042e0:	e698      	b.n	8004014 <_scanf_float+0x8c>
 80042e2:	9b03      	ldr	r3, [sp, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0bf      	beq.n	8004268 <_scanf_float+0x2e0>
 80042e8:	9904      	ldr	r1, [sp, #16]
 80042ea:	230a      	movs	r3, #10
 80042ec:	4632      	mov	r2, r6
 80042ee:	3101      	adds	r1, #1
 80042f0:	4638      	mov	r0, r7
 80042f2:	f000 ff7d 	bl	80051f0 <_strtol_r>
 80042f6:	9b03      	ldr	r3, [sp, #12]
 80042f8:	9d04      	ldr	r5, [sp, #16]
 80042fa:	1ac2      	subs	r2, r0, r3
 80042fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004300:	429d      	cmp	r5, r3
 8004302:	bf28      	it	cs
 8004304:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004308:	490f      	ldr	r1, [pc, #60]	; (8004348 <_scanf_float+0x3c0>)
 800430a:	4628      	mov	r0, r5
 800430c:	f000 f8b4 	bl	8004478 <siprintf>
 8004310:	e7aa      	b.n	8004268 <_scanf_float+0x2e0>
 8004312:	f015 0504 	ands.w	r5, r5, #4
 8004316:	d1b8      	bne.n	800428a <_scanf_float+0x302>
 8004318:	681f      	ldr	r7, [r3, #0]
 800431a:	ee10 2a10 	vmov	r2, s0
 800431e:	464b      	mov	r3, r9
 8004320:	ee10 0a10 	vmov	r0, s0
 8004324:	4649      	mov	r1, r9
 8004326:	f7fc fc21 	bl	8000b6c <__aeabi_dcmpun>
 800432a:	b128      	cbz	r0, 8004338 <_scanf_float+0x3b0>
 800432c:	4628      	mov	r0, r5
 800432e:	f000 f89d 	bl	800446c <nanf>
 8004332:	ed87 0a00 	vstr	s0, [r7]
 8004336:	e7ab      	b.n	8004290 <_scanf_float+0x308>
 8004338:	4640      	mov	r0, r8
 800433a:	4649      	mov	r1, r9
 800433c:	f7fc fc74 	bl	8000c28 <__aeabi_d2f>
 8004340:	6038      	str	r0, [r7, #0]
 8004342:	e7a5      	b.n	8004290 <_scanf_float+0x308>
 8004344:	2600      	movs	r6, #0
 8004346:	e666      	b.n	8004016 <_scanf_float+0x8e>
 8004348:	08007afc 	.word	0x08007afc

0800434c <_puts_r>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	460e      	mov	r6, r1
 8004350:	4605      	mov	r5, r0
 8004352:	b118      	cbz	r0, 800435c <_puts_r+0x10>
 8004354:	6983      	ldr	r3, [r0, #24]
 8004356:	b90b      	cbnz	r3, 800435c <_puts_r+0x10>
 8004358:	f001 ff64 	bl	8006224 <__sinit>
 800435c:	69ab      	ldr	r3, [r5, #24]
 800435e:	68ac      	ldr	r4, [r5, #8]
 8004360:	b913      	cbnz	r3, 8004368 <_puts_r+0x1c>
 8004362:	4628      	mov	r0, r5
 8004364:	f001 ff5e 	bl	8006224 <__sinit>
 8004368:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <_puts_r+0xac>)
 800436a:	429c      	cmp	r4, r3
 800436c:	d117      	bne.n	800439e <_puts_r+0x52>
 800436e:	686c      	ldr	r4, [r5, #4]
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	071b      	lsls	r3, r3, #28
 8004374:	d51d      	bpl.n	80043b2 <_puts_r+0x66>
 8004376:	6923      	ldr	r3, [r4, #16]
 8004378:	b1db      	cbz	r3, 80043b2 <_puts_r+0x66>
 800437a:	3e01      	subs	r6, #1
 800437c:	68a3      	ldr	r3, [r4, #8]
 800437e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004382:	3b01      	subs	r3, #1
 8004384:	60a3      	str	r3, [r4, #8]
 8004386:	b9e9      	cbnz	r1, 80043c4 <_puts_r+0x78>
 8004388:	2b00      	cmp	r3, #0
 800438a:	da2e      	bge.n	80043ea <_puts_r+0x9e>
 800438c:	4622      	mov	r2, r4
 800438e:	210a      	movs	r1, #10
 8004390:	4628      	mov	r0, r5
 8004392:	f000 ff3f 	bl	8005214 <__swbuf_r>
 8004396:	3001      	adds	r0, #1
 8004398:	d011      	beq.n	80043be <_puts_r+0x72>
 800439a:	200a      	movs	r0, #10
 800439c:	e011      	b.n	80043c2 <_puts_r+0x76>
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <_puts_r+0xb0>)
 80043a0:	429c      	cmp	r4, r3
 80043a2:	d101      	bne.n	80043a8 <_puts_r+0x5c>
 80043a4:	68ac      	ldr	r4, [r5, #8]
 80043a6:	e7e3      	b.n	8004370 <_puts_r+0x24>
 80043a8:	4b15      	ldr	r3, [pc, #84]	; (8004400 <_puts_r+0xb4>)
 80043aa:	429c      	cmp	r4, r3
 80043ac:	bf08      	it	eq
 80043ae:	68ec      	ldreq	r4, [r5, #12]
 80043b0:	e7de      	b.n	8004370 <_puts_r+0x24>
 80043b2:	4621      	mov	r1, r4
 80043b4:	4628      	mov	r0, r5
 80043b6:	f000 ff7f 	bl	80052b8 <__swsetup_r>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d0dd      	beq.n	800437a <_puts_r+0x2e>
 80043be:	f04f 30ff 	mov.w	r0, #4294967295
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	da04      	bge.n	80043d2 <_puts_r+0x86>
 80043c8:	69a2      	ldr	r2, [r4, #24]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	dc06      	bgt.n	80043dc <_puts_r+0x90>
 80043ce:	290a      	cmp	r1, #10
 80043d0:	d004      	beq.n	80043dc <_puts_r+0x90>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	6022      	str	r2, [r4, #0]
 80043d8:	7019      	strb	r1, [r3, #0]
 80043da:	e7cf      	b.n	800437c <_puts_r+0x30>
 80043dc:	4622      	mov	r2, r4
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 ff18 	bl	8005214 <__swbuf_r>
 80043e4:	3001      	adds	r0, #1
 80043e6:	d1c9      	bne.n	800437c <_puts_r+0x30>
 80043e8:	e7e9      	b.n	80043be <_puts_r+0x72>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	200a      	movs	r0, #10
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	6022      	str	r2, [r4, #0]
 80043f2:	7018      	strb	r0, [r3, #0]
 80043f4:	e7e5      	b.n	80043c2 <_puts_r+0x76>
 80043f6:	bf00      	nop
 80043f8:	08007b88 	.word	0x08007b88
 80043fc:	08007ba8 	.word	0x08007ba8
 8004400:	08007b68 	.word	0x08007b68

08004404 <puts>:
 8004404:	4b02      	ldr	r3, [pc, #8]	; (8004410 <puts+0xc>)
 8004406:	4601      	mov	r1, r0
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	f7ff bf9f 	b.w	800434c <_puts_r>
 800440e:	bf00      	nop
 8004410:	2000000c 	.word	0x2000000c

08004414 <__srget_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	460c      	mov	r4, r1
 8004418:	4605      	mov	r5, r0
 800441a:	b118      	cbz	r0, 8004424 <__srget_r+0x10>
 800441c:	6983      	ldr	r3, [r0, #24]
 800441e:	b90b      	cbnz	r3, 8004424 <__srget_r+0x10>
 8004420:	f001 ff00 	bl	8006224 <__sinit>
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <__srget_r+0x4c>)
 8004426:	429c      	cmp	r4, r3
 8004428:	d10d      	bne.n	8004446 <__srget_r+0x32>
 800442a:	686c      	ldr	r4, [r5, #4]
 800442c:	4621      	mov	r1, r4
 800442e:	4628      	mov	r0, r5
 8004430:	f003 f972 	bl	8007718 <__srefill_r>
 8004434:	b988      	cbnz	r0, 800445a <__srget_r+0x46>
 8004436:	6863      	ldr	r3, [r4, #4]
 8004438:	3b01      	subs	r3, #1
 800443a:	6063      	str	r3, [r4, #4]
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	6022      	str	r2, [r4, #0]
 8004442:	7818      	ldrb	r0, [r3, #0]
 8004444:	bd38      	pop	{r3, r4, r5, pc}
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <__srget_r+0x50>)
 8004448:	429c      	cmp	r4, r3
 800444a:	d101      	bne.n	8004450 <__srget_r+0x3c>
 800444c:	68ac      	ldr	r4, [r5, #8]
 800444e:	e7ed      	b.n	800442c <__srget_r+0x18>
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <__srget_r+0x54>)
 8004452:	429c      	cmp	r4, r3
 8004454:	bf08      	it	eq
 8004456:	68ec      	ldreq	r4, [r5, #12]
 8004458:	e7e8      	b.n	800442c <__srget_r+0x18>
 800445a:	f04f 30ff 	mov.w	r0, #4294967295
 800445e:	e7f1      	b.n	8004444 <__srget_r+0x30>
 8004460:	08007b88 	.word	0x08007b88
 8004464:	08007ba8 	.word	0x08007ba8
 8004468:	08007b68 	.word	0x08007b68

0800446c <nanf>:
 800446c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004474 <nanf+0x8>
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	7fc00000 	.word	0x7fc00000

08004478 <siprintf>:
 8004478:	b40e      	push	{r1, r2, r3}
 800447a:	b500      	push	{lr}
 800447c:	b09c      	sub	sp, #112	; 0x70
 800447e:	ab1d      	add	r3, sp, #116	; 0x74
 8004480:	9002      	str	r0, [sp, #8]
 8004482:	9006      	str	r0, [sp, #24]
 8004484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004488:	4809      	ldr	r0, [pc, #36]	; (80044b0 <siprintf+0x38>)
 800448a:	9107      	str	r1, [sp, #28]
 800448c:	9104      	str	r1, [sp, #16]
 800448e:	4909      	ldr	r1, [pc, #36]	; (80044b4 <siprintf+0x3c>)
 8004490:	f853 2b04 	ldr.w	r2, [r3], #4
 8004494:	9105      	str	r1, [sp, #20]
 8004496:	6800      	ldr	r0, [r0, #0]
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	a902      	add	r1, sp, #8
 800449c:	f003 f83a 	bl	8007514 <_svfiprintf_r>
 80044a0:	9b02      	ldr	r3, [sp, #8]
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	b01c      	add	sp, #112	; 0x70
 80044a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044ac:	b003      	add	sp, #12
 80044ae:	4770      	bx	lr
 80044b0:	2000000c 	.word	0x2000000c
 80044b4:	ffff0208 	.word	0xffff0208

080044b8 <sulp>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	4604      	mov	r4, r0
 80044bc:	460d      	mov	r5, r1
 80044be:	ec45 4b10 	vmov	d0, r4, r5
 80044c2:	4616      	mov	r6, r2
 80044c4:	f002 fde2 	bl	800708c <__ulp>
 80044c8:	ec51 0b10 	vmov	r0, r1, d0
 80044cc:	b17e      	cbz	r6, 80044ee <sulp+0x36>
 80044ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80044d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	dd09      	ble.n	80044ee <sulp+0x36>
 80044da:	051b      	lsls	r3, r3, #20
 80044dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80044e0:	2400      	movs	r4, #0
 80044e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	f7fc f8a5 	bl	8000638 <__aeabi_dmul>
 80044ee:	bd70      	pop	{r4, r5, r6, pc}

080044f0 <_strtod_l>:
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	461f      	mov	r7, r3
 80044f6:	b0a1      	sub	sp, #132	; 0x84
 80044f8:	2300      	movs	r3, #0
 80044fa:	4681      	mov	r9, r0
 80044fc:	4638      	mov	r0, r7
 80044fe:	460e      	mov	r6, r1
 8004500:	9217      	str	r2, [sp, #92]	; 0x5c
 8004502:	931c      	str	r3, [sp, #112]	; 0x70
 8004504:	f002 fa5d 	bl	80069c2 <__localeconv_l>
 8004508:	4680      	mov	r8, r0
 800450a:	6800      	ldr	r0, [r0, #0]
 800450c:	f7fb fe80 	bl	8000210 <strlen>
 8004510:	f04f 0a00 	mov.w	sl, #0
 8004514:	4604      	mov	r4, r0
 8004516:	f04f 0b00 	mov.w	fp, #0
 800451a:	961b      	str	r6, [sp, #108]	; 0x6c
 800451c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800451e:	781a      	ldrb	r2, [r3, #0]
 8004520:	2a0d      	cmp	r2, #13
 8004522:	d832      	bhi.n	800458a <_strtod_l+0x9a>
 8004524:	2a09      	cmp	r2, #9
 8004526:	d236      	bcs.n	8004596 <_strtod_l+0xa6>
 8004528:	2a00      	cmp	r2, #0
 800452a:	d03e      	beq.n	80045aa <_strtod_l+0xba>
 800452c:	2300      	movs	r3, #0
 800452e:	930d      	str	r3, [sp, #52]	; 0x34
 8004530:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004532:	782b      	ldrb	r3, [r5, #0]
 8004534:	2b30      	cmp	r3, #48	; 0x30
 8004536:	f040 80ac 	bne.w	8004692 <_strtod_l+0x1a2>
 800453a:	786b      	ldrb	r3, [r5, #1]
 800453c:	2b58      	cmp	r3, #88	; 0x58
 800453e:	d001      	beq.n	8004544 <_strtod_l+0x54>
 8004540:	2b78      	cmp	r3, #120	; 0x78
 8004542:	d167      	bne.n	8004614 <_strtod_l+0x124>
 8004544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	ab1c      	add	r3, sp, #112	; 0x70
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	9702      	str	r7, [sp, #8]
 800454e:	ab1d      	add	r3, sp, #116	; 0x74
 8004550:	4a88      	ldr	r2, [pc, #544]	; (8004774 <_strtod_l+0x284>)
 8004552:	a91b      	add	r1, sp, #108	; 0x6c
 8004554:	4648      	mov	r0, r9
 8004556:	f001 ff5a 	bl	800640e <__gethex>
 800455a:	f010 0407 	ands.w	r4, r0, #7
 800455e:	4606      	mov	r6, r0
 8004560:	d005      	beq.n	800456e <_strtod_l+0x7e>
 8004562:	2c06      	cmp	r4, #6
 8004564:	d12b      	bne.n	80045be <_strtod_l+0xce>
 8004566:	3501      	adds	r5, #1
 8004568:	2300      	movs	r3, #0
 800456a:	951b      	str	r5, [sp, #108]	; 0x6c
 800456c:	930d      	str	r3, [sp, #52]	; 0x34
 800456e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004570:	2b00      	cmp	r3, #0
 8004572:	f040 859a 	bne.w	80050aa <_strtod_l+0xbba>
 8004576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004578:	b1e3      	cbz	r3, 80045b4 <_strtod_l+0xc4>
 800457a:	4652      	mov	r2, sl
 800457c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004580:	ec43 2b10 	vmov	d0, r2, r3
 8004584:	b021      	add	sp, #132	; 0x84
 8004586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458a:	2a2b      	cmp	r2, #43	; 0x2b
 800458c:	d015      	beq.n	80045ba <_strtod_l+0xca>
 800458e:	2a2d      	cmp	r2, #45	; 0x2d
 8004590:	d004      	beq.n	800459c <_strtod_l+0xac>
 8004592:	2a20      	cmp	r2, #32
 8004594:	d1ca      	bne.n	800452c <_strtod_l+0x3c>
 8004596:	3301      	adds	r3, #1
 8004598:	931b      	str	r3, [sp, #108]	; 0x6c
 800459a:	e7bf      	b.n	800451c <_strtod_l+0x2c>
 800459c:	2201      	movs	r2, #1
 800459e:	920d      	str	r2, [sp, #52]	; 0x34
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1c2      	bne.n	8004530 <_strtod_l+0x40>
 80045aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 8579 	bne.w	80050a6 <_strtod_l+0xbb6>
 80045b4:	4652      	mov	r2, sl
 80045b6:	465b      	mov	r3, fp
 80045b8:	e7e2      	b.n	8004580 <_strtod_l+0x90>
 80045ba:	2200      	movs	r2, #0
 80045bc:	e7ef      	b.n	800459e <_strtod_l+0xae>
 80045be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80045c0:	b13a      	cbz	r2, 80045d2 <_strtod_l+0xe2>
 80045c2:	2135      	movs	r1, #53	; 0x35
 80045c4:	a81e      	add	r0, sp, #120	; 0x78
 80045c6:	f002 fe59 	bl	800727c <__copybits>
 80045ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80045cc:	4648      	mov	r0, r9
 80045ce:	f002 fac6 	bl	8006b5e <_Bfree>
 80045d2:	3c01      	subs	r4, #1
 80045d4:	2c04      	cmp	r4, #4
 80045d6:	d806      	bhi.n	80045e6 <_strtod_l+0xf6>
 80045d8:	e8df f004 	tbb	[pc, r4]
 80045dc:	1714030a 	.word	0x1714030a
 80045e0:	0a          	.byte	0x0a
 80045e1:	00          	.byte	0x00
 80045e2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80045e6:	0730      	lsls	r0, r6, #28
 80045e8:	d5c1      	bpl.n	800456e <_strtod_l+0x7e>
 80045ea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80045ee:	e7be      	b.n	800456e <_strtod_l+0x7e>
 80045f0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80045f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80045f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80045fa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80045fe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004602:	e7f0      	b.n	80045e6 <_strtod_l+0xf6>
 8004604:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004778 <_strtod_l+0x288>
 8004608:	e7ed      	b.n	80045e6 <_strtod_l+0xf6>
 800460a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800460e:	f04f 3aff 	mov.w	sl, #4294967295
 8004612:	e7e8      	b.n	80045e6 <_strtod_l+0xf6>
 8004614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	921b      	str	r2, [sp, #108]	; 0x6c
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	2b30      	cmp	r3, #48	; 0x30
 800461e:	d0f9      	beq.n	8004614 <_strtod_l+0x124>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0a4      	beq.n	800456e <_strtod_l+0x7e>
 8004624:	2301      	movs	r3, #1
 8004626:	2500      	movs	r5, #0
 8004628:	9306      	str	r3, [sp, #24]
 800462a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800462c:	9308      	str	r3, [sp, #32]
 800462e:	9507      	str	r5, [sp, #28]
 8004630:	9505      	str	r5, [sp, #20]
 8004632:	220a      	movs	r2, #10
 8004634:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004636:	7807      	ldrb	r7, [r0, #0]
 8004638:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800463c:	b2d9      	uxtb	r1, r3
 800463e:	2909      	cmp	r1, #9
 8004640:	d929      	bls.n	8004696 <_strtod_l+0x1a6>
 8004642:	4622      	mov	r2, r4
 8004644:	f8d8 1000 	ldr.w	r1, [r8]
 8004648:	f003 f945 	bl	80078d6 <strncmp>
 800464c:	2800      	cmp	r0, #0
 800464e:	d031      	beq.n	80046b4 <_strtod_l+0x1c4>
 8004650:	2000      	movs	r0, #0
 8004652:	9c05      	ldr	r4, [sp, #20]
 8004654:	9004      	str	r0, [sp, #16]
 8004656:	463b      	mov	r3, r7
 8004658:	4602      	mov	r2, r0
 800465a:	2b65      	cmp	r3, #101	; 0x65
 800465c:	d001      	beq.n	8004662 <_strtod_l+0x172>
 800465e:	2b45      	cmp	r3, #69	; 0x45
 8004660:	d114      	bne.n	800468c <_strtod_l+0x19c>
 8004662:	b924      	cbnz	r4, 800466e <_strtod_l+0x17e>
 8004664:	b910      	cbnz	r0, 800466c <_strtod_l+0x17c>
 8004666:	9b06      	ldr	r3, [sp, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d09e      	beq.n	80045aa <_strtod_l+0xba>
 800466c:	2400      	movs	r4, #0
 800466e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004670:	1c73      	adds	r3, r6, #1
 8004672:	931b      	str	r3, [sp, #108]	; 0x6c
 8004674:	7873      	ldrb	r3, [r6, #1]
 8004676:	2b2b      	cmp	r3, #43	; 0x2b
 8004678:	d078      	beq.n	800476c <_strtod_l+0x27c>
 800467a:	2b2d      	cmp	r3, #45	; 0x2d
 800467c:	d070      	beq.n	8004760 <_strtod_l+0x270>
 800467e:	f04f 0c00 	mov.w	ip, #0
 8004682:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004686:	2f09      	cmp	r7, #9
 8004688:	d97c      	bls.n	8004784 <_strtod_l+0x294>
 800468a:	961b      	str	r6, [sp, #108]	; 0x6c
 800468c:	f04f 0e00 	mov.w	lr, #0
 8004690:	e09a      	b.n	80047c8 <_strtod_l+0x2d8>
 8004692:	2300      	movs	r3, #0
 8004694:	e7c7      	b.n	8004626 <_strtod_l+0x136>
 8004696:	9905      	ldr	r1, [sp, #20]
 8004698:	2908      	cmp	r1, #8
 800469a:	bfdd      	ittte	le
 800469c:	9907      	ldrle	r1, [sp, #28]
 800469e:	fb02 3301 	mlale	r3, r2, r1, r3
 80046a2:	9307      	strle	r3, [sp, #28]
 80046a4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80046a8:	9b05      	ldr	r3, [sp, #20]
 80046aa:	3001      	adds	r0, #1
 80046ac:	3301      	adds	r3, #1
 80046ae:	9305      	str	r3, [sp, #20]
 80046b0:	901b      	str	r0, [sp, #108]	; 0x6c
 80046b2:	e7bf      	b.n	8004634 <_strtod_l+0x144>
 80046b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046b6:	191a      	adds	r2, r3, r4
 80046b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80046ba:	9a05      	ldr	r2, [sp, #20]
 80046bc:	5d1b      	ldrb	r3, [r3, r4]
 80046be:	2a00      	cmp	r2, #0
 80046c0:	d037      	beq.n	8004732 <_strtod_l+0x242>
 80046c2:	9c05      	ldr	r4, [sp, #20]
 80046c4:	4602      	mov	r2, r0
 80046c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80046ca:	2909      	cmp	r1, #9
 80046cc:	d913      	bls.n	80046f6 <_strtod_l+0x206>
 80046ce:	2101      	movs	r1, #1
 80046d0:	9104      	str	r1, [sp, #16]
 80046d2:	e7c2      	b.n	800465a <_strtod_l+0x16a>
 80046d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	3001      	adds	r0, #1
 80046de:	2b30      	cmp	r3, #48	; 0x30
 80046e0:	d0f8      	beq.n	80046d4 <_strtod_l+0x1e4>
 80046e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80046e6:	2a08      	cmp	r2, #8
 80046e8:	f200 84e4 	bhi.w	80050b4 <_strtod_l+0xbc4>
 80046ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80046ee:	9208      	str	r2, [sp, #32]
 80046f0:	4602      	mov	r2, r0
 80046f2:	2000      	movs	r0, #0
 80046f4:	4604      	mov	r4, r0
 80046f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80046fa:	f100 0101 	add.w	r1, r0, #1
 80046fe:	d012      	beq.n	8004726 <_strtod_l+0x236>
 8004700:	440a      	add	r2, r1
 8004702:	eb00 0c04 	add.w	ip, r0, r4
 8004706:	4621      	mov	r1, r4
 8004708:	270a      	movs	r7, #10
 800470a:	458c      	cmp	ip, r1
 800470c:	d113      	bne.n	8004736 <_strtod_l+0x246>
 800470e:	1821      	adds	r1, r4, r0
 8004710:	2908      	cmp	r1, #8
 8004712:	f104 0401 	add.w	r4, r4, #1
 8004716:	4404      	add	r4, r0
 8004718:	dc19      	bgt.n	800474e <_strtod_l+0x25e>
 800471a:	9b07      	ldr	r3, [sp, #28]
 800471c:	210a      	movs	r1, #10
 800471e:	fb01 e303 	mla	r3, r1, r3, lr
 8004722:	9307      	str	r3, [sp, #28]
 8004724:	2100      	movs	r1, #0
 8004726:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004728:	1c58      	adds	r0, r3, #1
 800472a:	901b      	str	r0, [sp, #108]	; 0x6c
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	4608      	mov	r0, r1
 8004730:	e7c9      	b.n	80046c6 <_strtod_l+0x1d6>
 8004732:	9805      	ldr	r0, [sp, #20]
 8004734:	e7d3      	b.n	80046de <_strtod_l+0x1ee>
 8004736:	2908      	cmp	r1, #8
 8004738:	f101 0101 	add.w	r1, r1, #1
 800473c:	dc03      	bgt.n	8004746 <_strtod_l+0x256>
 800473e:	9b07      	ldr	r3, [sp, #28]
 8004740:	437b      	muls	r3, r7
 8004742:	9307      	str	r3, [sp, #28]
 8004744:	e7e1      	b.n	800470a <_strtod_l+0x21a>
 8004746:	2910      	cmp	r1, #16
 8004748:	bfd8      	it	le
 800474a:	437d      	mulle	r5, r7
 800474c:	e7dd      	b.n	800470a <_strtod_l+0x21a>
 800474e:	2c10      	cmp	r4, #16
 8004750:	bfdc      	itt	le
 8004752:	210a      	movle	r1, #10
 8004754:	fb01 e505 	mlale	r5, r1, r5, lr
 8004758:	e7e4      	b.n	8004724 <_strtod_l+0x234>
 800475a:	2301      	movs	r3, #1
 800475c:	9304      	str	r3, [sp, #16]
 800475e:	e781      	b.n	8004664 <_strtod_l+0x174>
 8004760:	f04f 0c01 	mov.w	ip, #1
 8004764:	1cb3      	adds	r3, r6, #2
 8004766:	931b      	str	r3, [sp, #108]	; 0x6c
 8004768:	78b3      	ldrb	r3, [r6, #2]
 800476a:	e78a      	b.n	8004682 <_strtod_l+0x192>
 800476c:	f04f 0c00 	mov.w	ip, #0
 8004770:	e7f8      	b.n	8004764 <_strtod_l+0x274>
 8004772:	bf00      	nop
 8004774:	08007b04 	.word	0x08007b04
 8004778:	7ff00000 	.word	0x7ff00000
 800477c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800477e:	1c5f      	adds	r7, r3, #1
 8004780:	971b      	str	r7, [sp, #108]	; 0x6c
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d0f9      	beq.n	800477c <_strtod_l+0x28c>
 8004788:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800478c:	2f08      	cmp	r7, #8
 800478e:	f63f af7d 	bhi.w	800468c <_strtod_l+0x19c>
 8004792:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004796:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004798:	930a      	str	r3, [sp, #40]	; 0x28
 800479a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800479c:	1c5f      	adds	r7, r3, #1
 800479e:	971b      	str	r7, [sp, #108]	; 0x6c
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80047a6:	f1b8 0f09 	cmp.w	r8, #9
 80047aa:	d937      	bls.n	800481c <_strtod_l+0x32c>
 80047ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047ae:	1a7f      	subs	r7, r7, r1
 80047b0:	2f08      	cmp	r7, #8
 80047b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80047b6:	dc37      	bgt.n	8004828 <_strtod_l+0x338>
 80047b8:	45be      	cmp	lr, r7
 80047ba:	bfa8      	it	ge
 80047bc:	46be      	movge	lr, r7
 80047be:	f1bc 0f00 	cmp.w	ip, #0
 80047c2:	d001      	beq.n	80047c8 <_strtod_l+0x2d8>
 80047c4:	f1ce 0e00 	rsb	lr, lr, #0
 80047c8:	2c00      	cmp	r4, #0
 80047ca:	d151      	bne.n	8004870 <_strtod_l+0x380>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	f47f aece 	bne.w	800456e <_strtod_l+0x7e>
 80047d2:	9a06      	ldr	r2, [sp, #24]
 80047d4:	2a00      	cmp	r2, #0
 80047d6:	f47f aeca 	bne.w	800456e <_strtod_l+0x7e>
 80047da:	9a04      	ldr	r2, [sp, #16]
 80047dc:	2a00      	cmp	r2, #0
 80047de:	f47f aee4 	bne.w	80045aa <_strtod_l+0xba>
 80047e2:	2b4e      	cmp	r3, #78	; 0x4e
 80047e4:	d027      	beq.n	8004836 <_strtod_l+0x346>
 80047e6:	dc21      	bgt.n	800482c <_strtod_l+0x33c>
 80047e8:	2b49      	cmp	r3, #73	; 0x49
 80047ea:	f47f aede 	bne.w	80045aa <_strtod_l+0xba>
 80047ee:	49a0      	ldr	r1, [pc, #640]	; (8004a70 <_strtod_l+0x580>)
 80047f0:	a81b      	add	r0, sp, #108	; 0x6c
 80047f2:	f002 f83f 	bl	8006874 <__match>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	f43f aed7 	beq.w	80045aa <_strtod_l+0xba>
 80047fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047fe:	499d      	ldr	r1, [pc, #628]	; (8004a74 <_strtod_l+0x584>)
 8004800:	3b01      	subs	r3, #1
 8004802:	a81b      	add	r0, sp, #108	; 0x6c
 8004804:	931b      	str	r3, [sp, #108]	; 0x6c
 8004806:	f002 f835 	bl	8006874 <__match>
 800480a:	b910      	cbnz	r0, 8004812 <_strtod_l+0x322>
 800480c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800480e:	3301      	adds	r3, #1
 8004810:	931b      	str	r3, [sp, #108]	; 0x6c
 8004812:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004a88 <_strtod_l+0x598>
 8004816:	f04f 0a00 	mov.w	sl, #0
 800481a:	e6a8      	b.n	800456e <_strtod_l+0x7e>
 800481c:	210a      	movs	r1, #10
 800481e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004822:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004826:	e7b8      	b.n	800479a <_strtod_l+0x2aa>
 8004828:	46be      	mov	lr, r7
 800482a:	e7c8      	b.n	80047be <_strtod_l+0x2ce>
 800482c:	2b69      	cmp	r3, #105	; 0x69
 800482e:	d0de      	beq.n	80047ee <_strtod_l+0x2fe>
 8004830:	2b6e      	cmp	r3, #110	; 0x6e
 8004832:	f47f aeba 	bne.w	80045aa <_strtod_l+0xba>
 8004836:	4990      	ldr	r1, [pc, #576]	; (8004a78 <_strtod_l+0x588>)
 8004838:	a81b      	add	r0, sp, #108	; 0x6c
 800483a:	f002 f81b 	bl	8006874 <__match>
 800483e:	2800      	cmp	r0, #0
 8004840:	f43f aeb3 	beq.w	80045aa <_strtod_l+0xba>
 8004844:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b28      	cmp	r3, #40	; 0x28
 800484a:	d10e      	bne.n	800486a <_strtod_l+0x37a>
 800484c:	aa1e      	add	r2, sp, #120	; 0x78
 800484e:	498b      	ldr	r1, [pc, #556]	; (8004a7c <_strtod_l+0x58c>)
 8004850:	a81b      	add	r0, sp, #108	; 0x6c
 8004852:	f002 f823 	bl	800689c <__hexnan>
 8004856:	2805      	cmp	r0, #5
 8004858:	d107      	bne.n	800486a <_strtod_l+0x37a>
 800485a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800485c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004860:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004864:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004868:	e681      	b.n	800456e <_strtod_l+0x7e>
 800486a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004a90 <_strtod_l+0x5a0>
 800486e:	e7d2      	b.n	8004816 <_strtod_l+0x326>
 8004870:	ebae 0302 	sub.w	r3, lr, r2
 8004874:	9306      	str	r3, [sp, #24]
 8004876:	9b05      	ldr	r3, [sp, #20]
 8004878:	9807      	ldr	r0, [sp, #28]
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf08      	it	eq
 800487e:	4623      	moveq	r3, r4
 8004880:	2c10      	cmp	r4, #16
 8004882:	9305      	str	r3, [sp, #20]
 8004884:	46a0      	mov	r8, r4
 8004886:	bfa8      	it	ge
 8004888:	f04f 0810 	movge.w	r8, #16
 800488c:	f7fb fe5a 	bl	8000544 <__aeabi_ui2d>
 8004890:	2c09      	cmp	r4, #9
 8004892:	4682      	mov	sl, r0
 8004894:	468b      	mov	fp, r1
 8004896:	dc13      	bgt.n	80048c0 <_strtod_l+0x3d0>
 8004898:	9b06      	ldr	r3, [sp, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f43f ae67 	beq.w	800456e <_strtod_l+0x7e>
 80048a0:	9b06      	ldr	r3, [sp, #24]
 80048a2:	dd7a      	ble.n	800499a <_strtod_l+0x4aa>
 80048a4:	2b16      	cmp	r3, #22
 80048a6:	dc61      	bgt.n	800496c <_strtod_l+0x47c>
 80048a8:	4a75      	ldr	r2, [pc, #468]	; (8004a80 <_strtod_l+0x590>)
 80048aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80048ae:	e9de 0100 	ldrd	r0, r1, [lr]
 80048b2:	4652      	mov	r2, sl
 80048b4:	465b      	mov	r3, fp
 80048b6:	f7fb febf 	bl	8000638 <__aeabi_dmul>
 80048ba:	4682      	mov	sl, r0
 80048bc:	468b      	mov	fp, r1
 80048be:	e656      	b.n	800456e <_strtod_l+0x7e>
 80048c0:	4b6f      	ldr	r3, [pc, #444]	; (8004a80 <_strtod_l+0x590>)
 80048c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80048c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80048ca:	f7fb feb5 	bl	8000638 <__aeabi_dmul>
 80048ce:	4606      	mov	r6, r0
 80048d0:	4628      	mov	r0, r5
 80048d2:	460f      	mov	r7, r1
 80048d4:	f7fb fe36 	bl	8000544 <__aeabi_ui2d>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4630      	mov	r0, r6
 80048de:	4639      	mov	r1, r7
 80048e0:	f7fb fcf4 	bl	80002cc <__adddf3>
 80048e4:	2c0f      	cmp	r4, #15
 80048e6:	4682      	mov	sl, r0
 80048e8:	468b      	mov	fp, r1
 80048ea:	ddd5      	ble.n	8004898 <_strtod_l+0x3a8>
 80048ec:	9b06      	ldr	r3, [sp, #24]
 80048ee:	eba4 0808 	sub.w	r8, r4, r8
 80048f2:	4498      	add	r8, r3
 80048f4:	f1b8 0f00 	cmp.w	r8, #0
 80048f8:	f340 8096 	ble.w	8004a28 <_strtod_l+0x538>
 80048fc:	f018 030f 	ands.w	r3, r8, #15
 8004900:	d00a      	beq.n	8004918 <_strtod_l+0x428>
 8004902:	495f      	ldr	r1, [pc, #380]	; (8004a80 <_strtod_l+0x590>)
 8004904:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004908:	4652      	mov	r2, sl
 800490a:	465b      	mov	r3, fp
 800490c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004910:	f7fb fe92 	bl	8000638 <__aeabi_dmul>
 8004914:	4682      	mov	sl, r0
 8004916:	468b      	mov	fp, r1
 8004918:	f038 080f 	bics.w	r8, r8, #15
 800491c:	d073      	beq.n	8004a06 <_strtod_l+0x516>
 800491e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004922:	dd47      	ble.n	80049b4 <_strtod_l+0x4c4>
 8004924:	2400      	movs	r4, #0
 8004926:	46a0      	mov	r8, r4
 8004928:	9407      	str	r4, [sp, #28]
 800492a:	9405      	str	r4, [sp, #20]
 800492c:	2322      	movs	r3, #34	; 0x22
 800492e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004a88 <_strtod_l+0x598>
 8004932:	f8c9 3000 	str.w	r3, [r9]
 8004936:	f04f 0a00 	mov.w	sl, #0
 800493a:	9b07      	ldr	r3, [sp, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f43f ae16 	beq.w	800456e <_strtod_l+0x7e>
 8004942:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004944:	4648      	mov	r0, r9
 8004946:	f002 f90a 	bl	8006b5e <_Bfree>
 800494a:	9905      	ldr	r1, [sp, #20]
 800494c:	4648      	mov	r0, r9
 800494e:	f002 f906 	bl	8006b5e <_Bfree>
 8004952:	4641      	mov	r1, r8
 8004954:	4648      	mov	r0, r9
 8004956:	f002 f902 	bl	8006b5e <_Bfree>
 800495a:	9907      	ldr	r1, [sp, #28]
 800495c:	4648      	mov	r0, r9
 800495e:	f002 f8fe 	bl	8006b5e <_Bfree>
 8004962:	4621      	mov	r1, r4
 8004964:	4648      	mov	r0, r9
 8004966:	f002 f8fa 	bl	8006b5e <_Bfree>
 800496a:	e600      	b.n	800456e <_strtod_l+0x7e>
 800496c:	9a06      	ldr	r2, [sp, #24]
 800496e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004972:	4293      	cmp	r3, r2
 8004974:	dbba      	blt.n	80048ec <_strtod_l+0x3fc>
 8004976:	4d42      	ldr	r5, [pc, #264]	; (8004a80 <_strtod_l+0x590>)
 8004978:	f1c4 040f 	rsb	r4, r4, #15
 800497c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004980:	4652      	mov	r2, sl
 8004982:	465b      	mov	r3, fp
 8004984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004988:	f7fb fe56 	bl	8000638 <__aeabi_dmul>
 800498c:	9b06      	ldr	r3, [sp, #24]
 800498e:	1b1c      	subs	r4, r3, r4
 8004990:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004994:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004998:	e78d      	b.n	80048b6 <_strtod_l+0x3c6>
 800499a:	f113 0f16 	cmn.w	r3, #22
 800499e:	dba5      	blt.n	80048ec <_strtod_l+0x3fc>
 80049a0:	4a37      	ldr	r2, [pc, #220]	; (8004a80 <_strtod_l+0x590>)
 80049a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80049a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80049aa:	4650      	mov	r0, sl
 80049ac:	4659      	mov	r1, fp
 80049ae:	f7fb ff6d 	bl	800088c <__aeabi_ddiv>
 80049b2:	e782      	b.n	80048ba <_strtod_l+0x3ca>
 80049b4:	2300      	movs	r3, #0
 80049b6:	4e33      	ldr	r6, [pc, #204]	; (8004a84 <_strtod_l+0x594>)
 80049b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80049bc:	4650      	mov	r0, sl
 80049be:	4659      	mov	r1, fp
 80049c0:	461d      	mov	r5, r3
 80049c2:	f1b8 0f01 	cmp.w	r8, #1
 80049c6:	dc21      	bgt.n	8004a0c <_strtod_l+0x51c>
 80049c8:	b10b      	cbz	r3, 80049ce <_strtod_l+0x4de>
 80049ca:	4682      	mov	sl, r0
 80049cc:	468b      	mov	fp, r1
 80049ce:	4b2d      	ldr	r3, [pc, #180]	; (8004a84 <_strtod_l+0x594>)
 80049d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80049d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80049d8:	4652      	mov	r2, sl
 80049da:	465b      	mov	r3, fp
 80049dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80049e0:	f7fb fe2a 	bl	8000638 <__aeabi_dmul>
 80049e4:	4b28      	ldr	r3, [pc, #160]	; (8004a88 <_strtod_l+0x598>)
 80049e6:	460a      	mov	r2, r1
 80049e8:	400b      	ands	r3, r1
 80049ea:	4928      	ldr	r1, [pc, #160]	; (8004a8c <_strtod_l+0x59c>)
 80049ec:	428b      	cmp	r3, r1
 80049ee:	4682      	mov	sl, r0
 80049f0:	d898      	bhi.n	8004924 <_strtod_l+0x434>
 80049f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80049f6:	428b      	cmp	r3, r1
 80049f8:	bf86      	itte	hi
 80049fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004a94 <_strtod_l+0x5a4>
 80049fe:	f04f 3aff 	movhi.w	sl, #4294967295
 8004a02:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004a06:	2300      	movs	r3, #0
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	e077      	b.n	8004afc <_strtod_l+0x60c>
 8004a0c:	f018 0f01 	tst.w	r8, #1
 8004a10:	d006      	beq.n	8004a20 <_strtod_l+0x530>
 8004a12:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f7fb fe0d 	bl	8000638 <__aeabi_dmul>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	3501      	adds	r5, #1
 8004a22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004a26:	e7cc      	b.n	80049c2 <_strtod_l+0x4d2>
 8004a28:	d0ed      	beq.n	8004a06 <_strtod_l+0x516>
 8004a2a:	f1c8 0800 	rsb	r8, r8, #0
 8004a2e:	f018 020f 	ands.w	r2, r8, #15
 8004a32:	d00a      	beq.n	8004a4a <_strtod_l+0x55a>
 8004a34:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <_strtod_l+0x590>)
 8004a36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a3a:	4650      	mov	r0, sl
 8004a3c:	4659      	mov	r1, fp
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f7fb ff23 	bl	800088c <__aeabi_ddiv>
 8004a46:	4682      	mov	sl, r0
 8004a48:	468b      	mov	fp, r1
 8004a4a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004a4e:	d0da      	beq.n	8004a06 <_strtod_l+0x516>
 8004a50:	f1b8 0f1f 	cmp.w	r8, #31
 8004a54:	dd20      	ble.n	8004a98 <_strtod_l+0x5a8>
 8004a56:	2400      	movs	r4, #0
 8004a58:	46a0      	mov	r8, r4
 8004a5a:	9407      	str	r4, [sp, #28]
 8004a5c:	9405      	str	r4, [sp, #20]
 8004a5e:	2322      	movs	r3, #34	; 0x22
 8004a60:	f04f 0a00 	mov.w	sl, #0
 8004a64:	f04f 0b00 	mov.w	fp, #0
 8004a68:	f8c9 3000 	str.w	r3, [r9]
 8004a6c:	e765      	b.n	800493a <_strtod_l+0x44a>
 8004a6e:	bf00      	nop
 8004a70:	08007acd 	.word	0x08007acd
 8004a74:	08007b5b 	.word	0x08007b5b
 8004a78:	08007ad5 	.word	0x08007ad5
 8004a7c:	08007b18 	.word	0x08007b18
 8004a80:	08007c00 	.word	0x08007c00
 8004a84:	08007bd8 	.word	0x08007bd8
 8004a88:	7ff00000 	.word	0x7ff00000
 8004a8c:	7ca00000 	.word	0x7ca00000
 8004a90:	fff80000 	.word	0xfff80000
 8004a94:	7fefffff 	.word	0x7fefffff
 8004a98:	f018 0310 	ands.w	r3, r8, #16
 8004a9c:	bf18      	it	ne
 8004a9e:	236a      	movne	r3, #106	; 0x6a
 8004aa0:	4da0      	ldr	r5, [pc, #640]	; (8004d24 <_strtod_l+0x834>)
 8004aa2:	9304      	str	r3, [sp, #16]
 8004aa4:	4650      	mov	r0, sl
 8004aa6:	4659      	mov	r1, fp
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f1b8 0f00 	cmp.w	r8, #0
 8004aae:	f300 810a 	bgt.w	8004cc6 <_strtod_l+0x7d6>
 8004ab2:	b10b      	cbz	r3, 8004ab8 <_strtod_l+0x5c8>
 8004ab4:	4682      	mov	sl, r0
 8004ab6:	468b      	mov	fp, r1
 8004ab8:	9b04      	ldr	r3, [sp, #16]
 8004aba:	b1bb      	cbz	r3, 8004aec <_strtod_l+0x5fc>
 8004abc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004ac0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	dd10      	ble.n	8004aec <_strtod_l+0x5fc>
 8004aca:	2b1f      	cmp	r3, #31
 8004acc:	f340 8107 	ble.w	8004cde <_strtod_l+0x7ee>
 8004ad0:	2b34      	cmp	r3, #52	; 0x34
 8004ad2:	bfde      	ittt	le
 8004ad4:	3b20      	suble	r3, #32
 8004ad6:	f04f 32ff 	movle.w	r2, #4294967295
 8004ada:	fa02 f303 	lslle.w	r3, r2, r3
 8004ade:	f04f 0a00 	mov.w	sl, #0
 8004ae2:	bfcc      	ite	gt
 8004ae4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004ae8:	ea03 0b01 	andle.w	fp, r3, r1
 8004aec:	2200      	movs	r2, #0
 8004aee:	2300      	movs	r3, #0
 8004af0:	4650      	mov	r0, sl
 8004af2:	4659      	mov	r1, fp
 8004af4:	f7fc f808 	bl	8000b08 <__aeabi_dcmpeq>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d1ac      	bne.n	8004a56 <_strtod_l+0x566>
 8004afc:	9b07      	ldr	r3, [sp, #28]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	9a05      	ldr	r2, [sp, #20]
 8004b02:	9908      	ldr	r1, [sp, #32]
 8004b04:	4623      	mov	r3, r4
 8004b06:	4648      	mov	r0, r9
 8004b08:	f002 f87b 	bl	8006c02 <__s2b>
 8004b0c:	9007      	str	r0, [sp, #28]
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	f43f af08 	beq.w	8004924 <_strtod_l+0x434>
 8004b14:	9a06      	ldr	r2, [sp, #24]
 8004b16:	9b06      	ldr	r3, [sp, #24]
 8004b18:	2a00      	cmp	r2, #0
 8004b1a:	f1c3 0300 	rsb	r3, r3, #0
 8004b1e:	bfa8      	it	ge
 8004b20:	2300      	movge	r3, #0
 8004b22:	930e      	str	r3, [sp, #56]	; 0x38
 8004b24:	2400      	movs	r4, #0
 8004b26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004b2a:	9316      	str	r3, [sp, #88]	; 0x58
 8004b2c:	46a0      	mov	r8, r4
 8004b2e:	9b07      	ldr	r3, [sp, #28]
 8004b30:	4648      	mov	r0, r9
 8004b32:	6859      	ldr	r1, [r3, #4]
 8004b34:	f001 ffdf 	bl	8006af6 <_Balloc>
 8004b38:	9005      	str	r0, [sp, #20]
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	f43f aef6 	beq.w	800492c <_strtod_l+0x43c>
 8004b40:	9b07      	ldr	r3, [sp, #28]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	3202      	adds	r2, #2
 8004b46:	f103 010c 	add.w	r1, r3, #12
 8004b4a:	0092      	lsls	r2, r2, #2
 8004b4c:	300c      	adds	r0, #12
 8004b4e:	f001 ffc7 	bl	8006ae0 <memcpy>
 8004b52:	aa1e      	add	r2, sp, #120	; 0x78
 8004b54:	a91d      	add	r1, sp, #116	; 0x74
 8004b56:	ec4b ab10 	vmov	d0, sl, fp
 8004b5a:	4648      	mov	r0, r9
 8004b5c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004b60:	f002 fb0a 	bl	8007178 <__d2b>
 8004b64:	901c      	str	r0, [sp, #112]	; 0x70
 8004b66:	2800      	cmp	r0, #0
 8004b68:	f43f aee0 	beq.w	800492c <_strtod_l+0x43c>
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	4648      	mov	r0, r9
 8004b70:	f002 f8d3 	bl	8006d1a <__i2b>
 8004b74:	4680      	mov	r8, r0
 8004b76:	2800      	cmp	r0, #0
 8004b78:	f43f aed8 	beq.w	800492c <_strtod_l+0x43c>
 8004b7c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004b7e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004b80:	2e00      	cmp	r6, #0
 8004b82:	bfab      	itete	ge
 8004b84:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004b86:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004b88:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004b8a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8004b8c:	bfac      	ite	ge
 8004b8e:	18f7      	addge	r7, r6, r3
 8004b90:	1b9d      	sublt	r5, r3, r6
 8004b92:	9b04      	ldr	r3, [sp, #16]
 8004b94:	1af6      	subs	r6, r6, r3
 8004b96:	4416      	add	r6, r2
 8004b98:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <_strtod_l+0x838>)
 8004b9a:	3e01      	subs	r6, #1
 8004b9c:	429e      	cmp	r6, r3
 8004b9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004ba2:	f280 80af 	bge.w	8004d04 <_strtod_l+0x814>
 8004ba6:	1b9b      	subs	r3, r3, r6
 8004ba8:	2b1f      	cmp	r3, #31
 8004baa:	eba2 0203 	sub.w	r2, r2, r3
 8004bae:	f04f 0101 	mov.w	r1, #1
 8004bb2:	f300 809b 	bgt.w	8004cec <_strtod_l+0x7fc>
 8004bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bba:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8004bc0:	18be      	adds	r6, r7, r2
 8004bc2:	9b04      	ldr	r3, [sp, #16]
 8004bc4:	42b7      	cmp	r7, r6
 8004bc6:	4415      	add	r5, r2
 8004bc8:	441d      	add	r5, r3
 8004bca:	463b      	mov	r3, r7
 8004bcc:	bfa8      	it	ge
 8004bce:	4633      	movge	r3, r6
 8004bd0:	42ab      	cmp	r3, r5
 8004bd2:	bfa8      	it	ge
 8004bd4:	462b      	movge	r3, r5
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bfc2      	ittt	gt
 8004bda:	1af6      	subgt	r6, r6, r3
 8004bdc:	1aed      	subgt	r5, r5, r3
 8004bde:	1aff      	subgt	r7, r7, r3
 8004be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004be2:	b1bb      	cbz	r3, 8004c14 <_strtod_l+0x724>
 8004be4:	4641      	mov	r1, r8
 8004be6:	461a      	mov	r2, r3
 8004be8:	4648      	mov	r0, r9
 8004bea:	f002 f935 	bl	8006e58 <__pow5mult>
 8004bee:	4680      	mov	r8, r0
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	f43f ae9b 	beq.w	800492c <_strtod_l+0x43c>
 8004bf6:	4601      	mov	r1, r0
 8004bf8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004bfa:	4648      	mov	r0, r9
 8004bfc:	f002 f896 	bl	8006d2c <__multiply>
 8004c00:	900c      	str	r0, [sp, #48]	; 0x30
 8004c02:	2800      	cmp	r0, #0
 8004c04:	f43f ae92 	beq.w	800492c <_strtod_l+0x43c>
 8004c08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c0a:	4648      	mov	r0, r9
 8004c0c:	f001 ffa7 	bl	8006b5e <_Bfree>
 8004c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c12:	931c      	str	r3, [sp, #112]	; 0x70
 8004c14:	2e00      	cmp	r6, #0
 8004c16:	dc7a      	bgt.n	8004d0e <_strtod_l+0x81e>
 8004c18:	9b06      	ldr	r3, [sp, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	dd08      	ble.n	8004c30 <_strtod_l+0x740>
 8004c1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004c20:	9905      	ldr	r1, [sp, #20]
 8004c22:	4648      	mov	r0, r9
 8004c24:	f002 f918 	bl	8006e58 <__pow5mult>
 8004c28:	9005      	str	r0, [sp, #20]
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	f43f ae7e 	beq.w	800492c <_strtod_l+0x43c>
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	dd08      	ble.n	8004c46 <_strtod_l+0x756>
 8004c34:	462a      	mov	r2, r5
 8004c36:	9905      	ldr	r1, [sp, #20]
 8004c38:	4648      	mov	r0, r9
 8004c3a:	f002 f95b 	bl	8006ef4 <__lshift>
 8004c3e:	9005      	str	r0, [sp, #20]
 8004c40:	2800      	cmp	r0, #0
 8004c42:	f43f ae73 	beq.w	800492c <_strtod_l+0x43c>
 8004c46:	2f00      	cmp	r7, #0
 8004c48:	dd08      	ble.n	8004c5c <_strtod_l+0x76c>
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	463a      	mov	r2, r7
 8004c4e:	4648      	mov	r0, r9
 8004c50:	f002 f950 	bl	8006ef4 <__lshift>
 8004c54:	4680      	mov	r8, r0
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f43f ae68 	beq.w	800492c <_strtod_l+0x43c>
 8004c5c:	9a05      	ldr	r2, [sp, #20]
 8004c5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c60:	4648      	mov	r0, r9
 8004c62:	f002 f9b5 	bl	8006fd0 <__mdiff>
 8004c66:	4604      	mov	r4, r0
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	f43f ae5f 	beq.w	800492c <_strtod_l+0x43c>
 8004c6e:	68c3      	ldr	r3, [r0, #12]
 8004c70:	930c      	str	r3, [sp, #48]	; 0x30
 8004c72:	2300      	movs	r3, #0
 8004c74:	60c3      	str	r3, [r0, #12]
 8004c76:	4641      	mov	r1, r8
 8004c78:	f002 f990 	bl	8006f9c <__mcmp>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	da55      	bge.n	8004d2c <_strtod_l+0x83c>
 8004c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c82:	b9e3      	cbnz	r3, 8004cbe <_strtod_l+0x7ce>
 8004c84:	f1ba 0f00 	cmp.w	sl, #0
 8004c88:	d119      	bne.n	8004cbe <_strtod_l+0x7ce>
 8004c8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c8e:	b9b3      	cbnz	r3, 8004cbe <_strtod_l+0x7ce>
 8004c90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c94:	0d1b      	lsrs	r3, r3, #20
 8004c96:	051b      	lsls	r3, r3, #20
 8004c98:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004c9c:	d90f      	bls.n	8004cbe <_strtod_l+0x7ce>
 8004c9e:	6963      	ldr	r3, [r4, #20]
 8004ca0:	b913      	cbnz	r3, 8004ca8 <_strtod_l+0x7b8>
 8004ca2:	6923      	ldr	r3, [r4, #16]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	dd0a      	ble.n	8004cbe <_strtod_l+0x7ce>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	2201      	movs	r2, #1
 8004cac:	4648      	mov	r0, r9
 8004cae:	f002 f921 	bl	8006ef4 <__lshift>
 8004cb2:	4641      	mov	r1, r8
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	f002 f971 	bl	8006f9c <__mcmp>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	dc67      	bgt.n	8004d8e <_strtod_l+0x89e>
 8004cbe:	9b04      	ldr	r3, [sp, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d171      	bne.n	8004da8 <_strtod_l+0x8b8>
 8004cc4:	e63d      	b.n	8004942 <_strtod_l+0x452>
 8004cc6:	f018 0f01 	tst.w	r8, #1
 8004cca:	d004      	beq.n	8004cd6 <_strtod_l+0x7e6>
 8004ccc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004cd0:	f7fb fcb2 	bl	8000638 <__aeabi_dmul>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004cda:	3508      	adds	r5, #8
 8004cdc:	e6e5      	b.n	8004aaa <_strtod_l+0x5ba>
 8004cde:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	ea03 0a0a 	and.w	sl, r3, sl
 8004cea:	e6ff      	b.n	8004aec <_strtod_l+0x5fc>
 8004cec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004cf0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004cf4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004cf8:	36e2      	adds	r6, #226	; 0xe2
 8004cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8004cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8004d00:	910f      	str	r1, [sp, #60]	; 0x3c
 8004d02:	e75d      	b.n	8004bc0 <_strtod_l+0x6d0>
 8004d04:	2300      	movs	r3, #0
 8004d06:	930a      	str	r3, [sp, #40]	; 0x28
 8004d08:	2301      	movs	r3, #1
 8004d0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d0c:	e758      	b.n	8004bc0 <_strtod_l+0x6d0>
 8004d0e:	4632      	mov	r2, r6
 8004d10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d12:	4648      	mov	r0, r9
 8004d14:	f002 f8ee 	bl	8006ef4 <__lshift>
 8004d18:	901c      	str	r0, [sp, #112]	; 0x70
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	f47f af7c 	bne.w	8004c18 <_strtod_l+0x728>
 8004d20:	e604      	b.n	800492c <_strtod_l+0x43c>
 8004d22:	bf00      	nop
 8004d24:	08007b30 	.word	0x08007b30
 8004d28:	fffffc02 	.word	0xfffffc02
 8004d2c:	465d      	mov	r5, fp
 8004d2e:	f040 8086 	bne.w	8004e3e <_strtod_l+0x94e>
 8004d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d38:	b32a      	cbz	r2, 8004d86 <_strtod_l+0x896>
 8004d3a:	4aaf      	ldr	r2, [pc, #700]	; (8004ff8 <_strtod_l+0xb08>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d153      	bne.n	8004de8 <_strtod_l+0x8f8>
 8004d40:	9b04      	ldr	r3, [sp, #16]
 8004d42:	4650      	mov	r0, sl
 8004d44:	b1d3      	cbz	r3, 8004d7c <_strtod_l+0x88c>
 8004d46:	4aad      	ldr	r2, [pc, #692]	; (8004ffc <_strtod_l+0xb0c>)
 8004d48:	402a      	ands	r2, r5
 8004d4a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8004d52:	d816      	bhi.n	8004d82 <_strtod_l+0x892>
 8004d54:	0d12      	lsrs	r2, r2, #20
 8004d56:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5e:	4298      	cmp	r0, r3
 8004d60:	d142      	bne.n	8004de8 <_strtod_l+0x8f8>
 8004d62:	4ba7      	ldr	r3, [pc, #668]	; (8005000 <_strtod_l+0xb10>)
 8004d64:	429d      	cmp	r5, r3
 8004d66:	d102      	bne.n	8004d6e <_strtod_l+0x87e>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f43f addf 	beq.w	800492c <_strtod_l+0x43c>
 8004d6e:	4ba3      	ldr	r3, [pc, #652]	; (8004ffc <_strtod_l+0xb0c>)
 8004d70:	402b      	ands	r3, r5
 8004d72:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004d76:	f04f 0a00 	mov.w	sl, #0
 8004d7a:	e7a0      	b.n	8004cbe <_strtod_l+0x7ce>
 8004d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d80:	e7ed      	b.n	8004d5e <_strtod_l+0x86e>
 8004d82:	460b      	mov	r3, r1
 8004d84:	e7eb      	b.n	8004d5e <_strtod_l+0x86e>
 8004d86:	bb7b      	cbnz	r3, 8004de8 <_strtod_l+0x8f8>
 8004d88:	f1ba 0f00 	cmp.w	sl, #0
 8004d8c:	d12c      	bne.n	8004de8 <_strtod_l+0x8f8>
 8004d8e:	9904      	ldr	r1, [sp, #16]
 8004d90:	4a9a      	ldr	r2, [pc, #616]	; (8004ffc <_strtod_l+0xb0c>)
 8004d92:	465b      	mov	r3, fp
 8004d94:	b1f1      	cbz	r1, 8004dd4 <_strtod_l+0x8e4>
 8004d96:	ea02 010b 	and.w	r1, r2, fp
 8004d9a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004d9e:	dc19      	bgt.n	8004dd4 <_strtod_l+0x8e4>
 8004da0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004da4:	f77f ae5b 	ble.w	8004a5e <_strtod_l+0x56e>
 8004da8:	4a96      	ldr	r2, [pc, #600]	; (8005004 <_strtod_l+0xb14>)
 8004daa:	2300      	movs	r3, #0
 8004dac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004db0:	4650      	mov	r0, sl
 8004db2:	4659      	mov	r1, fp
 8004db4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004db8:	f7fb fc3e 	bl	8000638 <__aeabi_dmul>
 8004dbc:	4682      	mov	sl, r0
 8004dbe:	468b      	mov	fp, r1
 8004dc0:	2900      	cmp	r1, #0
 8004dc2:	f47f adbe 	bne.w	8004942 <_strtod_l+0x452>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	f47f adbb 	bne.w	8004942 <_strtod_l+0x452>
 8004dcc:	2322      	movs	r3, #34	; 0x22
 8004dce:	f8c9 3000 	str.w	r3, [r9]
 8004dd2:	e5b6      	b.n	8004942 <_strtod_l+0x452>
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004dda:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004dde:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004de2:	f04f 3aff 	mov.w	sl, #4294967295
 8004de6:	e76a      	b.n	8004cbe <_strtod_l+0x7ce>
 8004de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dea:	b193      	cbz	r3, 8004e12 <_strtod_l+0x922>
 8004dec:	422b      	tst	r3, r5
 8004dee:	f43f af66 	beq.w	8004cbe <_strtod_l+0x7ce>
 8004df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004df4:	9a04      	ldr	r2, [sp, #16]
 8004df6:	4650      	mov	r0, sl
 8004df8:	4659      	mov	r1, fp
 8004dfa:	b173      	cbz	r3, 8004e1a <_strtod_l+0x92a>
 8004dfc:	f7ff fb5c 	bl	80044b8 <sulp>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e08:	f7fb fa60 	bl	80002cc <__adddf3>
 8004e0c:	4682      	mov	sl, r0
 8004e0e:	468b      	mov	fp, r1
 8004e10:	e755      	b.n	8004cbe <_strtod_l+0x7ce>
 8004e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e14:	ea13 0f0a 	tst.w	r3, sl
 8004e18:	e7e9      	b.n	8004dee <_strtod_l+0x8fe>
 8004e1a:	f7ff fb4d 	bl	80044b8 <sulp>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e26:	f7fb fa4f 	bl	80002c8 <__aeabi_dsub>
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	4682      	mov	sl, r0
 8004e30:	468b      	mov	fp, r1
 8004e32:	f7fb fe69 	bl	8000b08 <__aeabi_dcmpeq>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f47f ae11 	bne.w	8004a5e <_strtod_l+0x56e>
 8004e3c:	e73f      	b.n	8004cbe <_strtod_l+0x7ce>
 8004e3e:	4641      	mov	r1, r8
 8004e40:	4620      	mov	r0, r4
 8004e42:	f002 f9e8 	bl	8007216 <__ratio>
 8004e46:	ec57 6b10 	vmov	r6, r7, d0
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e50:	ee10 0a10 	vmov	r0, s0
 8004e54:	4639      	mov	r1, r7
 8004e56:	f7fb fe6b 	bl	8000b30 <__aeabi_dcmple>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d077      	beq.n	8004f4e <_strtod_l+0xa5e>
 8004e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d04a      	beq.n	8004efa <_strtod_l+0xa0a>
 8004e64:	4b68      	ldr	r3, [pc, #416]	; (8005008 <_strtod_l+0xb18>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e6c:	4f66      	ldr	r7, [pc, #408]	; (8005008 <_strtod_l+0xb18>)
 8004e6e:	2600      	movs	r6, #0
 8004e70:	4b62      	ldr	r3, [pc, #392]	; (8004ffc <_strtod_l+0xb0c>)
 8004e72:	402b      	ands	r3, r5
 8004e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e78:	4b64      	ldr	r3, [pc, #400]	; (800500c <_strtod_l+0xb1c>)
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	f040 80ce 	bne.w	800501c <_strtod_l+0xb2c>
 8004e80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e88:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8004e8c:	ec4b ab10 	vmov	d0, sl, fp
 8004e90:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004e94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e98:	f002 f8f8 	bl	800708c <__ulp>
 8004e9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ea0:	ec53 2b10 	vmov	r2, r3, d0
 8004ea4:	f7fb fbc8 	bl	8000638 <__aeabi_dmul>
 8004ea8:	4652      	mov	r2, sl
 8004eaa:	465b      	mov	r3, fp
 8004eac:	f7fb fa0e 	bl	80002cc <__adddf3>
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4952      	ldr	r1, [pc, #328]	; (8004ffc <_strtod_l+0xb0c>)
 8004eb4:	4a56      	ldr	r2, [pc, #344]	; (8005010 <_strtod_l+0xb20>)
 8004eb6:	4019      	ands	r1, r3
 8004eb8:	4291      	cmp	r1, r2
 8004eba:	4682      	mov	sl, r0
 8004ebc:	d95b      	bls.n	8004f76 <_strtod_l+0xa86>
 8004ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d103      	bne.n	8004ed0 <_strtod_l+0x9e0>
 8004ec8:	9b08      	ldr	r3, [sp, #32]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	f43f ad2e 	beq.w	800492c <_strtod_l+0x43c>
 8004ed0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005000 <_strtod_l+0xb10>
 8004ed4:	f04f 3aff 	mov.w	sl, #4294967295
 8004ed8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004eda:	4648      	mov	r0, r9
 8004edc:	f001 fe3f 	bl	8006b5e <_Bfree>
 8004ee0:	9905      	ldr	r1, [sp, #20]
 8004ee2:	4648      	mov	r0, r9
 8004ee4:	f001 fe3b 	bl	8006b5e <_Bfree>
 8004ee8:	4641      	mov	r1, r8
 8004eea:	4648      	mov	r0, r9
 8004eec:	f001 fe37 	bl	8006b5e <_Bfree>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4648      	mov	r0, r9
 8004ef4:	f001 fe33 	bl	8006b5e <_Bfree>
 8004ef8:	e619      	b.n	8004b2e <_strtod_l+0x63e>
 8004efa:	f1ba 0f00 	cmp.w	sl, #0
 8004efe:	d11a      	bne.n	8004f36 <_strtod_l+0xa46>
 8004f00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f04:	b9eb      	cbnz	r3, 8004f42 <_strtod_l+0xa52>
 8004f06:	2200      	movs	r2, #0
 8004f08:	4b3f      	ldr	r3, [pc, #252]	; (8005008 <_strtod_l+0xb18>)
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	4639      	mov	r1, r7
 8004f0e:	f7fb fe05 	bl	8000b1c <__aeabi_dcmplt>
 8004f12:	b9c8      	cbnz	r0, 8004f48 <_strtod_l+0xa58>
 8004f14:	4630      	mov	r0, r6
 8004f16:	4639      	mov	r1, r7
 8004f18:	2200      	movs	r2, #0
 8004f1a:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <_strtod_l+0xb24>)
 8004f1c:	f7fb fb8c 	bl	8000638 <__aeabi_dmul>
 8004f20:	4606      	mov	r6, r0
 8004f22:	460f      	mov	r7, r1
 8004f24:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004f28:	9618      	str	r6, [sp, #96]	; 0x60
 8004f2a:	9319      	str	r3, [sp, #100]	; 0x64
 8004f2c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004f30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f34:	e79c      	b.n	8004e70 <_strtod_l+0x980>
 8004f36:	f1ba 0f01 	cmp.w	sl, #1
 8004f3a:	d102      	bne.n	8004f42 <_strtod_l+0xa52>
 8004f3c:	2d00      	cmp	r5, #0
 8004f3e:	f43f ad8e 	beq.w	8004a5e <_strtod_l+0x56e>
 8004f42:	2200      	movs	r2, #0
 8004f44:	4b34      	ldr	r3, [pc, #208]	; (8005018 <_strtod_l+0xb28>)
 8004f46:	e78f      	b.n	8004e68 <_strtod_l+0x978>
 8004f48:	2600      	movs	r6, #0
 8004f4a:	4f32      	ldr	r7, [pc, #200]	; (8005014 <_strtod_l+0xb24>)
 8004f4c:	e7ea      	b.n	8004f24 <_strtod_l+0xa34>
 8004f4e:	4b31      	ldr	r3, [pc, #196]	; (8005014 <_strtod_l+0xb24>)
 8004f50:	4630      	mov	r0, r6
 8004f52:	4639      	mov	r1, r7
 8004f54:	2200      	movs	r2, #0
 8004f56:	f7fb fb6f 	bl	8000638 <__aeabi_dmul>
 8004f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	460f      	mov	r7, r1
 8004f60:	b933      	cbnz	r3, 8004f70 <_strtod_l+0xa80>
 8004f62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f66:	9010      	str	r0, [sp, #64]	; 0x40
 8004f68:	9311      	str	r3, [sp, #68]	; 0x44
 8004f6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f6e:	e7df      	b.n	8004f30 <_strtod_l+0xa40>
 8004f70:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8004f74:	e7f9      	b.n	8004f6a <_strtod_l+0xa7a>
 8004f76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004f7a:	9b04      	ldr	r3, [sp, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1ab      	bne.n	8004ed8 <_strtod_l+0x9e8>
 8004f80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004f84:	0d1b      	lsrs	r3, r3, #20
 8004f86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f88:	051b      	lsls	r3, r3, #20
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	465d      	mov	r5, fp
 8004f8e:	d1a3      	bne.n	8004ed8 <_strtod_l+0x9e8>
 8004f90:	4639      	mov	r1, r7
 8004f92:	4630      	mov	r0, r6
 8004f94:	f7fb fe00 	bl	8000b98 <__aeabi_d2iz>
 8004f98:	f7fb fae4 	bl	8000564 <__aeabi_i2d>
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f7fb f990 	bl	80002c8 <__aeabi_dsub>
 8004fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004faa:	4606      	mov	r6, r0
 8004fac:	460f      	mov	r7, r1
 8004fae:	b933      	cbnz	r3, 8004fbe <_strtod_l+0xace>
 8004fb0:	f1ba 0f00 	cmp.w	sl, #0
 8004fb4:	d103      	bne.n	8004fbe <_strtod_l+0xace>
 8004fb6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	d06d      	beq.n	800509a <_strtod_l+0xbaa>
 8004fbe:	a30a      	add	r3, pc, #40	; (adr r3, 8004fe8 <_strtod_l+0xaf8>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	4639      	mov	r1, r7
 8004fc8:	f7fb fda8 	bl	8000b1c <__aeabi_dcmplt>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	f47f acb8 	bne.w	8004942 <_strtod_l+0x452>
 8004fd2:	a307      	add	r3, pc, #28	; (adr r3, 8004ff0 <_strtod_l+0xb00>)
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	4630      	mov	r0, r6
 8004fda:	4639      	mov	r1, r7
 8004fdc:	f7fb fdbc 	bl	8000b58 <__aeabi_dcmpgt>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	f43f af79 	beq.w	8004ed8 <_strtod_l+0x9e8>
 8004fe6:	e4ac      	b.n	8004942 <_strtod_l+0x452>
 8004fe8:	94a03595 	.word	0x94a03595
 8004fec:	3fdfffff 	.word	0x3fdfffff
 8004ff0:	35afe535 	.word	0x35afe535
 8004ff4:	3fe00000 	.word	0x3fe00000
 8004ff8:	000fffff 	.word	0x000fffff
 8004ffc:	7ff00000 	.word	0x7ff00000
 8005000:	7fefffff 	.word	0x7fefffff
 8005004:	39500000 	.word	0x39500000
 8005008:	3ff00000 	.word	0x3ff00000
 800500c:	7fe00000 	.word	0x7fe00000
 8005010:	7c9fffff 	.word	0x7c9fffff
 8005014:	3fe00000 	.word	0x3fe00000
 8005018:	bff00000 	.word	0xbff00000
 800501c:	9b04      	ldr	r3, [sp, #16]
 800501e:	b333      	cbz	r3, 800506e <_strtod_l+0xb7e>
 8005020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005022:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005026:	d822      	bhi.n	800506e <_strtod_l+0xb7e>
 8005028:	a327      	add	r3, pc, #156	; (adr r3, 80050c8 <_strtod_l+0xbd8>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	4630      	mov	r0, r6
 8005030:	4639      	mov	r1, r7
 8005032:	f7fb fd7d 	bl	8000b30 <__aeabi_dcmple>
 8005036:	b1a0      	cbz	r0, 8005062 <_strtod_l+0xb72>
 8005038:	4639      	mov	r1, r7
 800503a:	4630      	mov	r0, r6
 800503c:	f7fb fdd4 	bl	8000be8 <__aeabi_d2uiz>
 8005040:	2800      	cmp	r0, #0
 8005042:	bf08      	it	eq
 8005044:	2001      	moveq	r0, #1
 8005046:	f7fb fa7d 	bl	8000544 <__aeabi_ui2d>
 800504a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800504c:	4606      	mov	r6, r0
 800504e:	460f      	mov	r7, r1
 8005050:	bb03      	cbnz	r3, 8005094 <_strtod_l+0xba4>
 8005052:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005056:	9012      	str	r0, [sp, #72]	; 0x48
 8005058:	9313      	str	r3, [sp, #76]	; 0x4c
 800505a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800505e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005066:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	930b      	str	r3, [sp, #44]	; 0x2c
 800506e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005072:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005076:	f002 f809 	bl	800708c <__ulp>
 800507a:	4650      	mov	r0, sl
 800507c:	ec53 2b10 	vmov	r2, r3, d0
 8005080:	4659      	mov	r1, fp
 8005082:	f7fb fad9 	bl	8000638 <__aeabi_dmul>
 8005086:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800508a:	f7fb f91f 	bl	80002cc <__adddf3>
 800508e:	4682      	mov	sl, r0
 8005090:	468b      	mov	fp, r1
 8005092:	e772      	b.n	8004f7a <_strtod_l+0xa8a>
 8005094:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005098:	e7df      	b.n	800505a <_strtod_l+0xb6a>
 800509a:	a30d      	add	r3, pc, #52	; (adr r3, 80050d0 <_strtod_l+0xbe0>)
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f7fb fd3c 	bl	8000b1c <__aeabi_dcmplt>
 80050a4:	e79c      	b.n	8004fe0 <_strtod_l+0xaf0>
 80050a6:	2300      	movs	r3, #0
 80050a8:	930d      	str	r3, [sp, #52]	; 0x34
 80050aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80050ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	f7ff ba61 	b.w	8004576 <_strtod_l+0x86>
 80050b4:	2b65      	cmp	r3, #101	; 0x65
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	f43f ab4e 	beq.w	800475a <_strtod_l+0x26a>
 80050be:	2101      	movs	r1, #1
 80050c0:	4614      	mov	r4, r2
 80050c2:	9104      	str	r1, [sp, #16]
 80050c4:	f7ff bacb 	b.w	800465e <_strtod_l+0x16e>
 80050c8:	ffc00000 	.word	0xffc00000
 80050cc:	41dfffff 	.word	0x41dfffff
 80050d0:	94a03595 	.word	0x94a03595
 80050d4:	3fcfffff 	.word	0x3fcfffff

080050d8 <_strtod_r>:
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <_strtod_r+0x18>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	b410      	push	{r4}
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	4c04      	ldr	r4, [pc, #16]	; (80050f4 <_strtod_r+0x1c>)
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bf08      	it	eq
 80050e6:	4623      	moveq	r3, r4
 80050e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ec:	f7ff ba00 	b.w	80044f0 <_strtod_l>
 80050f0:	2000000c 	.word	0x2000000c
 80050f4:	20000070 	.word	0x20000070

080050f8 <_strtol_l.isra.0>:
 80050f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	4680      	mov	r8, r0
 80050fe:	4689      	mov	r9, r1
 8005100:	4692      	mov	sl, r2
 8005102:	461e      	mov	r6, r3
 8005104:	460f      	mov	r7, r1
 8005106:	463d      	mov	r5, r7
 8005108:	9808      	ldr	r0, [sp, #32]
 800510a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800510e:	f001 fc55 	bl	80069bc <__locale_ctype_ptr_l>
 8005112:	4420      	add	r0, r4
 8005114:	7843      	ldrb	r3, [r0, #1]
 8005116:	f013 0308 	ands.w	r3, r3, #8
 800511a:	d132      	bne.n	8005182 <_strtol_l.isra.0+0x8a>
 800511c:	2c2d      	cmp	r4, #45	; 0x2d
 800511e:	d132      	bne.n	8005186 <_strtol_l.isra.0+0x8e>
 8005120:	787c      	ldrb	r4, [r7, #1]
 8005122:	1cbd      	adds	r5, r7, #2
 8005124:	2201      	movs	r2, #1
 8005126:	2e00      	cmp	r6, #0
 8005128:	d05d      	beq.n	80051e6 <_strtol_l.isra.0+0xee>
 800512a:	2e10      	cmp	r6, #16
 800512c:	d109      	bne.n	8005142 <_strtol_l.isra.0+0x4a>
 800512e:	2c30      	cmp	r4, #48	; 0x30
 8005130:	d107      	bne.n	8005142 <_strtol_l.isra.0+0x4a>
 8005132:	782b      	ldrb	r3, [r5, #0]
 8005134:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005138:	2b58      	cmp	r3, #88	; 0x58
 800513a:	d14f      	bne.n	80051dc <_strtol_l.isra.0+0xe4>
 800513c:	786c      	ldrb	r4, [r5, #1]
 800513e:	2610      	movs	r6, #16
 8005140:	3502      	adds	r5, #2
 8005142:	2a00      	cmp	r2, #0
 8005144:	bf14      	ite	ne
 8005146:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800514a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800514e:	2700      	movs	r7, #0
 8005150:	fbb1 fcf6 	udiv	ip, r1, r6
 8005154:	4638      	mov	r0, r7
 8005156:	fb06 1e1c 	mls	lr, r6, ip, r1
 800515a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800515e:	2b09      	cmp	r3, #9
 8005160:	d817      	bhi.n	8005192 <_strtol_l.isra.0+0x9a>
 8005162:	461c      	mov	r4, r3
 8005164:	42a6      	cmp	r6, r4
 8005166:	dd23      	ble.n	80051b0 <_strtol_l.isra.0+0xb8>
 8005168:	1c7b      	adds	r3, r7, #1
 800516a:	d007      	beq.n	800517c <_strtol_l.isra.0+0x84>
 800516c:	4584      	cmp	ip, r0
 800516e:	d31c      	bcc.n	80051aa <_strtol_l.isra.0+0xb2>
 8005170:	d101      	bne.n	8005176 <_strtol_l.isra.0+0x7e>
 8005172:	45a6      	cmp	lr, r4
 8005174:	db19      	blt.n	80051aa <_strtol_l.isra.0+0xb2>
 8005176:	fb00 4006 	mla	r0, r0, r6, r4
 800517a:	2701      	movs	r7, #1
 800517c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005180:	e7eb      	b.n	800515a <_strtol_l.isra.0+0x62>
 8005182:	462f      	mov	r7, r5
 8005184:	e7bf      	b.n	8005106 <_strtol_l.isra.0+0xe>
 8005186:	2c2b      	cmp	r4, #43	; 0x2b
 8005188:	bf04      	itt	eq
 800518a:	1cbd      	addeq	r5, r7, #2
 800518c:	787c      	ldrbeq	r4, [r7, #1]
 800518e:	461a      	mov	r2, r3
 8005190:	e7c9      	b.n	8005126 <_strtol_l.isra.0+0x2e>
 8005192:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005196:	2b19      	cmp	r3, #25
 8005198:	d801      	bhi.n	800519e <_strtol_l.isra.0+0xa6>
 800519a:	3c37      	subs	r4, #55	; 0x37
 800519c:	e7e2      	b.n	8005164 <_strtol_l.isra.0+0x6c>
 800519e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80051a2:	2b19      	cmp	r3, #25
 80051a4:	d804      	bhi.n	80051b0 <_strtol_l.isra.0+0xb8>
 80051a6:	3c57      	subs	r4, #87	; 0x57
 80051a8:	e7dc      	b.n	8005164 <_strtol_l.isra.0+0x6c>
 80051aa:	f04f 37ff 	mov.w	r7, #4294967295
 80051ae:	e7e5      	b.n	800517c <_strtol_l.isra.0+0x84>
 80051b0:	1c7b      	adds	r3, r7, #1
 80051b2:	d108      	bne.n	80051c6 <_strtol_l.isra.0+0xce>
 80051b4:	2322      	movs	r3, #34	; 0x22
 80051b6:	f8c8 3000 	str.w	r3, [r8]
 80051ba:	4608      	mov	r0, r1
 80051bc:	f1ba 0f00 	cmp.w	sl, #0
 80051c0:	d107      	bne.n	80051d2 <_strtol_l.isra.0+0xda>
 80051c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c6:	b102      	cbz	r2, 80051ca <_strtol_l.isra.0+0xd2>
 80051c8:	4240      	negs	r0, r0
 80051ca:	f1ba 0f00 	cmp.w	sl, #0
 80051ce:	d0f8      	beq.n	80051c2 <_strtol_l.isra.0+0xca>
 80051d0:	b10f      	cbz	r7, 80051d6 <_strtol_l.isra.0+0xde>
 80051d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80051d6:	f8ca 9000 	str.w	r9, [sl]
 80051da:	e7f2      	b.n	80051c2 <_strtol_l.isra.0+0xca>
 80051dc:	2430      	movs	r4, #48	; 0x30
 80051de:	2e00      	cmp	r6, #0
 80051e0:	d1af      	bne.n	8005142 <_strtol_l.isra.0+0x4a>
 80051e2:	2608      	movs	r6, #8
 80051e4:	e7ad      	b.n	8005142 <_strtol_l.isra.0+0x4a>
 80051e6:	2c30      	cmp	r4, #48	; 0x30
 80051e8:	d0a3      	beq.n	8005132 <_strtol_l.isra.0+0x3a>
 80051ea:	260a      	movs	r6, #10
 80051ec:	e7a9      	b.n	8005142 <_strtol_l.isra.0+0x4a>
	...

080051f0 <_strtol_r>:
 80051f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051f2:	4c06      	ldr	r4, [pc, #24]	; (800520c <_strtol_r+0x1c>)
 80051f4:	4d06      	ldr	r5, [pc, #24]	; (8005210 <_strtol_r+0x20>)
 80051f6:	6824      	ldr	r4, [r4, #0]
 80051f8:	6a24      	ldr	r4, [r4, #32]
 80051fa:	2c00      	cmp	r4, #0
 80051fc:	bf08      	it	eq
 80051fe:	462c      	moveq	r4, r5
 8005200:	9400      	str	r4, [sp, #0]
 8005202:	f7ff ff79 	bl	80050f8 <_strtol_l.isra.0>
 8005206:	b003      	add	sp, #12
 8005208:	bd30      	pop	{r4, r5, pc}
 800520a:	bf00      	nop
 800520c:	2000000c 	.word	0x2000000c
 8005210:	20000070 	.word	0x20000070

08005214 <__swbuf_r>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	460e      	mov	r6, r1
 8005218:	4614      	mov	r4, r2
 800521a:	4605      	mov	r5, r0
 800521c:	b118      	cbz	r0, 8005226 <__swbuf_r+0x12>
 800521e:	6983      	ldr	r3, [r0, #24]
 8005220:	b90b      	cbnz	r3, 8005226 <__swbuf_r+0x12>
 8005222:	f000 ffff 	bl	8006224 <__sinit>
 8005226:	4b21      	ldr	r3, [pc, #132]	; (80052ac <__swbuf_r+0x98>)
 8005228:	429c      	cmp	r4, r3
 800522a:	d12a      	bne.n	8005282 <__swbuf_r+0x6e>
 800522c:	686c      	ldr	r4, [r5, #4]
 800522e:	69a3      	ldr	r3, [r4, #24]
 8005230:	60a3      	str	r3, [r4, #8]
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	071a      	lsls	r2, r3, #28
 8005236:	d52e      	bpl.n	8005296 <__swbuf_r+0x82>
 8005238:	6923      	ldr	r3, [r4, #16]
 800523a:	b363      	cbz	r3, 8005296 <__swbuf_r+0x82>
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	6820      	ldr	r0, [r4, #0]
 8005240:	1ac0      	subs	r0, r0, r3
 8005242:	6963      	ldr	r3, [r4, #20]
 8005244:	b2f6      	uxtb	r6, r6
 8005246:	4283      	cmp	r3, r0
 8005248:	4637      	mov	r7, r6
 800524a:	dc04      	bgt.n	8005256 <__swbuf_r+0x42>
 800524c:	4621      	mov	r1, r4
 800524e:	4628      	mov	r0, r5
 8005250:	f000 ff6c 	bl	800612c <_fflush_r>
 8005254:	bb28      	cbnz	r0, 80052a2 <__swbuf_r+0x8e>
 8005256:	68a3      	ldr	r3, [r4, #8]
 8005258:	3b01      	subs	r3, #1
 800525a:	60a3      	str	r3, [r4, #8]
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	6022      	str	r2, [r4, #0]
 8005262:	701e      	strb	r6, [r3, #0]
 8005264:	6963      	ldr	r3, [r4, #20]
 8005266:	3001      	adds	r0, #1
 8005268:	4283      	cmp	r3, r0
 800526a:	d004      	beq.n	8005276 <__swbuf_r+0x62>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	07db      	lsls	r3, r3, #31
 8005270:	d519      	bpl.n	80052a6 <__swbuf_r+0x92>
 8005272:	2e0a      	cmp	r6, #10
 8005274:	d117      	bne.n	80052a6 <__swbuf_r+0x92>
 8005276:	4621      	mov	r1, r4
 8005278:	4628      	mov	r0, r5
 800527a:	f000 ff57 	bl	800612c <_fflush_r>
 800527e:	b190      	cbz	r0, 80052a6 <__swbuf_r+0x92>
 8005280:	e00f      	b.n	80052a2 <__swbuf_r+0x8e>
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <__swbuf_r+0x9c>)
 8005284:	429c      	cmp	r4, r3
 8005286:	d101      	bne.n	800528c <__swbuf_r+0x78>
 8005288:	68ac      	ldr	r4, [r5, #8]
 800528a:	e7d0      	b.n	800522e <__swbuf_r+0x1a>
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <__swbuf_r+0xa0>)
 800528e:	429c      	cmp	r4, r3
 8005290:	bf08      	it	eq
 8005292:	68ec      	ldreq	r4, [r5, #12]
 8005294:	e7cb      	b.n	800522e <__swbuf_r+0x1a>
 8005296:	4621      	mov	r1, r4
 8005298:	4628      	mov	r0, r5
 800529a:	f000 f80d 	bl	80052b8 <__swsetup_r>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d0cc      	beq.n	800523c <__swbuf_r+0x28>
 80052a2:	f04f 37ff 	mov.w	r7, #4294967295
 80052a6:	4638      	mov	r0, r7
 80052a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052aa:	bf00      	nop
 80052ac:	08007b88 	.word	0x08007b88
 80052b0:	08007ba8 	.word	0x08007ba8
 80052b4:	08007b68 	.word	0x08007b68

080052b8 <__swsetup_r>:
 80052b8:	4b32      	ldr	r3, [pc, #200]	; (8005384 <__swsetup_r+0xcc>)
 80052ba:	b570      	push	{r4, r5, r6, lr}
 80052bc:	681d      	ldr	r5, [r3, #0]
 80052be:	4606      	mov	r6, r0
 80052c0:	460c      	mov	r4, r1
 80052c2:	b125      	cbz	r5, 80052ce <__swsetup_r+0x16>
 80052c4:	69ab      	ldr	r3, [r5, #24]
 80052c6:	b913      	cbnz	r3, 80052ce <__swsetup_r+0x16>
 80052c8:	4628      	mov	r0, r5
 80052ca:	f000 ffab 	bl	8006224 <__sinit>
 80052ce:	4b2e      	ldr	r3, [pc, #184]	; (8005388 <__swsetup_r+0xd0>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	d10f      	bne.n	80052f4 <__swsetup_r+0x3c>
 80052d4:	686c      	ldr	r4, [r5, #4]
 80052d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052da:	b29a      	uxth	r2, r3
 80052dc:	0715      	lsls	r5, r2, #28
 80052de:	d42c      	bmi.n	800533a <__swsetup_r+0x82>
 80052e0:	06d0      	lsls	r0, r2, #27
 80052e2:	d411      	bmi.n	8005308 <__swsetup_r+0x50>
 80052e4:	2209      	movs	r2, #9
 80052e6:	6032      	str	r2, [r6, #0]
 80052e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295
 80052f2:	e03e      	b.n	8005372 <__swsetup_r+0xba>
 80052f4:	4b25      	ldr	r3, [pc, #148]	; (800538c <__swsetup_r+0xd4>)
 80052f6:	429c      	cmp	r4, r3
 80052f8:	d101      	bne.n	80052fe <__swsetup_r+0x46>
 80052fa:	68ac      	ldr	r4, [r5, #8]
 80052fc:	e7eb      	b.n	80052d6 <__swsetup_r+0x1e>
 80052fe:	4b24      	ldr	r3, [pc, #144]	; (8005390 <__swsetup_r+0xd8>)
 8005300:	429c      	cmp	r4, r3
 8005302:	bf08      	it	eq
 8005304:	68ec      	ldreq	r4, [r5, #12]
 8005306:	e7e6      	b.n	80052d6 <__swsetup_r+0x1e>
 8005308:	0751      	lsls	r1, r2, #29
 800530a:	d512      	bpl.n	8005332 <__swsetup_r+0x7a>
 800530c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800530e:	b141      	cbz	r1, 8005322 <__swsetup_r+0x6a>
 8005310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005314:	4299      	cmp	r1, r3
 8005316:	d002      	beq.n	800531e <__swsetup_r+0x66>
 8005318:	4630      	mov	r0, r6
 800531a:	f001 fff9 	bl	8007310 <_free_r>
 800531e:	2300      	movs	r3, #0
 8005320:	6363      	str	r3, [r4, #52]	; 0x34
 8005322:	89a3      	ldrh	r3, [r4, #12]
 8005324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	2300      	movs	r3, #0
 800532c:	6063      	str	r3, [r4, #4]
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	f043 0308 	orr.w	r3, r3, #8
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	b94b      	cbnz	r3, 8005352 <__swsetup_r+0x9a>
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005348:	d003      	beq.n	8005352 <__swsetup_r+0x9a>
 800534a:	4621      	mov	r1, r4
 800534c:	4630      	mov	r0, r6
 800534e:	f001 fb6d 	bl	8006a2c <__smakebuf_r>
 8005352:	89a2      	ldrh	r2, [r4, #12]
 8005354:	f012 0301 	ands.w	r3, r2, #1
 8005358:	d00c      	beq.n	8005374 <__swsetup_r+0xbc>
 800535a:	2300      	movs	r3, #0
 800535c:	60a3      	str	r3, [r4, #8]
 800535e:	6963      	ldr	r3, [r4, #20]
 8005360:	425b      	negs	r3, r3
 8005362:	61a3      	str	r3, [r4, #24]
 8005364:	6923      	ldr	r3, [r4, #16]
 8005366:	b953      	cbnz	r3, 800537e <__swsetup_r+0xc6>
 8005368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800536c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005370:	d1ba      	bne.n	80052e8 <__swsetup_r+0x30>
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	0792      	lsls	r2, r2, #30
 8005376:	bf58      	it	pl
 8005378:	6963      	ldrpl	r3, [r4, #20]
 800537a:	60a3      	str	r3, [r4, #8]
 800537c:	e7f2      	b.n	8005364 <__swsetup_r+0xac>
 800537e:	2000      	movs	r0, #0
 8005380:	e7f7      	b.n	8005372 <__swsetup_r+0xba>
 8005382:	bf00      	nop
 8005384:	2000000c 	.word	0x2000000c
 8005388:	08007b88 	.word	0x08007b88
 800538c:	08007ba8 	.word	0x08007ba8
 8005390:	08007b68 	.word	0x08007b68

08005394 <quorem>:
 8005394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005398:	6903      	ldr	r3, [r0, #16]
 800539a:	690c      	ldr	r4, [r1, #16]
 800539c:	42a3      	cmp	r3, r4
 800539e:	4680      	mov	r8, r0
 80053a0:	f2c0 8082 	blt.w	80054a8 <quorem+0x114>
 80053a4:	3c01      	subs	r4, #1
 80053a6:	f101 0714 	add.w	r7, r1, #20
 80053aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80053ae:	f100 0614 	add.w	r6, r0, #20
 80053b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80053b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80053ba:	eb06 030c 	add.w	r3, r6, ip
 80053be:	3501      	adds	r5, #1
 80053c0:	eb07 090c 	add.w	r9, r7, ip
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80053ca:	b395      	cbz	r5, 8005432 <quorem+0x9e>
 80053cc:	f04f 0a00 	mov.w	sl, #0
 80053d0:	4638      	mov	r0, r7
 80053d2:	46b6      	mov	lr, r6
 80053d4:	46d3      	mov	fp, sl
 80053d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80053da:	b293      	uxth	r3, r2
 80053dc:	fb05 a303 	mla	r3, r5, r3, sl
 80053e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	ebab 0303 	sub.w	r3, fp, r3
 80053ea:	0c12      	lsrs	r2, r2, #16
 80053ec:	f8de b000 	ldr.w	fp, [lr]
 80053f0:	fb05 a202 	mla	r2, r5, r2, sl
 80053f4:	fa13 f38b 	uxtah	r3, r3, fp
 80053f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80053fc:	fa1f fb82 	uxth.w	fp, r2
 8005400:	f8de 2000 	ldr.w	r2, [lr]
 8005404:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005408:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800540c:	b29b      	uxth	r3, r3
 800540e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005412:	4581      	cmp	r9, r0
 8005414:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005418:	f84e 3b04 	str.w	r3, [lr], #4
 800541c:	d2db      	bcs.n	80053d6 <quorem+0x42>
 800541e:	f856 300c 	ldr.w	r3, [r6, ip]
 8005422:	b933      	cbnz	r3, 8005432 <quorem+0x9e>
 8005424:	9b01      	ldr	r3, [sp, #4]
 8005426:	3b04      	subs	r3, #4
 8005428:	429e      	cmp	r6, r3
 800542a:	461a      	mov	r2, r3
 800542c:	d330      	bcc.n	8005490 <quorem+0xfc>
 800542e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005432:	4640      	mov	r0, r8
 8005434:	f001 fdb2 	bl	8006f9c <__mcmp>
 8005438:	2800      	cmp	r0, #0
 800543a:	db25      	blt.n	8005488 <quorem+0xf4>
 800543c:	3501      	adds	r5, #1
 800543e:	4630      	mov	r0, r6
 8005440:	f04f 0c00 	mov.w	ip, #0
 8005444:	f857 2b04 	ldr.w	r2, [r7], #4
 8005448:	f8d0 e000 	ldr.w	lr, [r0]
 800544c:	b293      	uxth	r3, r2
 800544e:	ebac 0303 	sub.w	r3, ip, r3
 8005452:	0c12      	lsrs	r2, r2, #16
 8005454:	fa13 f38e 	uxtah	r3, r3, lr
 8005458:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800545c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005460:	b29b      	uxth	r3, r3
 8005462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005466:	45b9      	cmp	r9, r7
 8005468:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800546c:	f840 3b04 	str.w	r3, [r0], #4
 8005470:	d2e8      	bcs.n	8005444 <quorem+0xb0>
 8005472:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005476:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800547a:	b92a      	cbnz	r2, 8005488 <quorem+0xf4>
 800547c:	3b04      	subs	r3, #4
 800547e:	429e      	cmp	r6, r3
 8005480:	461a      	mov	r2, r3
 8005482:	d30b      	bcc.n	800549c <quorem+0x108>
 8005484:	f8c8 4010 	str.w	r4, [r8, #16]
 8005488:	4628      	mov	r0, r5
 800548a:	b003      	add	sp, #12
 800548c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	3b04      	subs	r3, #4
 8005494:	2a00      	cmp	r2, #0
 8005496:	d1ca      	bne.n	800542e <quorem+0x9a>
 8005498:	3c01      	subs	r4, #1
 800549a:	e7c5      	b.n	8005428 <quorem+0x94>
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	3b04      	subs	r3, #4
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	d1ef      	bne.n	8005484 <quorem+0xf0>
 80054a4:	3c01      	subs	r4, #1
 80054a6:	e7ea      	b.n	800547e <quorem+0xea>
 80054a8:	2000      	movs	r0, #0
 80054aa:	e7ee      	b.n	800548a <quorem+0xf6>
 80054ac:	0000      	movs	r0, r0
	...

080054b0 <_dtoa_r>:
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	ec57 6b10 	vmov	r6, r7, d0
 80054b8:	b097      	sub	sp, #92	; 0x5c
 80054ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054bc:	9106      	str	r1, [sp, #24]
 80054be:	4604      	mov	r4, r0
 80054c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80054c2:	9312      	str	r3, [sp, #72]	; 0x48
 80054c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80054c8:	e9cd 6700 	strd	r6, r7, [sp]
 80054cc:	b93d      	cbnz	r5, 80054de <_dtoa_r+0x2e>
 80054ce:	2010      	movs	r0, #16
 80054d0:	f001 faec 	bl	8006aac <malloc>
 80054d4:	6260      	str	r0, [r4, #36]	; 0x24
 80054d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054da:	6005      	str	r5, [r0, #0]
 80054dc:	60c5      	str	r5, [r0, #12]
 80054de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e0:	6819      	ldr	r1, [r3, #0]
 80054e2:	b151      	cbz	r1, 80054fa <_dtoa_r+0x4a>
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	604a      	str	r2, [r1, #4]
 80054e8:	2301      	movs	r3, #1
 80054ea:	4093      	lsls	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
 80054ee:	4620      	mov	r0, r4
 80054f0:	f001 fb35 	bl	8006b5e <_Bfree>
 80054f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	1e3b      	subs	r3, r7, #0
 80054fc:	bfbb      	ittet	lt
 80054fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005502:	9301      	strlt	r3, [sp, #4]
 8005504:	2300      	movge	r3, #0
 8005506:	2201      	movlt	r2, #1
 8005508:	bfac      	ite	ge
 800550a:	f8c8 3000 	strge.w	r3, [r8]
 800550e:	f8c8 2000 	strlt.w	r2, [r8]
 8005512:	4baf      	ldr	r3, [pc, #700]	; (80057d0 <_dtoa_r+0x320>)
 8005514:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005518:	ea33 0308 	bics.w	r3, r3, r8
 800551c:	d114      	bne.n	8005548 <_dtoa_r+0x98>
 800551e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005520:	f242 730f 	movw	r3, #9999	; 0x270f
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	9b00      	ldr	r3, [sp, #0]
 8005528:	b923      	cbnz	r3, 8005534 <_dtoa_r+0x84>
 800552a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800552e:	2800      	cmp	r0, #0
 8005530:	f000 8542 	beq.w	8005fb8 <_dtoa_r+0xb08>
 8005534:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005536:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80057e4 <_dtoa_r+0x334>
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 8544 	beq.w	8005fc8 <_dtoa_r+0xb18>
 8005540:	f10b 0303 	add.w	r3, fp, #3
 8005544:	f000 bd3e 	b.w	8005fc4 <_dtoa_r+0xb14>
 8005548:	e9dd 6700 	ldrd	r6, r7, [sp]
 800554c:	2200      	movs	r2, #0
 800554e:	2300      	movs	r3, #0
 8005550:	4630      	mov	r0, r6
 8005552:	4639      	mov	r1, r7
 8005554:	f7fb fad8 	bl	8000b08 <__aeabi_dcmpeq>
 8005558:	4681      	mov	r9, r0
 800555a:	b168      	cbz	r0, 8005578 <_dtoa_r+0xc8>
 800555c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800555e:	2301      	movs	r3, #1
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8524 	beq.w	8005fb2 <_dtoa_r+0xb02>
 800556a:	4b9a      	ldr	r3, [pc, #616]	; (80057d4 <_dtoa_r+0x324>)
 800556c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800556e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	f000 bd28 	b.w	8005fc8 <_dtoa_r+0xb18>
 8005578:	aa14      	add	r2, sp, #80	; 0x50
 800557a:	a915      	add	r1, sp, #84	; 0x54
 800557c:	ec47 6b10 	vmov	d0, r6, r7
 8005580:	4620      	mov	r0, r4
 8005582:	f001 fdf9 	bl	8007178 <__d2b>
 8005586:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800558a:	9004      	str	r0, [sp, #16]
 800558c:	2d00      	cmp	r5, #0
 800558e:	d07c      	beq.n	800568a <_dtoa_r+0x1da>
 8005590:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005594:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005598:	46b2      	mov	sl, r6
 800559a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800559e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80055a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80055a6:	2200      	movs	r2, #0
 80055a8:	4b8b      	ldr	r3, [pc, #556]	; (80057d8 <_dtoa_r+0x328>)
 80055aa:	4650      	mov	r0, sl
 80055ac:	4659      	mov	r1, fp
 80055ae:	f7fa fe8b 	bl	80002c8 <__aeabi_dsub>
 80055b2:	a381      	add	r3, pc, #516	; (adr r3, 80057b8 <_dtoa_r+0x308>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fb f83e 	bl	8000638 <__aeabi_dmul>
 80055bc:	a380      	add	r3, pc, #512	; (adr r3, 80057c0 <_dtoa_r+0x310>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f7fa fe83 	bl	80002cc <__adddf3>
 80055c6:	4606      	mov	r6, r0
 80055c8:	4628      	mov	r0, r5
 80055ca:	460f      	mov	r7, r1
 80055cc:	f7fa ffca 	bl	8000564 <__aeabi_i2d>
 80055d0:	a37d      	add	r3, pc, #500	; (adr r3, 80057c8 <_dtoa_r+0x318>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fb f82f 	bl	8000638 <__aeabi_dmul>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4630      	mov	r0, r6
 80055e0:	4639      	mov	r1, r7
 80055e2:	f7fa fe73 	bl	80002cc <__adddf3>
 80055e6:	4606      	mov	r6, r0
 80055e8:	460f      	mov	r7, r1
 80055ea:	f7fb fad5 	bl	8000b98 <__aeabi_d2iz>
 80055ee:	2200      	movs	r2, #0
 80055f0:	4682      	mov	sl, r0
 80055f2:	2300      	movs	r3, #0
 80055f4:	4630      	mov	r0, r6
 80055f6:	4639      	mov	r1, r7
 80055f8:	f7fb fa90 	bl	8000b1c <__aeabi_dcmplt>
 80055fc:	b148      	cbz	r0, 8005612 <_dtoa_r+0x162>
 80055fe:	4650      	mov	r0, sl
 8005600:	f7fa ffb0 	bl	8000564 <__aeabi_i2d>
 8005604:	4632      	mov	r2, r6
 8005606:	463b      	mov	r3, r7
 8005608:	f7fb fa7e 	bl	8000b08 <__aeabi_dcmpeq>
 800560c:	b908      	cbnz	r0, 8005612 <_dtoa_r+0x162>
 800560e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005612:	f1ba 0f16 	cmp.w	sl, #22
 8005616:	d859      	bhi.n	80056cc <_dtoa_r+0x21c>
 8005618:	4970      	ldr	r1, [pc, #448]	; (80057dc <_dtoa_r+0x32c>)
 800561a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800561e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005622:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005626:	f7fb fa97 	bl	8000b58 <__aeabi_dcmpgt>
 800562a:	2800      	cmp	r0, #0
 800562c:	d050      	beq.n	80056d0 <_dtoa_r+0x220>
 800562e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005632:	2300      	movs	r3, #0
 8005634:	930f      	str	r3, [sp, #60]	; 0x3c
 8005636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005638:	1b5d      	subs	r5, r3, r5
 800563a:	f1b5 0801 	subs.w	r8, r5, #1
 800563e:	bf49      	itett	mi
 8005640:	f1c5 0301 	rsbmi	r3, r5, #1
 8005644:	2300      	movpl	r3, #0
 8005646:	9305      	strmi	r3, [sp, #20]
 8005648:	f04f 0800 	movmi.w	r8, #0
 800564c:	bf58      	it	pl
 800564e:	9305      	strpl	r3, [sp, #20]
 8005650:	f1ba 0f00 	cmp.w	sl, #0
 8005654:	db3e      	blt.n	80056d4 <_dtoa_r+0x224>
 8005656:	2300      	movs	r3, #0
 8005658:	44d0      	add	r8, sl
 800565a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800565e:	9307      	str	r3, [sp, #28]
 8005660:	9b06      	ldr	r3, [sp, #24]
 8005662:	2b09      	cmp	r3, #9
 8005664:	f200 8090 	bhi.w	8005788 <_dtoa_r+0x2d8>
 8005668:	2b05      	cmp	r3, #5
 800566a:	bfc4      	itt	gt
 800566c:	3b04      	subgt	r3, #4
 800566e:	9306      	strgt	r3, [sp, #24]
 8005670:	9b06      	ldr	r3, [sp, #24]
 8005672:	f1a3 0302 	sub.w	r3, r3, #2
 8005676:	bfcc      	ite	gt
 8005678:	2500      	movgt	r5, #0
 800567a:	2501      	movle	r5, #1
 800567c:	2b03      	cmp	r3, #3
 800567e:	f200 808f 	bhi.w	80057a0 <_dtoa_r+0x2f0>
 8005682:	e8df f003 	tbb	[pc, r3]
 8005686:	7f7d      	.short	0x7f7d
 8005688:	7131      	.short	0x7131
 800568a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800568e:	441d      	add	r5, r3
 8005690:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005694:	2820      	cmp	r0, #32
 8005696:	dd13      	ble.n	80056c0 <_dtoa_r+0x210>
 8005698:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800569c:	9b00      	ldr	r3, [sp, #0]
 800569e:	fa08 f800 	lsl.w	r8, r8, r0
 80056a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80056a6:	fa23 f000 	lsr.w	r0, r3, r0
 80056aa:	ea48 0000 	orr.w	r0, r8, r0
 80056ae:	f7fa ff49 	bl	8000544 <__aeabi_ui2d>
 80056b2:	2301      	movs	r3, #1
 80056b4:	4682      	mov	sl, r0
 80056b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80056ba:	3d01      	subs	r5, #1
 80056bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80056be:	e772      	b.n	80055a6 <_dtoa_r+0xf6>
 80056c0:	9b00      	ldr	r3, [sp, #0]
 80056c2:	f1c0 0020 	rsb	r0, r0, #32
 80056c6:	fa03 f000 	lsl.w	r0, r3, r0
 80056ca:	e7f0      	b.n	80056ae <_dtoa_r+0x1fe>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e7b1      	b.n	8005634 <_dtoa_r+0x184>
 80056d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80056d2:	e7b0      	b.n	8005636 <_dtoa_r+0x186>
 80056d4:	9b05      	ldr	r3, [sp, #20]
 80056d6:	eba3 030a 	sub.w	r3, r3, sl
 80056da:	9305      	str	r3, [sp, #20]
 80056dc:	f1ca 0300 	rsb	r3, sl, #0
 80056e0:	9307      	str	r3, [sp, #28]
 80056e2:	2300      	movs	r3, #0
 80056e4:	930e      	str	r3, [sp, #56]	; 0x38
 80056e6:	e7bb      	b.n	8005660 <_dtoa_r+0x1b0>
 80056e8:	2301      	movs	r3, #1
 80056ea:	930a      	str	r3, [sp, #40]	; 0x28
 80056ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dd59      	ble.n	80057a6 <_dtoa_r+0x2f6>
 80056f2:	9302      	str	r3, [sp, #8]
 80056f4:	4699      	mov	r9, r3
 80056f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056f8:	2200      	movs	r2, #0
 80056fa:	6072      	str	r2, [r6, #4]
 80056fc:	2204      	movs	r2, #4
 80056fe:	f102 0014 	add.w	r0, r2, #20
 8005702:	4298      	cmp	r0, r3
 8005704:	6871      	ldr	r1, [r6, #4]
 8005706:	d953      	bls.n	80057b0 <_dtoa_r+0x300>
 8005708:	4620      	mov	r0, r4
 800570a:	f001 f9f4 	bl	8006af6 <_Balloc>
 800570e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005710:	6030      	str	r0, [r6, #0]
 8005712:	f1b9 0f0e 	cmp.w	r9, #14
 8005716:	f8d3 b000 	ldr.w	fp, [r3]
 800571a:	f200 80e6 	bhi.w	80058ea <_dtoa_r+0x43a>
 800571e:	2d00      	cmp	r5, #0
 8005720:	f000 80e3 	beq.w	80058ea <_dtoa_r+0x43a>
 8005724:	ed9d 7b00 	vldr	d7, [sp]
 8005728:	f1ba 0f00 	cmp.w	sl, #0
 800572c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005730:	dd74      	ble.n	800581c <_dtoa_r+0x36c>
 8005732:	4a2a      	ldr	r2, [pc, #168]	; (80057dc <_dtoa_r+0x32c>)
 8005734:	f00a 030f 	and.w	r3, sl, #15
 8005738:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800573c:	ed93 7b00 	vldr	d7, [r3]
 8005740:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005744:	06f0      	lsls	r0, r6, #27
 8005746:	ed8d 7b08 	vstr	d7, [sp, #32]
 800574a:	d565      	bpl.n	8005818 <_dtoa_r+0x368>
 800574c:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <_dtoa_r+0x330>)
 800574e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005752:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005756:	f7fb f899 	bl	800088c <__aeabi_ddiv>
 800575a:	e9cd 0100 	strd	r0, r1, [sp]
 800575e:	f006 060f 	and.w	r6, r6, #15
 8005762:	2503      	movs	r5, #3
 8005764:	4f1e      	ldr	r7, [pc, #120]	; (80057e0 <_dtoa_r+0x330>)
 8005766:	e04c      	b.n	8005802 <_dtoa_r+0x352>
 8005768:	2301      	movs	r3, #1
 800576a:	930a      	str	r3, [sp, #40]	; 0x28
 800576c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800576e:	4453      	add	r3, sl
 8005770:	f103 0901 	add.w	r9, r3, #1
 8005774:	9302      	str	r3, [sp, #8]
 8005776:	464b      	mov	r3, r9
 8005778:	2b01      	cmp	r3, #1
 800577a:	bfb8      	it	lt
 800577c:	2301      	movlt	r3, #1
 800577e:	e7ba      	b.n	80056f6 <_dtoa_r+0x246>
 8005780:	2300      	movs	r3, #0
 8005782:	e7b2      	b.n	80056ea <_dtoa_r+0x23a>
 8005784:	2300      	movs	r3, #0
 8005786:	e7f0      	b.n	800576a <_dtoa_r+0x2ba>
 8005788:	2501      	movs	r5, #1
 800578a:	2300      	movs	r3, #0
 800578c:	9306      	str	r3, [sp, #24]
 800578e:	950a      	str	r5, [sp, #40]	; 0x28
 8005790:	f04f 33ff 	mov.w	r3, #4294967295
 8005794:	9302      	str	r3, [sp, #8]
 8005796:	4699      	mov	r9, r3
 8005798:	2200      	movs	r2, #0
 800579a:	2312      	movs	r3, #18
 800579c:	920b      	str	r2, [sp, #44]	; 0x2c
 800579e:	e7aa      	b.n	80056f6 <_dtoa_r+0x246>
 80057a0:	2301      	movs	r3, #1
 80057a2:	930a      	str	r3, [sp, #40]	; 0x28
 80057a4:	e7f4      	b.n	8005790 <_dtoa_r+0x2e0>
 80057a6:	2301      	movs	r3, #1
 80057a8:	9302      	str	r3, [sp, #8]
 80057aa:	4699      	mov	r9, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	e7f5      	b.n	800579c <_dtoa_r+0x2ec>
 80057b0:	3101      	adds	r1, #1
 80057b2:	6071      	str	r1, [r6, #4]
 80057b4:	0052      	lsls	r2, r2, #1
 80057b6:	e7a2      	b.n	80056fe <_dtoa_r+0x24e>
 80057b8:	636f4361 	.word	0x636f4361
 80057bc:	3fd287a7 	.word	0x3fd287a7
 80057c0:	8b60c8b3 	.word	0x8b60c8b3
 80057c4:	3fc68a28 	.word	0x3fc68a28
 80057c8:	509f79fb 	.word	0x509f79fb
 80057cc:	3fd34413 	.word	0x3fd34413
 80057d0:	7ff00000 	.word	0x7ff00000
 80057d4:	08007ad9 	.word	0x08007ad9
 80057d8:	3ff80000 	.word	0x3ff80000
 80057dc:	08007c00 	.word	0x08007c00
 80057e0:	08007bd8 	.word	0x08007bd8
 80057e4:	08007b61 	.word	0x08007b61
 80057e8:	07f1      	lsls	r1, r6, #31
 80057ea:	d508      	bpl.n	80057fe <_dtoa_r+0x34e>
 80057ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80057f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f4:	f7fa ff20 	bl	8000638 <__aeabi_dmul>
 80057f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80057fc:	3501      	adds	r5, #1
 80057fe:	1076      	asrs	r6, r6, #1
 8005800:	3708      	adds	r7, #8
 8005802:	2e00      	cmp	r6, #0
 8005804:	d1f0      	bne.n	80057e8 <_dtoa_r+0x338>
 8005806:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800580a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800580e:	f7fb f83d 	bl	800088c <__aeabi_ddiv>
 8005812:	e9cd 0100 	strd	r0, r1, [sp]
 8005816:	e01a      	b.n	800584e <_dtoa_r+0x39e>
 8005818:	2502      	movs	r5, #2
 800581a:	e7a3      	b.n	8005764 <_dtoa_r+0x2b4>
 800581c:	f000 80a0 	beq.w	8005960 <_dtoa_r+0x4b0>
 8005820:	f1ca 0600 	rsb	r6, sl, #0
 8005824:	4b9f      	ldr	r3, [pc, #636]	; (8005aa4 <_dtoa_r+0x5f4>)
 8005826:	4fa0      	ldr	r7, [pc, #640]	; (8005aa8 <_dtoa_r+0x5f8>)
 8005828:	f006 020f 	and.w	r2, r6, #15
 800582c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005838:	f7fa fefe 	bl	8000638 <__aeabi_dmul>
 800583c:	e9cd 0100 	strd	r0, r1, [sp]
 8005840:	1136      	asrs	r6, r6, #4
 8005842:	2300      	movs	r3, #0
 8005844:	2502      	movs	r5, #2
 8005846:	2e00      	cmp	r6, #0
 8005848:	d17f      	bne.n	800594a <_dtoa_r+0x49a>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e1      	bne.n	8005812 <_dtoa_r+0x362>
 800584e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8087 	beq.w	8005964 <_dtoa_r+0x4b4>
 8005856:	e9dd 6700 	ldrd	r6, r7, [sp]
 800585a:	2200      	movs	r2, #0
 800585c:	4b93      	ldr	r3, [pc, #588]	; (8005aac <_dtoa_r+0x5fc>)
 800585e:	4630      	mov	r0, r6
 8005860:	4639      	mov	r1, r7
 8005862:	f7fb f95b 	bl	8000b1c <__aeabi_dcmplt>
 8005866:	2800      	cmp	r0, #0
 8005868:	d07c      	beq.n	8005964 <_dtoa_r+0x4b4>
 800586a:	f1b9 0f00 	cmp.w	r9, #0
 800586e:	d079      	beq.n	8005964 <_dtoa_r+0x4b4>
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	dd35      	ble.n	80058e2 <_dtoa_r+0x432>
 8005876:	f10a 33ff 	add.w	r3, sl, #4294967295
 800587a:	9308      	str	r3, [sp, #32]
 800587c:	4639      	mov	r1, r7
 800587e:	2200      	movs	r2, #0
 8005880:	4b8b      	ldr	r3, [pc, #556]	; (8005ab0 <_dtoa_r+0x600>)
 8005882:	4630      	mov	r0, r6
 8005884:	f7fa fed8 	bl	8000638 <__aeabi_dmul>
 8005888:	e9cd 0100 	strd	r0, r1, [sp]
 800588c:	9f02      	ldr	r7, [sp, #8]
 800588e:	3501      	adds	r5, #1
 8005890:	4628      	mov	r0, r5
 8005892:	f7fa fe67 	bl	8000564 <__aeabi_i2d>
 8005896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800589a:	f7fa fecd 	bl	8000638 <__aeabi_dmul>
 800589e:	2200      	movs	r2, #0
 80058a0:	4b84      	ldr	r3, [pc, #528]	; (8005ab4 <_dtoa_r+0x604>)
 80058a2:	f7fa fd13 	bl	80002cc <__adddf3>
 80058a6:	4605      	mov	r5, r0
 80058a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80058ac:	2f00      	cmp	r7, #0
 80058ae:	d15d      	bne.n	800596c <_dtoa_r+0x4bc>
 80058b0:	2200      	movs	r2, #0
 80058b2:	4b81      	ldr	r3, [pc, #516]	; (8005ab8 <_dtoa_r+0x608>)
 80058b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058b8:	f7fa fd06 	bl	80002c8 <__aeabi_dsub>
 80058bc:	462a      	mov	r2, r5
 80058be:	4633      	mov	r3, r6
 80058c0:	e9cd 0100 	strd	r0, r1, [sp]
 80058c4:	f7fb f948 	bl	8000b58 <__aeabi_dcmpgt>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	f040 8288 	bne.w	8005dde <_dtoa_r+0x92e>
 80058ce:	462a      	mov	r2, r5
 80058d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058d8:	f7fb f920 	bl	8000b1c <__aeabi_dcmplt>
 80058dc:	2800      	cmp	r0, #0
 80058de:	f040 827c 	bne.w	8005dda <_dtoa_r+0x92a>
 80058e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058e6:	e9cd 2300 	strd	r2, r3, [sp]
 80058ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f2c0 8150 	blt.w	8005b92 <_dtoa_r+0x6e2>
 80058f2:	f1ba 0f0e 	cmp.w	sl, #14
 80058f6:	f300 814c 	bgt.w	8005b92 <_dtoa_r+0x6e2>
 80058fa:	4b6a      	ldr	r3, [pc, #424]	; (8005aa4 <_dtoa_r+0x5f4>)
 80058fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005900:	ed93 7b00 	vldr	d7, [r3]
 8005904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005906:	2b00      	cmp	r3, #0
 8005908:	ed8d 7b02 	vstr	d7, [sp, #8]
 800590c:	f280 80d8 	bge.w	8005ac0 <_dtoa_r+0x610>
 8005910:	f1b9 0f00 	cmp.w	r9, #0
 8005914:	f300 80d4 	bgt.w	8005ac0 <_dtoa_r+0x610>
 8005918:	f040 825e 	bne.w	8005dd8 <_dtoa_r+0x928>
 800591c:	2200      	movs	r2, #0
 800591e:	4b66      	ldr	r3, [pc, #408]	; (8005ab8 <_dtoa_r+0x608>)
 8005920:	ec51 0b17 	vmov	r0, r1, d7
 8005924:	f7fa fe88 	bl	8000638 <__aeabi_dmul>
 8005928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800592c:	f7fb f90a 	bl	8000b44 <__aeabi_dcmpge>
 8005930:	464f      	mov	r7, r9
 8005932:	464e      	mov	r6, r9
 8005934:	2800      	cmp	r0, #0
 8005936:	f040 8234 	bne.w	8005da2 <_dtoa_r+0x8f2>
 800593a:	2331      	movs	r3, #49	; 0x31
 800593c:	f10b 0501 	add.w	r5, fp, #1
 8005940:	f88b 3000 	strb.w	r3, [fp]
 8005944:	f10a 0a01 	add.w	sl, sl, #1
 8005948:	e22f      	b.n	8005daa <_dtoa_r+0x8fa>
 800594a:	07f2      	lsls	r2, r6, #31
 800594c:	d505      	bpl.n	800595a <_dtoa_r+0x4aa>
 800594e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005952:	f7fa fe71 	bl	8000638 <__aeabi_dmul>
 8005956:	3501      	adds	r5, #1
 8005958:	2301      	movs	r3, #1
 800595a:	1076      	asrs	r6, r6, #1
 800595c:	3708      	adds	r7, #8
 800595e:	e772      	b.n	8005846 <_dtoa_r+0x396>
 8005960:	2502      	movs	r5, #2
 8005962:	e774      	b.n	800584e <_dtoa_r+0x39e>
 8005964:	f8cd a020 	str.w	sl, [sp, #32]
 8005968:	464f      	mov	r7, r9
 800596a:	e791      	b.n	8005890 <_dtoa_r+0x3e0>
 800596c:	4b4d      	ldr	r3, [pc, #308]	; (8005aa4 <_dtoa_r+0x5f4>)
 800596e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005972:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005978:	2b00      	cmp	r3, #0
 800597a:	d047      	beq.n	8005a0c <_dtoa_r+0x55c>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	2000      	movs	r0, #0
 8005982:	494e      	ldr	r1, [pc, #312]	; (8005abc <_dtoa_r+0x60c>)
 8005984:	f7fa ff82 	bl	800088c <__aeabi_ddiv>
 8005988:	462a      	mov	r2, r5
 800598a:	4633      	mov	r3, r6
 800598c:	f7fa fc9c 	bl	80002c8 <__aeabi_dsub>
 8005990:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005994:	465d      	mov	r5, fp
 8005996:	e9dd 0100 	ldrd	r0, r1, [sp]
 800599a:	f7fb f8fd 	bl	8000b98 <__aeabi_d2iz>
 800599e:	4606      	mov	r6, r0
 80059a0:	f7fa fde0 	bl	8000564 <__aeabi_i2d>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059ac:	f7fa fc8c 	bl	80002c8 <__aeabi_dsub>
 80059b0:	3630      	adds	r6, #48	; 0x30
 80059b2:	f805 6b01 	strb.w	r6, [r5], #1
 80059b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059ba:	e9cd 0100 	strd	r0, r1, [sp]
 80059be:	f7fb f8ad 	bl	8000b1c <__aeabi_dcmplt>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d163      	bne.n	8005a8e <_dtoa_r+0x5de>
 80059c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059ca:	2000      	movs	r0, #0
 80059cc:	4937      	ldr	r1, [pc, #220]	; (8005aac <_dtoa_r+0x5fc>)
 80059ce:	f7fa fc7b 	bl	80002c8 <__aeabi_dsub>
 80059d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059d6:	f7fb f8a1 	bl	8000b1c <__aeabi_dcmplt>
 80059da:	2800      	cmp	r0, #0
 80059dc:	f040 80b7 	bne.w	8005b4e <_dtoa_r+0x69e>
 80059e0:	eba5 030b 	sub.w	r3, r5, fp
 80059e4:	429f      	cmp	r7, r3
 80059e6:	f77f af7c 	ble.w	80058e2 <_dtoa_r+0x432>
 80059ea:	2200      	movs	r2, #0
 80059ec:	4b30      	ldr	r3, [pc, #192]	; (8005ab0 <_dtoa_r+0x600>)
 80059ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059f2:	f7fa fe21 	bl	8000638 <__aeabi_dmul>
 80059f6:	2200      	movs	r2, #0
 80059f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80059fc:	4b2c      	ldr	r3, [pc, #176]	; (8005ab0 <_dtoa_r+0x600>)
 80059fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a02:	f7fa fe19 	bl	8000638 <__aeabi_dmul>
 8005a06:	e9cd 0100 	strd	r0, r1, [sp]
 8005a0a:	e7c4      	b.n	8005996 <_dtoa_r+0x4e6>
 8005a0c:	462a      	mov	r2, r5
 8005a0e:	4633      	mov	r3, r6
 8005a10:	f7fa fe12 	bl	8000638 <__aeabi_dmul>
 8005a14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005a18:	eb0b 0507 	add.w	r5, fp, r7
 8005a1c:	465e      	mov	r6, fp
 8005a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a22:	f7fb f8b9 	bl	8000b98 <__aeabi_d2iz>
 8005a26:	4607      	mov	r7, r0
 8005a28:	f7fa fd9c 	bl	8000564 <__aeabi_i2d>
 8005a2c:	3730      	adds	r7, #48	; 0x30
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a36:	f7fa fc47 	bl	80002c8 <__aeabi_dsub>
 8005a3a:	f806 7b01 	strb.w	r7, [r6], #1
 8005a3e:	42ae      	cmp	r6, r5
 8005a40:	e9cd 0100 	strd	r0, r1, [sp]
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	d126      	bne.n	8005a98 <_dtoa_r+0x5e8>
 8005a4a:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <_dtoa_r+0x60c>)
 8005a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a50:	f7fa fc3c 	bl	80002cc <__adddf3>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a5c:	f7fb f87c 	bl	8000b58 <__aeabi_dcmpgt>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d174      	bne.n	8005b4e <_dtoa_r+0x69e>
 8005a64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a68:	2000      	movs	r0, #0
 8005a6a:	4914      	ldr	r1, [pc, #80]	; (8005abc <_dtoa_r+0x60c>)
 8005a6c:	f7fa fc2c 	bl	80002c8 <__aeabi_dsub>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a78:	f7fb f850 	bl	8000b1c <__aeabi_dcmplt>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f43f af30 	beq.w	80058e2 <_dtoa_r+0x432>
 8005a82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a86:	2b30      	cmp	r3, #48	; 0x30
 8005a88:	f105 32ff 	add.w	r2, r5, #4294967295
 8005a8c:	d002      	beq.n	8005a94 <_dtoa_r+0x5e4>
 8005a8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005a92:	e04a      	b.n	8005b2a <_dtoa_r+0x67a>
 8005a94:	4615      	mov	r5, r2
 8005a96:	e7f4      	b.n	8005a82 <_dtoa_r+0x5d2>
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <_dtoa_r+0x600>)
 8005a9a:	f7fa fdcd 	bl	8000638 <__aeabi_dmul>
 8005a9e:	e9cd 0100 	strd	r0, r1, [sp]
 8005aa2:	e7bc      	b.n	8005a1e <_dtoa_r+0x56e>
 8005aa4:	08007c00 	.word	0x08007c00
 8005aa8:	08007bd8 	.word	0x08007bd8
 8005aac:	3ff00000 	.word	0x3ff00000
 8005ab0:	40240000 	.word	0x40240000
 8005ab4:	401c0000 	.word	0x401c0000
 8005ab8:	40140000 	.word	0x40140000
 8005abc:	3fe00000 	.word	0x3fe00000
 8005ac0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005ac4:	465d      	mov	r5, fp
 8005ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005aca:	4630      	mov	r0, r6
 8005acc:	4639      	mov	r1, r7
 8005ace:	f7fa fedd 	bl	800088c <__aeabi_ddiv>
 8005ad2:	f7fb f861 	bl	8000b98 <__aeabi_d2iz>
 8005ad6:	4680      	mov	r8, r0
 8005ad8:	f7fa fd44 	bl	8000564 <__aeabi_i2d>
 8005adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ae0:	f7fa fdaa 	bl	8000638 <__aeabi_dmul>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4630      	mov	r0, r6
 8005aea:	4639      	mov	r1, r7
 8005aec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005af0:	f7fa fbea 	bl	80002c8 <__aeabi_dsub>
 8005af4:	f805 6b01 	strb.w	r6, [r5], #1
 8005af8:	eba5 060b 	sub.w	r6, r5, fp
 8005afc:	45b1      	cmp	r9, r6
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	d139      	bne.n	8005b78 <_dtoa_r+0x6c8>
 8005b04:	f7fa fbe2 	bl	80002cc <__adddf3>
 8005b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	460f      	mov	r7, r1
 8005b10:	f7fb f822 	bl	8000b58 <__aeabi_dcmpgt>
 8005b14:	b9c8      	cbnz	r0, 8005b4a <_dtoa_r+0x69a>
 8005b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	f7fa fff3 	bl	8000b08 <__aeabi_dcmpeq>
 8005b22:	b110      	cbz	r0, 8005b2a <_dtoa_r+0x67a>
 8005b24:	f018 0f01 	tst.w	r8, #1
 8005b28:	d10f      	bne.n	8005b4a <_dtoa_r+0x69a>
 8005b2a:	9904      	ldr	r1, [sp, #16]
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f001 f816 	bl	8006b5e <_Bfree>
 8005b32:	2300      	movs	r3, #0
 8005b34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b36:	702b      	strb	r3, [r5, #0]
 8005b38:	f10a 0301 	add.w	r3, sl, #1
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8241 	beq.w	8005fc8 <_dtoa_r+0xb18>
 8005b46:	601d      	str	r5, [r3, #0]
 8005b48:	e23e      	b.n	8005fc8 <_dtoa_r+0xb18>
 8005b4a:	f8cd a020 	str.w	sl, [sp, #32]
 8005b4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b52:	2a39      	cmp	r2, #57	; 0x39
 8005b54:	f105 33ff 	add.w	r3, r5, #4294967295
 8005b58:	d108      	bne.n	8005b6c <_dtoa_r+0x6bc>
 8005b5a:	459b      	cmp	fp, r3
 8005b5c:	d10a      	bne.n	8005b74 <_dtoa_r+0x6c4>
 8005b5e:	9b08      	ldr	r3, [sp, #32]
 8005b60:	3301      	adds	r3, #1
 8005b62:	9308      	str	r3, [sp, #32]
 8005b64:	2330      	movs	r3, #48	; 0x30
 8005b66:	f88b 3000 	strb.w	r3, [fp]
 8005b6a:	465b      	mov	r3, fp
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	3201      	adds	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	e78c      	b.n	8005a8e <_dtoa_r+0x5de>
 8005b74:	461d      	mov	r5, r3
 8005b76:	e7ea      	b.n	8005b4e <_dtoa_r+0x69e>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4b9b      	ldr	r3, [pc, #620]	; (8005de8 <_dtoa_r+0x938>)
 8005b7c:	f7fa fd5c 	bl	8000638 <__aeabi_dmul>
 8005b80:	2200      	movs	r2, #0
 8005b82:	2300      	movs	r3, #0
 8005b84:	4606      	mov	r6, r0
 8005b86:	460f      	mov	r7, r1
 8005b88:	f7fa ffbe 	bl	8000b08 <__aeabi_dcmpeq>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d09a      	beq.n	8005ac6 <_dtoa_r+0x616>
 8005b90:	e7cb      	b.n	8005b2a <_dtoa_r+0x67a>
 8005b92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b94:	2a00      	cmp	r2, #0
 8005b96:	f000 808b 	beq.w	8005cb0 <_dtoa_r+0x800>
 8005b9a:	9a06      	ldr	r2, [sp, #24]
 8005b9c:	2a01      	cmp	r2, #1
 8005b9e:	dc6e      	bgt.n	8005c7e <_dtoa_r+0x7ce>
 8005ba0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	d067      	beq.n	8005c76 <_dtoa_r+0x7c6>
 8005ba6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005baa:	9f07      	ldr	r7, [sp, #28]
 8005bac:	9d05      	ldr	r5, [sp, #20]
 8005bae:	9a05      	ldr	r2, [sp, #20]
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	441a      	add	r2, r3
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	9205      	str	r2, [sp, #20]
 8005bb8:	4498      	add	r8, r3
 8005bba:	f001 f8ae 	bl	8006d1a <__i2b>
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	dd0c      	ble.n	8005bde <_dtoa_r+0x72e>
 8005bc4:	f1b8 0f00 	cmp.w	r8, #0
 8005bc8:	dd09      	ble.n	8005bde <_dtoa_r+0x72e>
 8005bca:	4545      	cmp	r5, r8
 8005bcc:	9a05      	ldr	r2, [sp, #20]
 8005bce:	462b      	mov	r3, r5
 8005bd0:	bfa8      	it	ge
 8005bd2:	4643      	movge	r3, r8
 8005bd4:	1ad2      	subs	r2, r2, r3
 8005bd6:	9205      	str	r2, [sp, #20]
 8005bd8:	1aed      	subs	r5, r5, r3
 8005bda:	eba8 0803 	sub.w	r8, r8, r3
 8005bde:	9b07      	ldr	r3, [sp, #28]
 8005be0:	b1eb      	cbz	r3, 8005c1e <_dtoa_r+0x76e>
 8005be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d067      	beq.n	8005cb8 <_dtoa_r+0x808>
 8005be8:	b18f      	cbz	r7, 8005c0e <_dtoa_r+0x75e>
 8005bea:	4631      	mov	r1, r6
 8005bec:	463a      	mov	r2, r7
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f001 f932 	bl	8006e58 <__pow5mult>
 8005bf4:	9a04      	ldr	r2, [sp, #16]
 8005bf6:	4601      	mov	r1, r0
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f001 f896 	bl	8006d2c <__multiply>
 8005c00:	9904      	ldr	r1, [sp, #16]
 8005c02:	9008      	str	r0, [sp, #32]
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 ffaa 	bl	8006b5e <_Bfree>
 8005c0a:	9b08      	ldr	r3, [sp, #32]
 8005c0c:	9304      	str	r3, [sp, #16]
 8005c0e:	9b07      	ldr	r3, [sp, #28]
 8005c10:	1bda      	subs	r2, r3, r7
 8005c12:	d004      	beq.n	8005c1e <_dtoa_r+0x76e>
 8005c14:	9904      	ldr	r1, [sp, #16]
 8005c16:	4620      	mov	r0, r4
 8005c18:	f001 f91e 	bl	8006e58 <__pow5mult>
 8005c1c:	9004      	str	r0, [sp, #16]
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4620      	mov	r0, r4
 8005c22:	f001 f87a 	bl	8006d1a <__i2b>
 8005c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c28:	4607      	mov	r7, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 81d0 	beq.w	8005fd0 <_dtoa_r+0xb20>
 8005c30:	461a      	mov	r2, r3
 8005c32:	4601      	mov	r1, r0
 8005c34:	4620      	mov	r0, r4
 8005c36:	f001 f90f 	bl	8006e58 <__pow5mult>
 8005c3a:	9b06      	ldr	r3, [sp, #24]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	4607      	mov	r7, r0
 8005c40:	dc40      	bgt.n	8005cc4 <_dtoa_r+0x814>
 8005c42:	9b00      	ldr	r3, [sp, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d139      	bne.n	8005cbc <_dtoa_r+0x80c>
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d136      	bne.n	8005cc0 <_dtoa_r+0x810>
 8005c52:	9b01      	ldr	r3, [sp, #4]
 8005c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c58:	0d1b      	lsrs	r3, r3, #20
 8005c5a:	051b      	lsls	r3, r3, #20
 8005c5c:	b12b      	cbz	r3, 8005c6a <_dtoa_r+0x7ba>
 8005c5e:	9b05      	ldr	r3, [sp, #20]
 8005c60:	3301      	adds	r3, #1
 8005c62:	9305      	str	r3, [sp, #20]
 8005c64:	f108 0801 	add.w	r8, r8, #1
 8005c68:	2301      	movs	r3, #1
 8005c6a:	9307      	str	r3, [sp, #28]
 8005c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d12a      	bne.n	8005cc8 <_dtoa_r+0x818>
 8005c72:	2001      	movs	r0, #1
 8005c74:	e030      	b.n	8005cd8 <_dtoa_r+0x828>
 8005c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c7c:	e795      	b.n	8005baa <_dtoa_r+0x6fa>
 8005c7e:	9b07      	ldr	r3, [sp, #28]
 8005c80:	f109 37ff 	add.w	r7, r9, #4294967295
 8005c84:	42bb      	cmp	r3, r7
 8005c86:	bfbf      	itttt	lt
 8005c88:	9b07      	ldrlt	r3, [sp, #28]
 8005c8a:	9707      	strlt	r7, [sp, #28]
 8005c8c:	1afa      	sublt	r2, r7, r3
 8005c8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005c90:	bfbb      	ittet	lt
 8005c92:	189b      	addlt	r3, r3, r2
 8005c94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005c96:	1bdf      	subge	r7, r3, r7
 8005c98:	2700      	movlt	r7, #0
 8005c9a:	f1b9 0f00 	cmp.w	r9, #0
 8005c9e:	bfb5      	itete	lt
 8005ca0:	9b05      	ldrlt	r3, [sp, #20]
 8005ca2:	9d05      	ldrge	r5, [sp, #20]
 8005ca4:	eba3 0509 	sublt.w	r5, r3, r9
 8005ca8:	464b      	movge	r3, r9
 8005caa:	bfb8      	it	lt
 8005cac:	2300      	movlt	r3, #0
 8005cae:	e77e      	b.n	8005bae <_dtoa_r+0x6fe>
 8005cb0:	9f07      	ldr	r7, [sp, #28]
 8005cb2:	9d05      	ldr	r5, [sp, #20]
 8005cb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005cb6:	e783      	b.n	8005bc0 <_dtoa_r+0x710>
 8005cb8:	9a07      	ldr	r2, [sp, #28]
 8005cba:	e7ab      	b.n	8005c14 <_dtoa_r+0x764>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e7d4      	b.n	8005c6a <_dtoa_r+0x7ba>
 8005cc0:	9b00      	ldr	r3, [sp, #0]
 8005cc2:	e7d2      	b.n	8005c6a <_dtoa_r+0x7ba>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	9307      	str	r3, [sp, #28]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005cce:	6918      	ldr	r0, [r3, #16]
 8005cd0:	f000 ffd5 	bl	8006c7e <__hi0bits>
 8005cd4:	f1c0 0020 	rsb	r0, r0, #32
 8005cd8:	4440      	add	r0, r8
 8005cda:	f010 001f 	ands.w	r0, r0, #31
 8005cde:	d047      	beq.n	8005d70 <_dtoa_r+0x8c0>
 8005ce0:	f1c0 0320 	rsb	r3, r0, #32
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	dd3b      	ble.n	8005d60 <_dtoa_r+0x8b0>
 8005ce8:	9b05      	ldr	r3, [sp, #20]
 8005cea:	f1c0 001c 	rsb	r0, r0, #28
 8005cee:	4403      	add	r3, r0
 8005cf0:	9305      	str	r3, [sp, #20]
 8005cf2:	4405      	add	r5, r0
 8005cf4:	4480      	add	r8, r0
 8005cf6:	9b05      	ldr	r3, [sp, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	dd05      	ble.n	8005d08 <_dtoa_r+0x858>
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	9904      	ldr	r1, [sp, #16]
 8005d00:	4620      	mov	r0, r4
 8005d02:	f001 f8f7 	bl	8006ef4 <__lshift>
 8005d06:	9004      	str	r0, [sp, #16]
 8005d08:	f1b8 0f00 	cmp.w	r8, #0
 8005d0c:	dd05      	ble.n	8005d1a <_dtoa_r+0x86a>
 8005d0e:	4639      	mov	r1, r7
 8005d10:	4642      	mov	r2, r8
 8005d12:	4620      	mov	r0, r4
 8005d14:	f001 f8ee 	bl	8006ef4 <__lshift>
 8005d18:	4607      	mov	r7, r0
 8005d1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d1c:	b353      	cbz	r3, 8005d74 <_dtoa_r+0x8c4>
 8005d1e:	4639      	mov	r1, r7
 8005d20:	9804      	ldr	r0, [sp, #16]
 8005d22:	f001 f93b 	bl	8006f9c <__mcmp>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	da24      	bge.n	8005d74 <_dtoa_r+0x8c4>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	220a      	movs	r2, #10
 8005d2e:	9904      	ldr	r1, [sp, #16]
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 ff2b 	bl	8006b8c <__multadd>
 8005d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d38:	9004      	str	r0, [sp, #16]
 8005d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 814d 	beq.w	8005fde <_dtoa_r+0xb2e>
 8005d44:	2300      	movs	r3, #0
 8005d46:	4631      	mov	r1, r6
 8005d48:	220a      	movs	r2, #10
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 ff1e 	bl	8006b8c <__multadd>
 8005d50:	9b02      	ldr	r3, [sp, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	4606      	mov	r6, r0
 8005d56:	dc4f      	bgt.n	8005df8 <_dtoa_r+0x948>
 8005d58:	9b06      	ldr	r3, [sp, #24]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	dd4c      	ble.n	8005df8 <_dtoa_r+0x948>
 8005d5e:	e011      	b.n	8005d84 <_dtoa_r+0x8d4>
 8005d60:	d0c9      	beq.n	8005cf6 <_dtoa_r+0x846>
 8005d62:	9a05      	ldr	r2, [sp, #20]
 8005d64:	331c      	adds	r3, #28
 8005d66:	441a      	add	r2, r3
 8005d68:	9205      	str	r2, [sp, #20]
 8005d6a:	441d      	add	r5, r3
 8005d6c:	4498      	add	r8, r3
 8005d6e:	e7c2      	b.n	8005cf6 <_dtoa_r+0x846>
 8005d70:	4603      	mov	r3, r0
 8005d72:	e7f6      	b.n	8005d62 <_dtoa_r+0x8b2>
 8005d74:	f1b9 0f00 	cmp.w	r9, #0
 8005d78:	dc38      	bgt.n	8005dec <_dtoa_r+0x93c>
 8005d7a:	9b06      	ldr	r3, [sp, #24]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	dd35      	ble.n	8005dec <_dtoa_r+0x93c>
 8005d80:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d84:	9b02      	ldr	r3, [sp, #8]
 8005d86:	b963      	cbnz	r3, 8005da2 <_dtoa_r+0x8f2>
 8005d88:	4639      	mov	r1, r7
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f000 fefd 	bl	8006b8c <__multadd>
 8005d92:	4601      	mov	r1, r0
 8005d94:	4607      	mov	r7, r0
 8005d96:	9804      	ldr	r0, [sp, #16]
 8005d98:	f001 f900 	bl	8006f9c <__mcmp>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	f73f adcc 	bgt.w	800593a <_dtoa_r+0x48a>
 8005da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da4:	465d      	mov	r5, fp
 8005da6:	ea6f 0a03 	mvn.w	sl, r3
 8005daa:	f04f 0900 	mov.w	r9, #0
 8005dae:	4639      	mov	r1, r7
 8005db0:	4620      	mov	r0, r4
 8005db2:	f000 fed4 	bl	8006b5e <_Bfree>
 8005db6:	2e00      	cmp	r6, #0
 8005db8:	f43f aeb7 	beq.w	8005b2a <_dtoa_r+0x67a>
 8005dbc:	f1b9 0f00 	cmp.w	r9, #0
 8005dc0:	d005      	beq.n	8005dce <_dtoa_r+0x91e>
 8005dc2:	45b1      	cmp	r9, r6
 8005dc4:	d003      	beq.n	8005dce <_dtoa_r+0x91e>
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f000 fec8 	bl	8006b5e <_Bfree>
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f000 fec4 	bl	8006b5e <_Bfree>
 8005dd6:	e6a8      	b.n	8005b2a <_dtoa_r+0x67a>
 8005dd8:	2700      	movs	r7, #0
 8005dda:	463e      	mov	r6, r7
 8005ddc:	e7e1      	b.n	8005da2 <_dtoa_r+0x8f2>
 8005dde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005de2:	463e      	mov	r6, r7
 8005de4:	e5a9      	b.n	800593a <_dtoa_r+0x48a>
 8005de6:	bf00      	nop
 8005de8:	40240000 	.word	0x40240000
 8005dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dee:	f8cd 9008 	str.w	r9, [sp, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80fa 	beq.w	8005fec <_dtoa_r+0xb3c>
 8005df8:	2d00      	cmp	r5, #0
 8005dfa:	dd05      	ble.n	8005e08 <_dtoa_r+0x958>
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	462a      	mov	r2, r5
 8005e00:	4620      	mov	r0, r4
 8005e02:	f001 f877 	bl	8006ef4 <__lshift>
 8005e06:	4606      	mov	r6, r0
 8005e08:	9b07      	ldr	r3, [sp, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d04c      	beq.n	8005ea8 <_dtoa_r+0x9f8>
 8005e0e:	6871      	ldr	r1, [r6, #4]
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fe70 	bl	8006af6 <_Balloc>
 8005e16:	6932      	ldr	r2, [r6, #16]
 8005e18:	3202      	adds	r2, #2
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	0092      	lsls	r2, r2, #2
 8005e1e:	f106 010c 	add.w	r1, r6, #12
 8005e22:	300c      	adds	r0, #12
 8005e24:	f000 fe5c 	bl	8006ae0 <memcpy>
 8005e28:	2201      	movs	r2, #1
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f001 f861 	bl	8006ef4 <__lshift>
 8005e32:	9b00      	ldr	r3, [sp, #0]
 8005e34:	f8cd b014 	str.w	fp, [sp, #20]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	46b1      	mov	r9, r6
 8005e3e:	9307      	str	r3, [sp, #28]
 8005e40:	4606      	mov	r6, r0
 8005e42:	4639      	mov	r1, r7
 8005e44:	9804      	ldr	r0, [sp, #16]
 8005e46:	f7ff faa5 	bl	8005394 <quorem>
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005e52:	9804      	ldr	r0, [sp, #16]
 8005e54:	f001 f8a2 	bl	8006f9c <__mcmp>
 8005e58:	4632      	mov	r2, r6
 8005e5a:	9000      	str	r0, [sp, #0]
 8005e5c:	4639      	mov	r1, r7
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f001 f8b6 	bl	8006fd0 <__mdiff>
 8005e64:	68c3      	ldr	r3, [r0, #12]
 8005e66:	4602      	mov	r2, r0
 8005e68:	bb03      	cbnz	r3, 8005eac <_dtoa_r+0x9fc>
 8005e6a:	4601      	mov	r1, r0
 8005e6c:	9008      	str	r0, [sp, #32]
 8005e6e:	9804      	ldr	r0, [sp, #16]
 8005e70:	f001 f894 	bl	8006f9c <__mcmp>
 8005e74:	9a08      	ldr	r2, [sp, #32]
 8005e76:	4603      	mov	r3, r0
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	9308      	str	r3, [sp, #32]
 8005e7e:	f000 fe6e 	bl	8006b5e <_Bfree>
 8005e82:	9b08      	ldr	r3, [sp, #32]
 8005e84:	b9a3      	cbnz	r3, 8005eb0 <_dtoa_r+0xa00>
 8005e86:	9a06      	ldr	r2, [sp, #24]
 8005e88:	b992      	cbnz	r2, 8005eb0 <_dtoa_r+0xa00>
 8005e8a:	9a07      	ldr	r2, [sp, #28]
 8005e8c:	b982      	cbnz	r2, 8005eb0 <_dtoa_r+0xa00>
 8005e8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e92:	d029      	beq.n	8005ee8 <_dtoa_r+0xa38>
 8005e94:	9b00      	ldr	r3, [sp, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	dd01      	ble.n	8005e9e <_dtoa_r+0x9ee>
 8005e9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005e9e:	9b05      	ldr	r3, [sp, #20]
 8005ea0:	1c5d      	adds	r5, r3, #1
 8005ea2:	f883 8000 	strb.w	r8, [r3]
 8005ea6:	e782      	b.n	8005dae <_dtoa_r+0x8fe>
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	e7c2      	b.n	8005e32 <_dtoa_r+0x982>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e7e3      	b.n	8005e78 <_dtoa_r+0x9c8>
 8005eb0:	9a00      	ldr	r2, [sp, #0]
 8005eb2:	2a00      	cmp	r2, #0
 8005eb4:	db04      	blt.n	8005ec0 <_dtoa_r+0xa10>
 8005eb6:	d125      	bne.n	8005f04 <_dtoa_r+0xa54>
 8005eb8:	9a06      	ldr	r2, [sp, #24]
 8005eba:	bb1a      	cbnz	r2, 8005f04 <_dtoa_r+0xa54>
 8005ebc:	9a07      	ldr	r2, [sp, #28]
 8005ebe:	bb0a      	cbnz	r2, 8005f04 <_dtoa_r+0xa54>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	ddec      	ble.n	8005e9e <_dtoa_r+0x9ee>
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	9904      	ldr	r1, [sp, #16]
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f001 f813 	bl	8006ef4 <__lshift>
 8005ece:	4639      	mov	r1, r7
 8005ed0:	9004      	str	r0, [sp, #16]
 8005ed2:	f001 f863 	bl	8006f9c <__mcmp>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	dc03      	bgt.n	8005ee2 <_dtoa_r+0xa32>
 8005eda:	d1e0      	bne.n	8005e9e <_dtoa_r+0x9ee>
 8005edc:	f018 0f01 	tst.w	r8, #1
 8005ee0:	d0dd      	beq.n	8005e9e <_dtoa_r+0x9ee>
 8005ee2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ee6:	d1d8      	bne.n	8005e9a <_dtoa_r+0x9ea>
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	9a05      	ldr	r2, [sp, #20]
 8005eec:	1c5d      	adds	r5, r3, #1
 8005eee:	2339      	movs	r3, #57	; 0x39
 8005ef0:	7013      	strb	r3, [r2, #0]
 8005ef2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ef6:	2b39      	cmp	r3, #57	; 0x39
 8005ef8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005efc:	d04f      	beq.n	8005f9e <_dtoa_r+0xaee>
 8005efe:	3301      	adds	r3, #1
 8005f00:	7013      	strb	r3, [r2, #0]
 8005f02:	e754      	b.n	8005dae <_dtoa_r+0x8fe>
 8005f04:	9a05      	ldr	r2, [sp, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f102 0501 	add.w	r5, r2, #1
 8005f0c:	dd06      	ble.n	8005f1c <_dtoa_r+0xa6c>
 8005f0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005f12:	d0e9      	beq.n	8005ee8 <_dtoa_r+0xa38>
 8005f14:	f108 0801 	add.w	r8, r8, #1
 8005f18:	9b05      	ldr	r3, [sp, #20]
 8005f1a:	e7c2      	b.n	8005ea2 <_dtoa_r+0x9f2>
 8005f1c:	9a02      	ldr	r2, [sp, #8]
 8005f1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005f22:	eba5 030b 	sub.w	r3, r5, fp
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d021      	beq.n	8005f6e <_dtoa_r+0xabe>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	220a      	movs	r2, #10
 8005f2e:	9904      	ldr	r1, [sp, #16]
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fe2b 	bl	8006b8c <__multadd>
 8005f36:	45b1      	cmp	r9, r6
 8005f38:	9004      	str	r0, [sp, #16]
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	f04f 020a 	mov.w	r2, #10
 8005f42:	4649      	mov	r1, r9
 8005f44:	4620      	mov	r0, r4
 8005f46:	d105      	bne.n	8005f54 <_dtoa_r+0xaa4>
 8005f48:	f000 fe20 	bl	8006b8c <__multadd>
 8005f4c:	4681      	mov	r9, r0
 8005f4e:	4606      	mov	r6, r0
 8005f50:	9505      	str	r5, [sp, #20]
 8005f52:	e776      	b.n	8005e42 <_dtoa_r+0x992>
 8005f54:	f000 fe1a 	bl	8006b8c <__multadd>
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4681      	mov	r9, r0
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	220a      	movs	r2, #10
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 fe13 	bl	8006b8c <__multadd>
 8005f66:	4606      	mov	r6, r0
 8005f68:	e7f2      	b.n	8005f50 <_dtoa_r+0xaa0>
 8005f6a:	f04f 0900 	mov.w	r9, #0
 8005f6e:	2201      	movs	r2, #1
 8005f70:	9904      	ldr	r1, [sp, #16]
 8005f72:	4620      	mov	r0, r4
 8005f74:	f000 ffbe 	bl	8006ef4 <__lshift>
 8005f78:	4639      	mov	r1, r7
 8005f7a:	9004      	str	r0, [sp, #16]
 8005f7c:	f001 f80e 	bl	8006f9c <__mcmp>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	dcb6      	bgt.n	8005ef2 <_dtoa_r+0xa42>
 8005f84:	d102      	bne.n	8005f8c <_dtoa_r+0xadc>
 8005f86:	f018 0f01 	tst.w	r8, #1
 8005f8a:	d1b2      	bne.n	8005ef2 <_dtoa_r+0xa42>
 8005f8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	f105 32ff 	add.w	r2, r5, #4294967295
 8005f96:	f47f af0a 	bne.w	8005dae <_dtoa_r+0x8fe>
 8005f9a:	4615      	mov	r5, r2
 8005f9c:	e7f6      	b.n	8005f8c <_dtoa_r+0xadc>
 8005f9e:	4593      	cmp	fp, r2
 8005fa0:	d105      	bne.n	8005fae <_dtoa_r+0xafe>
 8005fa2:	2331      	movs	r3, #49	; 0x31
 8005fa4:	f10a 0a01 	add.w	sl, sl, #1
 8005fa8:	f88b 3000 	strb.w	r3, [fp]
 8005fac:	e6ff      	b.n	8005dae <_dtoa_r+0x8fe>
 8005fae:	4615      	mov	r5, r2
 8005fb0:	e79f      	b.n	8005ef2 <_dtoa_r+0xa42>
 8005fb2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006018 <_dtoa_r+0xb68>
 8005fb6:	e007      	b.n	8005fc8 <_dtoa_r+0xb18>
 8005fb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800601c <_dtoa_r+0xb6c>
 8005fbe:	b11b      	cbz	r3, 8005fc8 <_dtoa_r+0xb18>
 8005fc0:	f10b 0308 	add.w	r3, fp, #8
 8005fc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	4658      	mov	r0, fp
 8005fca:	b017      	add	sp, #92	; 0x5c
 8005fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd0:	9b06      	ldr	r3, [sp, #24]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	f77f ae35 	ble.w	8005c42 <_dtoa_r+0x792>
 8005fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fda:	9307      	str	r3, [sp, #28]
 8005fdc:	e649      	b.n	8005c72 <_dtoa_r+0x7c2>
 8005fde:	9b02      	ldr	r3, [sp, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	dc03      	bgt.n	8005fec <_dtoa_r+0xb3c>
 8005fe4:	9b06      	ldr	r3, [sp, #24]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	f73f aecc 	bgt.w	8005d84 <_dtoa_r+0x8d4>
 8005fec:	465d      	mov	r5, fp
 8005fee:	4639      	mov	r1, r7
 8005ff0:	9804      	ldr	r0, [sp, #16]
 8005ff2:	f7ff f9cf 	bl	8005394 <quorem>
 8005ff6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005ffa:	f805 8b01 	strb.w	r8, [r5], #1
 8005ffe:	9a02      	ldr	r2, [sp, #8]
 8006000:	eba5 030b 	sub.w	r3, r5, fp
 8006004:	429a      	cmp	r2, r3
 8006006:	ddb0      	ble.n	8005f6a <_dtoa_r+0xaba>
 8006008:	2300      	movs	r3, #0
 800600a:	220a      	movs	r2, #10
 800600c:	9904      	ldr	r1, [sp, #16]
 800600e:	4620      	mov	r0, r4
 8006010:	f000 fdbc 	bl	8006b8c <__multadd>
 8006014:	9004      	str	r0, [sp, #16]
 8006016:	e7ea      	b.n	8005fee <_dtoa_r+0xb3e>
 8006018:	08007ad8 	.word	0x08007ad8
 800601c:	08007b58 	.word	0x08007b58

08006020 <__sflush_r>:
 8006020:	898a      	ldrh	r2, [r1, #12]
 8006022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006026:	4605      	mov	r5, r0
 8006028:	0710      	lsls	r0, r2, #28
 800602a:	460c      	mov	r4, r1
 800602c:	d458      	bmi.n	80060e0 <__sflush_r+0xc0>
 800602e:	684b      	ldr	r3, [r1, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	dc05      	bgt.n	8006040 <__sflush_r+0x20>
 8006034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	dc02      	bgt.n	8006040 <__sflush_r+0x20>
 800603a:	2000      	movs	r0, #0
 800603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006042:	2e00      	cmp	r6, #0
 8006044:	d0f9      	beq.n	800603a <__sflush_r+0x1a>
 8006046:	2300      	movs	r3, #0
 8006048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800604c:	682f      	ldr	r7, [r5, #0]
 800604e:	6a21      	ldr	r1, [r4, #32]
 8006050:	602b      	str	r3, [r5, #0]
 8006052:	d032      	beq.n	80060ba <__sflush_r+0x9a>
 8006054:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	075a      	lsls	r2, r3, #29
 800605a:	d505      	bpl.n	8006068 <__sflush_r+0x48>
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	1ac0      	subs	r0, r0, r3
 8006060:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006062:	b10b      	cbz	r3, 8006068 <__sflush_r+0x48>
 8006064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006066:	1ac0      	subs	r0, r0, r3
 8006068:	2300      	movs	r3, #0
 800606a:	4602      	mov	r2, r0
 800606c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800606e:	6a21      	ldr	r1, [r4, #32]
 8006070:	4628      	mov	r0, r5
 8006072:	47b0      	blx	r6
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	d106      	bne.n	8006088 <__sflush_r+0x68>
 800607a:	6829      	ldr	r1, [r5, #0]
 800607c:	291d      	cmp	r1, #29
 800607e:	d848      	bhi.n	8006112 <__sflush_r+0xf2>
 8006080:	4a29      	ldr	r2, [pc, #164]	; (8006128 <__sflush_r+0x108>)
 8006082:	40ca      	lsrs	r2, r1
 8006084:	07d6      	lsls	r6, r2, #31
 8006086:	d544      	bpl.n	8006112 <__sflush_r+0xf2>
 8006088:	2200      	movs	r2, #0
 800608a:	6062      	str	r2, [r4, #4]
 800608c:	04d9      	lsls	r1, r3, #19
 800608e:	6922      	ldr	r2, [r4, #16]
 8006090:	6022      	str	r2, [r4, #0]
 8006092:	d504      	bpl.n	800609e <__sflush_r+0x7e>
 8006094:	1c42      	adds	r2, r0, #1
 8006096:	d101      	bne.n	800609c <__sflush_r+0x7c>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	b903      	cbnz	r3, 800609e <__sflush_r+0x7e>
 800609c:	6560      	str	r0, [r4, #84]	; 0x54
 800609e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060a0:	602f      	str	r7, [r5, #0]
 80060a2:	2900      	cmp	r1, #0
 80060a4:	d0c9      	beq.n	800603a <__sflush_r+0x1a>
 80060a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060aa:	4299      	cmp	r1, r3
 80060ac:	d002      	beq.n	80060b4 <__sflush_r+0x94>
 80060ae:	4628      	mov	r0, r5
 80060b0:	f001 f92e 	bl	8007310 <_free_r>
 80060b4:	2000      	movs	r0, #0
 80060b6:	6360      	str	r0, [r4, #52]	; 0x34
 80060b8:	e7c0      	b.n	800603c <__sflush_r+0x1c>
 80060ba:	2301      	movs	r3, #1
 80060bc:	4628      	mov	r0, r5
 80060be:	47b0      	blx	r6
 80060c0:	1c41      	adds	r1, r0, #1
 80060c2:	d1c8      	bne.n	8006056 <__sflush_r+0x36>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0c5      	beq.n	8006056 <__sflush_r+0x36>
 80060ca:	2b1d      	cmp	r3, #29
 80060cc:	d001      	beq.n	80060d2 <__sflush_r+0xb2>
 80060ce:	2b16      	cmp	r3, #22
 80060d0:	d101      	bne.n	80060d6 <__sflush_r+0xb6>
 80060d2:	602f      	str	r7, [r5, #0]
 80060d4:	e7b1      	b.n	800603a <__sflush_r+0x1a>
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060dc:	81a3      	strh	r3, [r4, #12]
 80060de:	e7ad      	b.n	800603c <__sflush_r+0x1c>
 80060e0:	690f      	ldr	r7, [r1, #16]
 80060e2:	2f00      	cmp	r7, #0
 80060e4:	d0a9      	beq.n	800603a <__sflush_r+0x1a>
 80060e6:	0793      	lsls	r3, r2, #30
 80060e8:	680e      	ldr	r6, [r1, #0]
 80060ea:	bf08      	it	eq
 80060ec:	694b      	ldreq	r3, [r1, #20]
 80060ee:	600f      	str	r7, [r1, #0]
 80060f0:	bf18      	it	ne
 80060f2:	2300      	movne	r3, #0
 80060f4:	eba6 0807 	sub.w	r8, r6, r7
 80060f8:	608b      	str	r3, [r1, #8]
 80060fa:	f1b8 0f00 	cmp.w	r8, #0
 80060fe:	dd9c      	ble.n	800603a <__sflush_r+0x1a>
 8006100:	4643      	mov	r3, r8
 8006102:	463a      	mov	r2, r7
 8006104:	6a21      	ldr	r1, [r4, #32]
 8006106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006108:	4628      	mov	r0, r5
 800610a:	47b0      	blx	r6
 800610c:	2800      	cmp	r0, #0
 800610e:	dc06      	bgt.n	800611e <__sflush_r+0xfe>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006116:	81a3      	strh	r3, [r4, #12]
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	e78e      	b.n	800603c <__sflush_r+0x1c>
 800611e:	4407      	add	r7, r0
 8006120:	eba8 0800 	sub.w	r8, r8, r0
 8006124:	e7e9      	b.n	80060fa <__sflush_r+0xda>
 8006126:	bf00      	nop
 8006128:	20400001 	.word	0x20400001

0800612c <_fflush_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	690b      	ldr	r3, [r1, #16]
 8006130:	4605      	mov	r5, r0
 8006132:	460c      	mov	r4, r1
 8006134:	b1db      	cbz	r3, 800616e <_fflush_r+0x42>
 8006136:	b118      	cbz	r0, 8006140 <_fflush_r+0x14>
 8006138:	6983      	ldr	r3, [r0, #24]
 800613a:	b90b      	cbnz	r3, 8006140 <_fflush_r+0x14>
 800613c:	f000 f872 	bl	8006224 <__sinit>
 8006140:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <_fflush_r+0x48>)
 8006142:	429c      	cmp	r4, r3
 8006144:	d109      	bne.n	800615a <_fflush_r+0x2e>
 8006146:	686c      	ldr	r4, [r5, #4]
 8006148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800614c:	b17b      	cbz	r3, 800616e <_fflush_r+0x42>
 800614e:	4621      	mov	r1, r4
 8006150:	4628      	mov	r0, r5
 8006152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006156:	f7ff bf63 	b.w	8006020 <__sflush_r>
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <_fflush_r+0x4c>)
 800615c:	429c      	cmp	r4, r3
 800615e:	d101      	bne.n	8006164 <_fflush_r+0x38>
 8006160:	68ac      	ldr	r4, [r5, #8]
 8006162:	e7f1      	b.n	8006148 <_fflush_r+0x1c>
 8006164:	4b05      	ldr	r3, [pc, #20]	; (800617c <_fflush_r+0x50>)
 8006166:	429c      	cmp	r4, r3
 8006168:	bf08      	it	eq
 800616a:	68ec      	ldreq	r4, [r5, #12]
 800616c:	e7ec      	b.n	8006148 <_fflush_r+0x1c>
 800616e:	2000      	movs	r0, #0
 8006170:	bd38      	pop	{r3, r4, r5, pc}
 8006172:	bf00      	nop
 8006174:	08007b88 	.word	0x08007b88
 8006178:	08007ba8 	.word	0x08007ba8
 800617c:	08007b68 	.word	0x08007b68

08006180 <fflush>:
 8006180:	4601      	mov	r1, r0
 8006182:	b920      	cbnz	r0, 800618e <fflush+0xe>
 8006184:	4b04      	ldr	r3, [pc, #16]	; (8006198 <fflush+0x18>)
 8006186:	4905      	ldr	r1, [pc, #20]	; (800619c <fflush+0x1c>)
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	f000 b8d3 	b.w	8006334 <_fwalk_reent>
 800618e:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <fflush+0x20>)
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	f7ff bfcb 	b.w	800612c <_fflush_r>
 8006196:	bf00      	nop
 8006198:	08007ac4 	.word	0x08007ac4
 800619c:	0800612d 	.word	0x0800612d
 80061a0:	2000000c 	.word	0x2000000c

080061a4 <std>:
 80061a4:	2300      	movs	r3, #0
 80061a6:	b510      	push	{r4, lr}
 80061a8:	4604      	mov	r4, r0
 80061aa:	e9c0 3300 	strd	r3, r3, [r0]
 80061ae:	6083      	str	r3, [r0, #8]
 80061b0:	8181      	strh	r1, [r0, #12]
 80061b2:	6643      	str	r3, [r0, #100]	; 0x64
 80061b4:	81c2      	strh	r2, [r0, #14]
 80061b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ba:	6183      	str	r3, [r0, #24]
 80061bc:	4619      	mov	r1, r3
 80061be:	2208      	movs	r2, #8
 80061c0:	305c      	adds	r0, #92	; 0x5c
 80061c2:	f7fd fa7d 	bl	80036c0 <memset>
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <std+0x38>)
 80061c8:	6263      	str	r3, [r4, #36]	; 0x24
 80061ca:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <std+0x3c>)
 80061cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <std+0x40>)
 80061d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <std+0x44>)
 80061d4:	6224      	str	r4, [r4, #32]
 80061d6:	6323      	str	r3, [r4, #48]	; 0x30
 80061d8:	bd10      	pop	{r4, pc}
 80061da:	bf00      	nop
 80061dc:	08007851 	.word	0x08007851
 80061e0:	08007873 	.word	0x08007873
 80061e4:	080078ab 	.word	0x080078ab
 80061e8:	080078cf 	.word	0x080078cf

080061ec <_cleanup_r>:
 80061ec:	4901      	ldr	r1, [pc, #4]	; (80061f4 <_cleanup_r+0x8>)
 80061ee:	f000 b8a1 	b.w	8006334 <_fwalk_reent>
 80061f2:	bf00      	nop
 80061f4:	0800612d 	.word	0x0800612d

080061f8 <__sfmoreglue>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	1e4a      	subs	r2, r1, #1
 80061fc:	2568      	movs	r5, #104	; 0x68
 80061fe:	4355      	muls	r5, r2
 8006200:	460e      	mov	r6, r1
 8006202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006206:	f001 f8d1 	bl	80073ac <_malloc_r>
 800620a:	4604      	mov	r4, r0
 800620c:	b140      	cbz	r0, 8006220 <__sfmoreglue+0x28>
 800620e:	2100      	movs	r1, #0
 8006210:	e9c0 1600 	strd	r1, r6, [r0]
 8006214:	300c      	adds	r0, #12
 8006216:	60a0      	str	r0, [r4, #8]
 8006218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800621c:	f7fd fa50 	bl	80036c0 <memset>
 8006220:	4620      	mov	r0, r4
 8006222:	bd70      	pop	{r4, r5, r6, pc}

08006224 <__sinit>:
 8006224:	6983      	ldr	r3, [r0, #24]
 8006226:	b510      	push	{r4, lr}
 8006228:	4604      	mov	r4, r0
 800622a:	bb33      	cbnz	r3, 800627a <__sinit+0x56>
 800622c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006230:	6503      	str	r3, [r0, #80]	; 0x50
 8006232:	4b12      	ldr	r3, [pc, #72]	; (800627c <__sinit+0x58>)
 8006234:	4a12      	ldr	r2, [pc, #72]	; (8006280 <__sinit+0x5c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6282      	str	r2, [r0, #40]	; 0x28
 800623a:	4298      	cmp	r0, r3
 800623c:	bf04      	itt	eq
 800623e:	2301      	moveq	r3, #1
 8006240:	6183      	streq	r3, [r0, #24]
 8006242:	f000 f81f 	bl	8006284 <__sfp>
 8006246:	6060      	str	r0, [r4, #4]
 8006248:	4620      	mov	r0, r4
 800624a:	f000 f81b 	bl	8006284 <__sfp>
 800624e:	60a0      	str	r0, [r4, #8]
 8006250:	4620      	mov	r0, r4
 8006252:	f000 f817 	bl	8006284 <__sfp>
 8006256:	2200      	movs	r2, #0
 8006258:	60e0      	str	r0, [r4, #12]
 800625a:	2104      	movs	r1, #4
 800625c:	6860      	ldr	r0, [r4, #4]
 800625e:	f7ff ffa1 	bl	80061a4 <std>
 8006262:	2201      	movs	r2, #1
 8006264:	2109      	movs	r1, #9
 8006266:	68a0      	ldr	r0, [r4, #8]
 8006268:	f7ff ff9c 	bl	80061a4 <std>
 800626c:	2202      	movs	r2, #2
 800626e:	2112      	movs	r1, #18
 8006270:	68e0      	ldr	r0, [r4, #12]
 8006272:	f7ff ff97 	bl	80061a4 <std>
 8006276:	2301      	movs	r3, #1
 8006278:	61a3      	str	r3, [r4, #24]
 800627a:	bd10      	pop	{r4, pc}
 800627c:	08007ac4 	.word	0x08007ac4
 8006280:	080061ed 	.word	0x080061ed

08006284 <__sfp>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <__sfp+0x70>)
 8006288:	681e      	ldr	r6, [r3, #0]
 800628a:	69b3      	ldr	r3, [r6, #24]
 800628c:	4607      	mov	r7, r0
 800628e:	b913      	cbnz	r3, 8006296 <__sfp+0x12>
 8006290:	4630      	mov	r0, r6
 8006292:	f7ff ffc7 	bl	8006224 <__sinit>
 8006296:	3648      	adds	r6, #72	; 0x48
 8006298:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800629c:	3b01      	subs	r3, #1
 800629e:	d503      	bpl.n	80062a8 <__sfp+0x24>
 80062a0:	6833      	ldr	r3, [r6, #0]
 80062a2:	b133      	cbz	r3, 80062b2 <__sfp+0x2e>
 80062a4:	6836      	ldr	r6, [r6, #0]
 80062a6:	e7f7      	b.n	8006298 <__sfp+0x14>
 80062a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062ac:	b16d      	cbz	r5, 80062ca <__sfp+0x46>
 80062ae:	3468      	adds	r4, #104	; 0x68
 80062b0:	e7f4      	b.n	800629c <__sfp+0x18>
 80062b2:	2104      	movs	r1, #4
 80062b4:	4638      	mov	r0, r7
 80062b6:	f7ff ff9f 	bl	80061f8 <__sfmoreglue>
 80062ba:	6030      	str	r0, [r6, #0]
 80062bc:	2800      	cmp	r0, #0
 80062be:	d1f1      	bne.n	80062a4 <__sfp+0x20>
 80062c0:	230c      	movs	r3, #12
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4604      	mov	r4, r0
 80062c6:	4620      	mov	r0, r4
 80062c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ca:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <__sfp+0x74>)
 80062cc:	6665      	str	r5, [r4, #100]	; 0x64
 80062ce:	e9c4 5500 	strd	r5, r5, [r4]
 80062d2:	60a5      	str	r5, [r4, #8]
 80062d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80062d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80062dc:	2208      	movs	r2, #8
 80062de:	4629      	mov	r1, r5
 80062e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062e4:	f7fd f9ec 	bl	80036c0 <memset>
 80062e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062f0:	e7e9      	b.n	80062c6 <__sfp+0x42>
 80062f2:	bf00      	nop
 80062f4:	08007ac4 	.word	0x08007ac4
 80062f8:	ffff0001 	.word	0xffff0001

080062fc <_fwalk>:
 80062fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006300:	4688      	mov	r8, r1
 8006302:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006306:	2600      	movs	r6, #0
 8006308:	b914      	cbnz	r4, 8006310 <_fwalk+0x14>
 800630a:	4630      	mov	r0, r6
 800630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006310:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006314:	3f01      	subs	r7, #1
 8006316:	d501      	bpl.n	800631c <_fwalk+0x20>
 8006318:	6824      	ldr	r4, [r4, #0]
 800631a:	e7f5      	b.n	8006308 <_fwalk+0xc>
 800631c:	89ab      	ldrh	r3, [r5, #12]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d906      	bls.n	8006330 <_fwalk+0x34>
 8006322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006326:	3301      	adds	r3, #1
 8006328:	d002      	beq.n	8006330 <_fwalk+0x34>
 800632a:	4628      	mov	r0, r5
 800632c:	47c0      	blx	r8
 800632e:	4306      	orrs	r6, r0
 8006330:	3568      	adds	r5, #104	; 0x68
 8006332:	e7ef      	b.n	8006314 <_fwalk+0x18>

08006334 <_fwalk_reent>:
 8006334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006338:	4680      	mov	r8, r0
 800633a:	4689      	mov	r9, r1
 800633c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006340:	2600      	movs	r6, #0
 8006342:	b914      	cbnz	r4, 800634a <_fwalk_reent+0x16>
 8006344:	4630      	mov	r0, r6
 8006346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800634e:	3f01      	subs	r7, #1
 8006350:	d501      	bpl.n	8006356 <_fwalk_reent+0x22>
 8006352:	6824      	ldr	r4, [r4, #0]
 8006354:	e7f5      	b.n	8006342 <_fwalk_reent+0xe>
 8006356:	89ab      	ldrh	r3, [r5, #12]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d907      	bls.n	800636c <_fwalk_reent+0x38>
 800635c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006360:	3301      	adds	r3, #1
 8006362:	d003      	beq.n	800636c <_fwalk_reent+0x38>
 8006364:	4629      	mov	r1, r5
 8006366:	4640      	mov	r0, r8
 8006368:	47c8      	blx	r9
 800636a:	4306      	orrs	r6, r0
 800636c:	3568      	adds	r5, #104	; 0x68
 800636e:	e7ee      	b.n	800634e <_fwalk_reent+0x1a>

08006370 <rshift>:
 8006370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006372:	6906      	ldr	r6, [r0, #16]
 8006374:	114b      	asrs	r3, r1, #5
 8006376:	429e      	cmp	r6, r3
 8006378:	f100 0414 	add.w	r4, r0, #20
 800637c:	dd30      	ble.n	80063e0 <rshift+0x70>
 800637e:	f011 011f 	ands.w	r1, r1, #31
 8006382:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006386:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800638a:	d108      	bne.n	800639e <rshift+0x2e>
 800638c:	4621      	mov	r1, r4
 800638e:	42b2      	cmp	r2, r6
 8006390:	460b      	mov	r3, r1
 8006392:	d211      	bcs.n	80063b8 <rshift+0x48>
 8006394:	f852 3b04 	ldr.w	r3, [r2], #4
 8006398:	f841 3b04 	str.w	r3, [r1], #4
 800639c:	e7f7      	b.n	800638e <rshift+0x1e>
 800639e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80063a2:	f1c1 0c20 	rsb	ip, r1, #32
 80063a6:	40cd      	lsrs	r5, r1
 80063a8:	3204      	adds	r2, #4
 80063aa:	4623      	mov	r3, r4
 80063ac:	42b2      	cmp	r2, r6
 80063ae:	4617      	mov	r7, r2
 80063b0:	d30c      	bcc.n	80063cc <rshift+0x5c>
 80063b2:	601d      	str	r5, [r3, #0]
 80063b4:	b105      	cbz	r5, 80063b8 <rshift+0x48>
 80063b6:	3304      	adds	r3, #4
 80063b8:	1b1a      	subs	r2, r3, r4
 80063ba:	42a3      	cmp	r3, r4
 80063bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80063c0:	bf08      	it	eq
 80063c2:	2300      	moveq	r3, #0
 80063c4:	6102      	str	r2, [r0, #16]
 80063c6:	bf08      	it	eq
 80063c8:	6143      	streq	r3, [r0, #20]
 80063ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063cc:	683f      	ldr	r7, [r7, #0]
 80063ce:	fa07 f70c 	lsl.w	r7, r7, ip
 80063d2:	433d      	orrs	r5, r7
 80063d4:	f843 5b04 	str.w	r5, [r3], #4
 80063d8:	f852 5b04 	ldr.w	r5, [r2], #4
 80063dc:	40cd      	lsrs	r5, r1
 80063de:	e7e5      	b.n	80063ac <rshift+0x3c>
 80063e0:	4623      	mov	r3, r4
 80063e2:	e7e9      	b.n	80063b8 <rshift+0x48>

080063e4 <__hexdig_fun>:
 80063e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80063e8:	2b09      	cmp	r3, #9
 80063ea:	d802      	bhi.n	80063f2 <__hexdig_fun+0xe>
 80063ec:	3820      	subs	r0, #32
 80063ee:	b2c0      	uxtb	r0, r0
 80063f0:	4770      	bx	lr
 80063f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80063f6:	2b05      	cmp	r3, #5
 80063f8:	d801      	bhi.n	80063fe <__hexdig_fun+0x1a>
 80063fa:	3847      	subs	r0, #71	; 0x47
 80063fc:	e7f7      	b.n	80063ee <__hexdig_fun+0xa>
 80063fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006402:	2b05      	cmp	r3, #5
 8006404:	d801      	bhi.n	800640a <__hexdig_fun+0x26>
 8006406:	3827      	subs	r0, #39	; 0x27
 8006408:	e7f1      	b.n	80063ee <__hexdig_fun+0xa>
 800640a:	2000      	movs	r0, #0
 800640c:	4770      	bx	lr

0800640e <__gethex>:
 800640e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006412:	b08b      	sub	sp, #44	; 0x2c
 8006414:	468a      	mov	sl, r1
 8006416:	9002      	str	r0, [sp, #8]
 8006418:	9816      	ldr	r0, [sp, #88]	; 0x58
 800641a:	9306      	str	r3, [sp, #24]
 800641c:	4690      	mov	r8, r2
 800641e:	f000 fad0 	bl	80069c2 <__localeconv_l>
 8006422:	6803      	ldr	r3, [r0, #0]
 8006424:	9303      	str	r3, [sp, #12]
 8006426:	4618      	mov	r0, r3
 8006428:	f7f9 fef2 	bl	8000210 <strlen>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	9001      	str	r0, [sp, #4]
 8006430:	4403      	add	r3, r0
 8006432:	f04f 0b00 	mov.w	fp, #0
 8006436:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800643a:	9307      	str	r3, [sp, #28]
 800643c:	f8da 3000 	ldr.w	r3, [sl]
 8006440:	3302      	adds	r3, #2
 8006442:	461f      	mov	r7, r3
 8006444:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006448:	2830      	cmp	r0, #48	; 0x30
 800644a:	d06c      	beq.n	8006526 <__gethex+0x118>
 800644c:	f7ff ffca 	bl	80063e4 <__hexdig_fun>
 8006450:	4604      	mov	r4, r0
 8006452:	2800      	cmp	r0, #0
 8006454:	d16a      	bne.n	800652c <__gethex+0x11e>
 8006456:	9a01      	ldr	r2, [sp, #4]
 8006458:	9903      	ldr	r1, [sp, #12]
 800645a:	4638      	mov	r0, r7
 800645c:	f001 fa3b 	bl	80078d6 <strncmp>
 8006460:	2800      	cmp	r0, #0
 8006462:	d166      	bne.n	8006532 <__gethex+0x124>
 8006464:	9b01      	ldr	r3, [sp, #4]
 8006466:	5cf8      	ldrb	r0, [r7, r3]
 8006468:	18fe      	adds	r6, r7, r3
 800646a:	f7ff ffbb 	bl	80063e4 <__hexdig_fun>
 800646e:	2800      	cmp	r0, #0
 8006470:	d062      	beq.n	8006538 <__gethex+0x12a>
 8006472:	4633      	mov	r3, r6
 8006474:	7818      	ldrb	r0, [r3, #0]
 8006476:	2830      	cmp	r0, #48	; 0x30
 8006478:	461f      	mov	r7, r3
 800647a:	f103 0301 	add.w	r3, r3, #1
 800647e:	d0f9      	beq.n	8006474 <__gethex+0x66>
 8006480:	f7ff ffb0 	bl	80063e4 <__hexdig_fun>
 8006484:	fab0 f580 	clz	r5, r0
 8006488:	096d      	lsrs	r5, r5, #5
 800648a:	4634      	mov	r4, r6
 800648c:	f04f 0b01 	mov.w	fp, #1
 8006490:	463a      	mov	r2, r7
 8006492:	4616      	mov	r6, r2
 8006494:	3201      	adds	r2, #1
 8006496:	7830      	ldrb	r0, [r6, #0]
 8006498:	f7ff ffa4 	bl	80063e4 <__hexdig_fun>
 800649c:	2800      	cmp	r0, #0
 800649e:	d1f8      	bne.n	8006492 <__gethex+0x84>
 80064a0:	9a01      	ldr	r2, [sp, #4]
 80064a2:	9903      	ldr	r1, [sp, #12]
 80064a4:	4630      	mov	r0, r6
 80064a6:	f001 fa16 	bl	80078d6 <strncmp>
 80064aa:	b950      	cbnz	r0, 80064c2 <__gethex+0xb4>
 80064ac:	b954      	cbnz	r4, 80064c4 <__gethex+0xb6>
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	18f4      	adds	r4, r6, r3
 80064b2:	4622      	mov	r2, r4
 80064b4:	4616      	mov	r6, r2
 80064b6:	3201      	adds	r2, #1
 80064b8:	7830      	ldrb	r0, [r6, #0]
 80064ba:	f7ff ff93 	bl	80063e4 <__hexdig_fun>
 80064be:	2800      	cmp	r0, #0
 80064c0:	d1f8      	bne.n	80064b4 <__gethex+0xa6>
 80064c2:	b10c      	cbz	r4, 80064c8 <__gethex+0xba>
 80064c4:	1ba4      	subs	r4, r4, r6
 80064c6:	00a4      	lsls	r4, r4, #2
 80064c8:	7833      	ldrb	r3, [r6, #0]
 80064ca:	2b50      	cmp	r3, #80	; 0x50
 80064cc:	d001      	beq.n	80064d2 <__gethex+0xc4>
 80064ce:	2b70      	cmp	r3, #112	; 0x70
 80064d0:	d140      	bne.n	8006554 <__gethex+0x146>
 80064d2:	7873      	ldrb	r3, [r6, #1]
 80064d4:	2b2b      	cmp	r3, #43	; 0x2b
 80064d6:	d031      	beq.n	800653c <__gethex+0x12e>
 80064d8:	2b2d      	cmp	r3, #45	; 0x2d
 80064da:	d033      	beq.n	8006544 <__gethex+0x136>
 80064dc:	1c71      	adds	r1, r6, #1
 80064de:	f04f 0900 	mov.w	r9, #0
 80064e2:	7808      	ldrb	r0, [r1, #0]
 80064e4:	f7ff ff7e 	bl	80063e4 <__hexdig_fun>
 80064e8:	1e43      	subs	r3, r0, #1
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b18      	cmp	r3, #24
 80064ee:	d831      	bhi.n	8006554 <__gethex+0x146>
 80064f0:	f1a0 0210 	sub.w	r2, r0, #16
 80064f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80064f8:	f7ff ff74 	bl	80063e4 <__hexdig_fun>
 80064fc:	1e43      	subs	r3, r0, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b18      	cmp	r3, #24
 8006502:	d922      	bls.n	800654a <__gethex+0x13c>
 8006504:	f1b9 0f00 	cmp.w	r9, #0
 8006508:	d000      	beq.n	800650c <__gethex+0xfe>
 800650a:	4252      	negs	r2, r2
 800650c:	4414      	add	r4, r2
 800650e:	f8ca 1000 	str.w	r1, [sl]
 8006512:	b30d      	cbz	r5, 8006558 <__gethex+0x14a>
 8006514:	f1bb 0f00 	cmp.w	fp, #0
 8006518:	bf0c      	ite	eq
 800651a:	2706      	moveq	r7, #6
 800651c:	2700      	movne	r7, #0
 800651e:	4638      	mov	r0, r7
 8006520:	b00b      	add	sp, #44	; 0x2c
 8006522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006526:	f10b 0b01 	add.w	fp, fp, #1
 800652a:	e78a      	b.n	8006442 <__gethex+0x34>
 800652c:	2500      	movs	r5, #0
 800652e:	462c      	mov	r4, r5
 8006530:	e7ae      	b.n	8006490 <__gethex+0x82>
 8006532:	463e      	mov	r6, r7
 8006534:	2501      	movs	r5, #1
 8006536:	e7c7      	b.n	80064c8 <__gethex+0xba>
 8006538:	4604      	mov	r4, r0
 800653a:	e7fb      	b.n	8006534 <__gethex+0x126>
 800653c:	f04f 0900 	mov.w	r9, #0
 8006540:	1cb1      	adds	r1, r6, #2
 8006542:	e7ce      	b.n	80064e2 <__gethex+0xd4>
 8006544:	f04f 0901 	mov.w	r9, #1
 8006548:	e7fa      	b.n	8006540 <__gethex+0x132>
 800654a:	230a      	movs	r3, #10
 800654c:	fb03 0202 	mla	r2, r3, r2, r0
 8006550:	3a10      	subs	r2, #16
 8006552:	e7cf      	b.n	80064f4 <__gethex+0xe6>
 8006554:	4631      	mov	r1, r6
 8006556:	e7da      	b.n	800650e <__gethex+0x100>
 8006558:	1bf3      	subs	r3, r6, r7
 800655a:	3b01      	subs	r3, #1
 800655c:	4629      	mov	r1, r5
 800655e:	2b07      	cmp	r3, #7
 8006560:	dc49      	bgt.n	80065f6 <__gethex+0x1e8>
 8006562:	9802      	ldr	r0, [sp, #8]
 8006564:	f000 fac7 	bl	8006af6 <_Balloc>
 8006568:	9b01      	ldr	r3, [sp, #4]
 800656a:	f100 0914 	add.w	r9, r0, #20
 800656e:	f04f 0b00 	mov.w	fp, #0
 8006572:	f1c3 0301 	rsb	r3, r3, #1
 8006576:	4605      	mov	r5, r0
 8006578:	f8cd 9010 	str.w	r9, [sp, #16]
 800657c:	46da      	mov	sl, fp
 800657e:	9308      	str	r3, [sp, #32]
 8006580:	42b7      	cmp	r7, r6
 8006582:	d33b      	bcc.n	80065fc <__gethex+0x1ee>
 8006584:	9804      	ldr	r0, [sp, #16]
 8006586:	f840 ab04 	str.w	sl, [r0], #4
 800658a:	eba0 0009 	sub.w	r0, r0, r9
 800658e:	1080      	asrs	r0, r0, #2
 8006590:	6128      	str	r0, [r5, #16]
 8006592:	0147      	lsls	r7, r0, #5
 8006594:	4650      	mov	r0, sl
 8006596:	f000 fb72 	bl	8006c7e <__hi0bits>
 800659a:	f8d8 6000 	ldr.w	r6, [r8]
 800659e:	1a3f      	subs	r7, r7, r0
 80065a0:	42b7      	cmp	r7, r6
 80065a2:	dd64      	ble.n	800666e <__gethex+0x260>
 80065a4:	1bbf      	subs	r7, r7, r6
 80065a6:	4639      	mov	r1, r7
 80065a8:	4628      	mov	r0, r5
 80065aa:	f000 fe81 	bl	80072b0 <__any_on>
 80065ae:	4682      	mov	sl, r0
 80065b0:	b178      	cbz	r0, 80065d2 <__gethex+0x1c4>
 80065b2:	1e7b      	subs	r3, r7, #1
 80065b4:	1159      	asrs	r1, r3, #5
 80065b6:	f003 021f 	and.w	r2, r3, #31
 80065ba:	f04f 0a01 	mov.w	sl, #1
 80065be:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80065c2:	fa0a f202 	lsl.w	r2, sl, r2
 80065c6:	420a      	tst	r2, r1
 80065c8:	d003      	beq.n	80065d2 <__gethex+0x1c4>
 80065ca:	4553      	cmp	r3, sl
 80065cc:	dc46      	bgt.n	800665c <__gethex+0x24e>
 80065ce:	f04f 0a02 	mov.w	sl, #2
 80065d2:	4639      	mov	r1, r7
 80065d4:	4628      	mov	r0, r5
 80065d6:	f7ff fecb 	bl	8006370 <rshift>
 80065da:	443c      	add	r4, r7
 80065dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	da52      	bge.n	800668a <__gethex+0x27c>
 80065e4:	4629      	mov	r1, r5
 80065e6:	9802      	ldr	r0, [sp, #8]
 80065e8:	f000 fab9 	bl	8006b5e <_Bfree>
 80065ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065ee:	2300      	movs	r3, #0
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	27a3      	movs	r7, #163	; 0xa3
 80065f4:	e793      	b.n	800651e <__gethex+0x110>
 80065f6:	3101      	adds	r1, #1
 80065f8:	105b      	asrs	r3, r3, #1
 80065fa:	e7b0      	b.n	800655e <__gethex+0x150>
 80065fc:	1e73      	subs	r3, r6, #1
 80065fe:	9305      	str	r3, [sp, #20]
 8006600:	9a07      	ldr	r2, [sp, #28]
 8006602:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006606:	4293      	cmp	r3, r2
 8006608:	d018      	beq.n	800663c <__gethex+0x22e>
 800660a:	f1bb 0f20 	cmp.w	fp, #32
 800660e:	d107      	bne.n	8006620 <__gethex+0x212>
 8006610:	9b04      	ldr	r3, [sp, #16]
 8006612:	f8c3 a000 	str.w	sl, [r3]
 8006616:	3304      	adds	r3, #4
 8006618:	f04f 0a00 	mov.w	sl, #0
 800661c:	9304      	str	r3, [sp, #16]
 800661e:	46d3      	mov	fp, sl
 8006620:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006624:	f7ff fede 	bl	80063e4 <__hexdig_fun>
 8006628:	f000 000f 	and.w	r0, r0, #15
 800662c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006630:	ea4a 0a00 	orr.w	sl, sl, r0
 8006634:	f10b 0b04 	add.w	fp, fp, #4
 8006638:	9b05      	ldr	r3, [sp, #20]
 800663a:	e00d      	b.n	8006658 <__gethex+0x24a>
 800663c:	9b05      	ldr	r3, [sp, #20]
 800663e:	9a08      	ldr	r2, [sp, #32]
 8006640:	4413      	add	r3, r2
 8006642:	42bb      	cmp	r3, r7
 8006644:	d3e1      	bcc.n	800660a <__gethex+0x1fc>
 8006646:	4618      	mov	r0, r3
 8006648:	9a01      	ldr	r2, [sp, #4]
 800664a:	9903      	ldr	r1, [sp, #12]
 800664c:	9309      	str	r3, [sp, #36]	; 0x24
 800664e:	f001 f942 	bl	80078d6 <strncmp>
 8006652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006654:	2800      	cmp	r0, #0
 8006656:	d1d8      	bne.n	800660a <__gethex+0x1fc>
 8006658:	461e      	mov	r6, r3
 800665a:	e791      	b.n	8006580 <__gethex+0x172>
 800665c:	1eb9      	subs	r1, r7, #2
 800665e:	4628      	mov	r0, r5
 8006660:	f000 fe26 	bl	80072b0 <__any_on>
 8006664:	2800      	cmp	r0, #0
 8006666:	d0b2      	beq.n	80065ce <__gethex+0x1c0>
 8006668:	f04f 0a03 	mov.w	sl, #3
 800666c:	e7b1      	b.n	80065d2 <__gethex+0x1c4>
 800666e:	da09      	bge.n	8006684 <__gethex+0x276>
 8006670:	1bf7      	subs	r7, r6, r7
 8006672:	4629      	mov	r1, r5
 8006674:	463a      	mov	r2, r7
 8006676:	9802      	ldr	r0, [sp, #8]
 8006678:	f000 fc3c 	bl	8006ef4 <__lshift>
 800667c:	1be4      	subs	r4, r4, r7
 800667e:	4605      	mov	r5, r0
 8006680:	f100 0914 	add.w	r9, r0, #20
 8006684:	f04f 0a00 	mov.w	sl, #0
 8006688:	e7a8      	b.n	80065dc <__gethex+0x1ce>
 800668a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800668e:	42a0      	cmp	r0, r4
 8006690:	dd6a      	ble.n	8006768 <__gethex+0x35a>
 8006692:	1b04      	subs	r4, r0, r4
 8006694:	42a6      	cmp	r6, r4
 8006696:	dc2e      	bgt.n	80066f6 <__gethex+0x2e8>
 8006698:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d022      	beq.n	80066e6 <__gethex+0x2d8>
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d024      	beq.n	80066ee <__gethex+0x2e0>
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d115      	bne.n	80066d4 <__gethex+0x2c6>
 80066a8:	42a6      	cmp	r6, r4
 80066aa:	d113      	bne.n	80066d4 <__gethex+0x2c6>
 80066ac:	2e01      	cmp	r6, #1
 80066ae:	dc0b      	bgt.n	80066c8 <__gethex+0x2ba>
 80066b0:	9a06      	ldr	r2, [sp, #24]
 80066b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	2301      	movs	r3, #1
 80066ba:	612b      	str	r3, [r5, #16]
 80066bc:	f8c9 3000 	str.w	r3, [r9]
 80066c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066c2:	2762      	movs	r7, #98	; 0x62
 80066c4:	601d      	str	r5, [r3, #0]
 80066c6:	e72a      	b.n	800651e <__gethex+0x110>
 80066c8:	1e71      	subs	r1, r6, #1
 80066ca:	4628      	mov	r0, r5
 80066cc:	f000 fdf0 	bl	80072b0 <__any_on>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d1ed      	bne.n	80066b0 <__gethex+0x2a2>
 80066d4:	4629      	mov	r1, r5
 80066d6:	9802      	ldr	r0, [sp, #8]
 80066d8:	f000 fa41 	bl	8006b5e <_Bfree>
 80066dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80066de:	2300      	movs	r3, #0
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	2750      	movs	r7, #80	; 0x50
 80066e4:	e71b      	b.n	800651e <__gethex+0x110>
 80066e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0e1      	beq.n	80066b0 <__gethex+0x2a2>
 80066ec:	e7f2      	b.n	80066d4 <__gethex+0x2c6>
 80066ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1dd      	bne.n	80066b0 <__gethex+0x2a2>
 80066f4:	e7ee      	b.n	80066d4 <__gethex+0x2c6>
 80066f6:	1e67      	subs	r7, r4, #1
 80066f8:	f1ba 0f00 	cmp.w	sl, #0
 80066fc:	d131      	bne.n	8006762 <__gethex+0x354>
 80066fe:	b127      	cbz	r7, 800670a <__gethex+0x2fc>
 8006700:	4639      	mov	r1, r7
 8006702:	4628      	mov	r0, r5
 8006704:	f000 fdd4 	bl	80072b0 <__any_on>
 8006708:	4682      	mov	sl, r0
 800670a:	117a      	asrs	r2, r7, #5
 800670c:	2301      	movs	r3, #1
 800670e:	f007 071f 	and.w	r7, r7, #31
 8006712:	fa03 f707 	lsl.w	r7, r3, r7
 8006716:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800671a:	4621      	mov	r1, r4
 800671c:	421f      	tst	r7, r3
 800671e:	4628      	mov	r0, r5
 8006720:	bf18      	it	ne
 8006722:	f04a 0a02 	orrne.w	sl, sl, #2
 8006726:	1b36      	subs	r6, r6, r4
 8006728:	f7ff fe22 	bl	8006370 <rshift>
 800672c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006730:	2702      	movs	r7, #2
 8006732:	f1ba 0f00 	cmp.w	sl, #0
 8006736:	d048      	beq.n	80067ca <__gethex+0x3bc>
 8006738:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d015      	beq.n	800676c <__gethex+0x35e>
 8006740:	2b03      	cmp	r3, #3
 8006742:	d017      	beq.n	8006774 <__gethex+0x366>
 8006744:	2b01      	cmp	r3, #1
 8006746:	d109      	bne.n	800675c <__gethex+0x34e>
 8006748:	f01a 0f02 	tst.w	sl, #2
 800674c:	d006      	beq.n	800675c <__gethex+0x34e>
 800674e:	f8d9 3000 	ldr.w	r3, [r9]
 8006752:	ea4a 0a03 	orr.w	sl, sl, r3
 8006756:	f01a 0f01 	tst.w	sl, #1
 800675a:	d10e      	bne.n	800677a <__gethex+0x36c>
 800675c:	f047 0710 	orr.w	r7, r7, #16
 8006760:	e033      	b.n	80067ca <__gethex+0x3bc>
 8006762:	f04f 0a01 	mov.w	sl, #1
 8006766:	e7d0      	b.n	800670a <__gethex+0x2fc>
 8006768:	2701      	movs	r7, #1
 800676a:	e7e2      	b.n	8006732 <__gethex+0x324>
 800676c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800676e:	f1c3 0301 	rsb	r3, r3, #1
 8006772:	9315      	str	r3, [sp, #84]	; 0x54
 8006774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <__gethex+0x34e>
 800677a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800677e:	f105 0314 	add.w	r3, r5, #20
 8006782:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006786:	eb03 010a 	add.w	r1, r3, sl
 800678a:	f04f 0c00 	mov.w	ip, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f853 2b04 	ldr.w	r2, [r3], #4
 8006794:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006798:	d01c      	beq.n	80067d4 <__gethex+0x3c6>
 800679a:	3201      	adds	r2, #1
 800679c:	6002      	str	r2, [r0, #0]
 800679e:	2f02      	cmp	r7, #2
 80067a0:	f105 0314 	add.w	r3, r5, #20
 80067a4:	d138      	bne.n	8006818 <__gethex+0x40a>
 80067a6:	f8d8 2000 	ldr.w	r2, [r8]
 80067aa:	3a01      	subs	r2, #1
 80067ac:	42b2      	cmp	r2, r6
 80067ae:	d10a      	bne.n	80067c6 <__gethex+0x3b8>
 80067b0:	1171      	asrs	r1, r6, #5
 80067b2:	2201      	movs	r2, #1
 80067b4:	f006 061f 	and.w	r6, r6, #31
 80067b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067bc:	fa02 f606 	lsl.w	r6, r2, r6
 80067c0:	421e      	tst	r6, r3
 80067c2:	bf18      	it	ne
 80067c4:	4617      	movne	r7, r2
 80067c6:	f047 0720 	orr.w	r7, r7, #32
 80067ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067cc:	601d      	str	r5, [r3, #0]
 80067ce:	9b06      	ldr	r3, [sp, #24]
 80067d0:	601c      	str	r4, [r3, #0]
 80067d2:	e6a4      	b.n	800651e <__gethex+0x110>
 80067d4:	4299      	cmp	r1, r3
 80067d6:	f843 cc04 	str.w	ip, [r3, #-4]
 80067da:	d8d8      	bhi.n	800678e <__gethex+0x380>
 80067dc:	68ab      	ldr	r3, [r5, #8]
 80067de:	4599      	cmp	r9, r3
 80067e0:	db12      	blt.n	8006808 <__gethex+0x3fa>
 80067e2:	6869      	ldr	r1, [r5, #4]
 80067e4:	9802      	ldr	r0, [sp, #8]
 80067e6:	3101      	adds	r1, #1
 80067e8:	f000 f985 	bl	8006af6 <_Balloc>
 80067ec:	692a      	ldr	r2, [r5, #16]
 80067ee:	3202      	adds	r2, #2
 80067f0:	f105 010c 	add.w	r1, r5, #12
 80067f4:	4683      	mov	fp, r0
 80067f6:	0092      	lsls	r2, r2, #2
 80067f8:	300c      	adds	r0, #12
 80067fa:	f000 f971 	bl	8006ae0 <memcpy>
 80067fe:	4629      	mov	r1, r5
 8006800:	9802      	ldr	r0, [sp, #8]
 8006802:	f000 f9ac 	bl	8006b5e <_Bfree>
 8006806:	465d      	mov	r5, fp
 8006808:	692b      	ldr	r3, [r5, #16]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006810:	612a      	str	r2, [r5, #16]
 8006812:	2201      	movs	r2, #1
 8006814:	615a      	str	r2, [r3, #20]
 8006816:	e7c2      	b.n	800679e <__gethex+0x390>
 8006818:	692a      	ldr	r2, [r5, #16]
 800681a:	454a      	cmp	r2, r9
 800681c:	dd0b      	ble.n	8006836 <__gethex+0x428>
 800681e:	2101      	movs	r1, #1
 8006820:	4628      	mov	r0, r5
 8006822:	f7ff fda5 	bl	8006370 <rshift>
 8006826:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800682a:	3401      	adds	r4, #1
 800682c:	42a3      	cmp	r3, r4
 800682e:	f6ff aed9 	blt.w	80065e4 <__gethex+0x1d6>
 8006832:	2701      	movs	r7, #1
 8006834:	e7c7      	b.n	80067c6 <__gethex+0x3b8>
 8006836:	f016 061f 	ands.w	r6, r6, #31
 800683a:	d0fa      	beq.n	8006832 <__gethex+0x424>
 800683c:	449a      	add	sl, r3
 800683e:	f1c6 0620 	rsb	r6, r6, #32
 8006842:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006846:	f000 fa1a 	bl	8006c7e <__hi0bits>
 800684a:	42b0      	cmp	r0, r6
 800684c:	dbe7      	blt.n	800681e <__gethex+0x410>
 800684e:	e7f0      	b.n	8006832 <__gethex+0x424>

08006850 <L_shift>:
 8006850:	f1c2 0208 	rsb	r2, r2, #8
 8006854:	0092      	lsls	r2, r2, #2
 8006856:	b570      	push	{r4, r5, r6, lr}
 8006858:	f1c2 0620 	rsb	r6, r2, #32
 800685c:	6843      	ldr	r3, [r0, #4]
 800685e:	6804      	ldr	r4, [r0, #0]
 8006860:	fa03 f506 	lsl.w	r5, r3, r6
 8006864:	432c      	orrs	r4, r5
 8006866:	40d3      	lsrs	r3, r2
 8006868:	6004      	str	r4, [r0, #0]
 800686a:	f840 3f04 	str.w	r3, [r0, #4]!
 800686e:	4288      	cmp	r0, r1
 8006870:	d3f4      	bcc.n	800685c <L_shift+0xc>
 8006872:	bd70      	pop	{r4, r5, r6, pc}

08006874 <__match>:
 8006874:	b530      	push	{r4, r5, lr}
 8006876:	6803      	ldr	r3, [r0, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800687e:	b914      	cbnz	r4, 8006886 <__match+0x12>
 8006880:	6003      	str	r3, [r0, #0]
 8006882:	2001      	movs	r0, #1
 8006884:	bd30      	pop	{r4, r5, pc}
 8006886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800688a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800688e:	2d19      	cmp	r5, #25
 8006890:	bf98      	it	ls
 8006892:	3220      	addls	r2, #32
 8006894:	42a2      	cmp	r2, r4
 8006896:	d0f0      	beq.n	800687a <__match+0x6>
 8006898:	2000      	movs	r0, #0
 800689a:	e7f3      	b.n	8006884 <__match+0x10>

0800689c <__hexnan>:
 800689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a0:	680b      	ldr	r3, [r1, #0]
 80068a2:	6801      	ldr	r1, [r0, #0]
 80068a4:	115f      	asrs	r7, r3, #5
 80068a6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80068aa:	f013 031f 	ands.w	r3, r3, #31
 80068ae:	b087      	sub	sp, #28
 80068b0:	bf18      	it	ne
 80068b2:	3704      	addne	r7, #4
 80068b4:	2500      	movs	r5, #0
 80068b6:	1f3e      	subs	r6, r7, #4
 80068b8:	4682      	mov	sl, r0
 80068ba:	4690      	mov	r8, r2
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	f847 5c04 	str.w	r5, [r7, #-4]
 80068c2:	46b1      	mov	r9, r6
 80068c4:	4634      	mov	r4, r6
 80068c6:	9502      	str	r5, [sp, #8]
 80068c8:	46ab      	mov	fp, r5
 80068ca:	784a      	ldrb	r2, [r1, #1]
 80068cc:	1c4b      	adds	r3, r1, #1
 80068ce:	9303      	str	r3, [sp, #12]
 80068d0:	b342      	cbz	r2, 8006924 <__hexnan+0x88>
 80068d2:	4610      	mov	r0, r2
 80068d4:	9105      	str	r1, [sp, #20]
 80068d6:	9204      	str	r2, [sp, #16]
 80068d8:	f7ff fd84 	bl	80063e4 <__hexdig_fun>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d143      	bne.n	8006968 <__hexnan+0xcc>
 80068e0:	9a04      	ldr	r2, [sp, #16]
 80068e2:	9905      	ldr	r1, [sp, #20]
 80068e4:	2a20      	cmp	r2, #32
 80068e6:	d818      	bhi.n	800691a <__hexnan+0x7e>
 80068e8:	9b02      	ldr	r3, [sp, #8]
 80068ea:	459b      	cmp	fp, r3
 80068ec:	dd13      	ble.n	8006916 <__hexnan+0x7a>
 80068ee:	454c      	cmp	r4, r9
 80068f0:	d206      	bcs.n	8006900 <__hexnan+0x64>
 80068f2:	2d07      	cmp	r5, #7
 80068f4:	dc04      	bgt.n	8006900 <__hexnan+0x64>
 80068f6:	462a      	mov	r2, r5
 80068f8:	4649      	mov	r1, r9
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7ff ffa8 	bl	8006850 <L_shift>
 8006900:	4544      	cmp	r4, r8
 8006902:	d944      	bls.n	800698e <__hexnan+0xf2>
 8006904:	2300      	movs	r3, #0
 8006906:	f1a4 0904 	sub.w	r9, r4, #4
 800690a:	f844 3c04 	str.w	r3, [r4, #-4]
 800690e:	f8cd b008 	str.w	fp, [sp, #8]
 8006912:	464c      	mov	r4, r9
 8006914:	461d      	mov	r5, r3
 8006916:	9903      	ldr	r1, [sp, #12]
 8006918:	e7d7      	b.n	80068ca <__hexnan+0x2e>
 800691a:	2a29      	cmp	r2, #41	; 0x29
 800691c:	d14a      	bne.n	80069b4 <__hexnan+0x118>
 800691e:	3102      	adds	r1, #2
 8006920:	f8ca 1000 	str.w	r1, [sl]
 8006924:	f1bb 0f00 	cmp.w	fp, #0
 8006928:	d044      	beq.n	80069b4 <__hexnan+0x118>
 800692a:	454c      	cmp	r4, r9
 800692c:	d206      	bcs.n	800693c <__hexnan+0xa0>
 800692e:	2d07      	cmp	r5, #7
 8006930:	dc04      	bgt.n	800693c <__hexnan+0xa0>
 8006932:	462a      	mov	r2, r5
 8006934:	4649      	mov	r1, r9
 8006936:	4620      	mov	r0, r4
 8006938:	f7ff ff8a 	bl	8006850 <L_shift>
 800693c:	4544      	cmp	r4, r8
 800693e:	d928      	bls.n	8006992 <__hexnan+0xf6>
 8006940:	4643      	mov	r3, r8
 8006942:	f854 2b04 	ldr.w	r2, [r4], #4
 8006946:	f843 2b04 	str.w	r2, [r3], #4
 800694a:	42a6      	cmp	r6, r4
 800694c:	d2f9      	bcs.n	8006942 <__hexnan+0xa6>
 800694e:	2200      	movs	r2, #0
 8006950:	f843 2b04 	str.w	r2, [r3], #4
 8006954:	429e      	cmp	r6, r3
 8006956:	d2fb      	bcs.n	8006950 <__hexnan+0xb4>
 8006958:	6833      	ldr	r3, [r6, #0]
 800695a:	b91b      	cbnz	r3, 8006964 <__hexnan+0xc8>
 800695c:	4546      	cmp	r6, r8
 800695e:	d127      	bne.n	80069b0 <__hexnan+0x114>
 8006960:	2301      	movs	r3, #1
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	2005      	movs	r0, #5
 8006966:	e026      	b.n	80069b6 <__hexnan+0x11a>
 8006968:	3501      	adds	r5, #1
 800696a:	2d08      	cmp	r5, #8
 800696c:	f10b 0b01 	add.w	fp, fp, #1
 8006970:	dd06      	ble.n	8006980 <__hexnan+0xe4>
 8006972:	4544      	cmp	r4, r8
 8006974:	d9cf      	bls.n	8006916 <__hexnan+0x7a>
 8006976:	2300      	movs	r3, #0
 8006978:	f844 3c04 	str.w	r3, [r4, #-4]
 800697c:	2501      	movs	r5, #1
 800697e:	3c04      	subs	r4, #4
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	f000 000f 	and.w	r0, r0, #15
 8006986:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800698a:	6020      	str	r0, [r4, #0]
 800698c:	e7c3      	b.n	8006916 <__hexnan+0x7a>
 800698e:	2508      	movs	r5, #8
 8006990:	e7c1      	b.n	8006916 <__hexnan+0x7a>
 8006992:	9b01      	ldr	r3, [sp, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0df      	beq.n	8006958 <__hexnan+0xbc>
 8006998:	f04f 32ff 	mov.w	r2, #4294967295
 800699c:	f1c3 0320 	rsb	r3, r3, #32
 80069a0:	fa22 f303 	lsr.w	r3, r2, r3
 80069a4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80069a8:	401a      	ands	r2, r3
 80069aa:	f847 2c04 	str.w	r2, [r7, #-4]
 80069ae:	e7d3      	b.n	8006958 <__hexnan+0xbc>
 80069b0:	3e04      	subs	r6, #4
 80069b2:	e7d1      	b.n	8006958 <__hexnan+0xbc>
 80069b4:	2004      	movs	r0, #4
 80069b6:	b007      	add	sp, #28
 80069b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080069bc <__locale_ctype_ptr_l>:
 80069bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80069c0:	4770      	bx	lr

080069c2 <__localeconv_l>:
 80069c2:	30f0      	adds	r0, #240	; 0xf0
 80069c4:	4770      	bx	lr
	...

080069c8 <_localeconv_r>:
 80069c8:	4b04      	ldr	r3, [pc, #16]	; (80069dc <_localeconv_r+0x14>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6a18      	ldr	r0, [r3, #32]
 80069ce:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <_localeconv_r+0x18>)
 80069d0:	2800      	cmp	r0, #0
 80069d2:	bf08      	it	eq
 80069d4:	4618      	moveq	r0, r3
 80069d6:	30f0      	adds	r0, #240	; 0xf0
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	2000000c 	.word	0x2000000c
 80069e0:	20000070 	.word	0x20000070

080069e4 <__swhatbuf_r>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	460e      	mov	r6, r1
 80069e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ec:	2900      	cmp	r1, #0
 80069ee:	b096      	sub	sp, #88	; 0x58
 80069f0:	4614      	mov	r4, r2
 80069f2:	461d      	mov	r5, r3
 80069f4:	da07      	bge.n	8006a06 <__swhatbuf_r+0x22>
 80069f6:	2300      	movs	r3, #0
 80069f8:	602b      	str	r3, [r5, #0]
 80069fa:	89b3      	ldrh	r3, [r6, #12]
 80069fc:	061a      	lsls	r2, r3, #24
 80069fe:	d410      	bmi.n	8006a22 <__swhatbuf_r+0x3e>
 8006a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a04:	e00e      	b.n	8006a24 <__swhatbuf_r+0x40>
 8006a06:	466a      	mov	r2, sp
 8006a08:	f000 ffa6 	bl	8007958 <_fstat_r>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	dbf2      	blt.n	80069f6 <__swhatbuf_r+0x12>
 8006a10:	9a01      	ldr	r2, [sp, #4]
 8006a12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a1a:	425a      	negs	r2, r3
 8006a1c:	415a      	adcs	r2, r3
 8006a1e:	602a      	str	r2, [r5, #0]
 8006a20:	e7ee      	b.n	8006a00 <__swhatbuf_r+0x1c>
 8006a22:	2340      	movs	r3, #64	; 0x40
 8006a24:	2000      	movs	r0, #0
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	b016      	add	sp, #88	; 0x58
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}

08006a2c <__smakebuf_r>:
 8006a2c:	898b      	ldrh	r3, [r1, #12]
 8006a2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a30:	079d      	lsls	r5, r3, #30
 8006a32:	4606      	mov	r6, r0
 8006a34:	460c      	mov	r4, r1
 8006a36:	d507      	bpl.n	8006a48 <__smakebuf_r+0x1c>
 8006a38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	6123      	str	r3, [r4, #16]
 8006a40:	2301      	movs	r3, #1
 8006a42:	6163      	str	r3, [r4, #20]
 8006a44:	b002      	add	sp, #8
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	ab01      	add	r3, sp, #4
 8006a4a:	466a      	mov	r2, sp
 8006a4c:	f7ff ffca 	bl	80069e4 <__swhatbuf_r>
 8006a50:	9900      	ldr	r1, [sp, #0]
 8006a52:	4605      	mov	r5, r0
 8006a54:	4630      	mov	r0, r6
 8006a56:	f000 fca9 	bl	80073ac <_malloc_r>
 8006a5a:	b948      	cbnz	r0, 8006a70 <__smakebuf_r+0x44>
 8006a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a60:	059a      	lsls	r2, r3, #22
 8006a62:	d4ef      	bmi.n	8006a44 <__smakebuf_r+0x18>
 8006a64:	f023 0303 	bic.w	r3, r3, #3
 8006a68:	f043 0302 	orr.w	r3, r3, #2
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	e7e3      	b.n	8006a38 <__smakebuf_r+0xc>
 8006a70:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <__smakebuf_r+0x7c>)
 8006a72:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	6020      	str	r0, [r4, #0]
 8006a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	9b00      	ldr	r3, [sp, #0]
 8006a80:	6163      	str	r3, [r4, #20]
 8006a82:	9b01      	ldr	r3, [sp, #4]
 8006a84:	6120      	str	r0, [r4, #16]
 8006a86:	b15b      	cbz	r3, 8006aa0 <__smakebuf_r+0x74>
 8006a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f000 ff75 	bl	800797c <_isatty_r>
 8006a92:	b128      	cbz	r0, 8006aa0 <__smakebuf_r+0x74>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	f023 0303 	bic.w	r3, r3, #3
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	431d      	orrs	r5, r3
 8006aa4:	81a5      	strh	r5, [r4, #12]
 8006aa6:	e7cd      	b.n	8006a44 <__smakebuf_r+0x18>
 8006aa8:	080061ed 	.word	0x080061ed

08006aac <malloc>:
 8006aac:	4b02      	ldr	r3, [pc, #8]	; (8006ab8 <malloc+0xc>)
 8006aae:	4601      	mov	r1, r0
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	f000 bc7b 	b.w	80073ac <_malloc_r>
 8006ab6:	bf00      	nop
 8006ab8:	2000000c 	.word	0x2000000c

08006abc <__ascii_mbtowc>:
 8006abc:	b082      	sub	sp, #8
 8006abe:	b901      	cbnz	r1, 8006ac2 <__ascii_mbtowc+0x6>
 8006ac0:	a901      	add	r1, sp, #4
 8006ac2:	b142      	cbz	r2, 8006ad6 <__ascii_mbtowc+0x1a>
 8006ac4:	b14b      	cbz	r3, 8006ada <__ascii_mbtowc+0x1e>
 8006ac6:	7813      	ldrb	r3, [r2, #0]
 8006ac8:	600b      	str	r3, [r1, #0]
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	1c10      	adds	r0, r2, #0
 8006ace:	bf18      	it	ne
 8006ad0:	2001      	movne	r0, #1
 8006ad2:	b002      	add	sp, #8
 8006ad4:	4770      	bx	lr
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	e7fb      	b.n	8006ad2 <__ascii_mbtowc+0x16>
 8006ada:	f06f 0001 	mvn.w	r0, #1
 8006ade:	e7f8      	b.n	8006ad2 <__ascii_mbtowc+0x16>

08006ae0 <memcpy>:
 8006ae0:	b510      	push	{r4, lr}
 8006ae2:	1e43      	subs	r3, r0, #1
 8006ae4:	440a      	add	r2, r1
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d100      	bne.n	8006aec <memcpy+0xc>
 8006aea:	bd10      	pop	{r4, pc}
 8006aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006af4:	e7f7      	b.n	8006ae6 <memcpy+0x6>

08006af6 <_Balloc>:
 8006af6:	b570      	push	{r4, r5, r6, lr}
 8006af8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006afa:	4604      	mov	r4, r0
 8006afc:	460e      	mov	r6, r1
 8006afe:	b93d      	cbnz	r5, 8006b10 <_Balloc+0x1a>
 8006b00:	2010      	movs	r0, #16
 8006b02:	f7ff ffd3 	bl	8006aac <malloc>
 8006b06:	6260      	str	r0, [r4, #36]	; 0x24
 8006b08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b0c:	6005      	str	r5, [r0, #0]
 8006b0e:	60c5      	str	r5, [r0, #12]
 8006b10:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006b12:	68eb      	ldr	r3, [r5, #12]
 8006b14:	b183      	cbz	r3, 8006b38 <_Balloc+0x42>
 8006b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006b1e:	b9b8      	cbnz	r0, 8006b50 <_Balloc+0x5a>
 8006b20:	2101      	movs	r1, #1
 8006b22:	fa01 f506 	lsl.w	r5, r1, r6
 8006b26:	1d6a      	adds	r2, r5, #5
 8006b28:	0092      	lsls	r2, r2, #2
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 fbe1 	bl	80072f2 <_calloc_r>
 8006b30:	b160      	cbz	r0, 8006b4c <_Balloc+0x56>
 8006b32:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006b36:	e00e      	b.n	8006b56 <_Balloc+0x60>
 8006b38:	2221      	movs	r2, #33	; 0x21
 8006b3a:	2104      	movs	r1, #4
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fbd8 	bl	80072f2 <_calloc_r>
 8006b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b44:	60e8      	str	r0, [r5, #12]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e4      	bne.n	8006b16 <_Balloc+0x20>
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	6802      	ldr	r2, [r0, #0]
 8006b52:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006b56:	2300      	movs	r3, #0
 8006b58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b5c:	e7f7      	b.n	8006b4e <_Balloc+0x58>

08006b5e <_Bfree>:
 8006b5e:	b570      	push	{r4, r5, r6, lr}
 8006b60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006b62:	4606      	mov	r6, r0
 8006b64:	460d      	mov	r5, r1
 8006b66:	b93c      	cbnz	r4, 8006b78 <_Bfree+0x1a>
 8006b68:	2010      	movs	r0, #16
 8006b6a:	f7ff ff9f 	bl	8006aac <malloc>
 8006b6e:	6270      	str	r0, [r6, #36]	; 0x24
 8006b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b74:	6004      	str	r4, [r0, #0]
 8006b76:	60c4      	str	r4, [r0, #12]
 8006b78:	b13d      	cbz	r5, 8006b8a <_Bfree+0x2c>
 8006b7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b7c:	686a      	ldr	r2, [r5, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b84:	6029      	str	r1, [r5, #0]
 8006b86:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}

08006b8c <__multadd>:
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	690d      	ldr	r5, [r1, #16]
 8006b92:	461f      	mov	r7, r3
 8006b94:	4606      	mov	r6, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	f101 0c14 	add.w	ip, r1, #20
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f8dc 0000 	ldr.w	r0, [ip]
 8006ba2:	b281      	uxth	r1, r0
 8006ba4:	fb02 7101 	mla	r1, r2, r1, r7
 8006ba8:	0c0f      	lsrs	r7, r1, #16
 8006baa:	0c00      	lsrs	r0, r0, #16
 8006bac:	fb02 7000 	mla	r0, r2, r0, r7
 8006bb0:	b289      	uxth	r1, r1
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006bb8:	429d      	cmp	r5, r3
 8006bba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006bbe:	f84c 1b04 	str.w	r1, [ip], #4
 8006bc2:	dcec      	bgt.n	8006b9e <__multadd+0x12>
 8006bc4:	b1d7      	cbz	r7, 8006bfc <__multadd+0x70>
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	dc12      	bgt.n	8006bf2 <__multadd+0x66>
 8006bcc:	6861      	ldr	r1, [r4, #4]
 8006bce:	4630      	mov	r0, r6
 8006bd0:	3101      	adds	r1, #1
 8006bd2:	f7ff ff90 	bl	8006af6 <_Balloc>
 8006bd6:	6922      	ldr	r2, [r4, #16]
 8006bd8:	3202      	adds	r2, #2
 8006bda:	f104 010c 	add.w	r1, r4, #12
 8006bde:	4680      	mov	r8, r0
 8006be0:	0092      	lsls	r2, r2, #2
 8006be2:	300c      	adds	r0, #12
 8006be4:	f7ff ff7c 	bl	8006ae0 <memcpy>
 8006be8:	4621      	mov	r1, r4
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff ffb7 	bl	8006b5e <_Bfree>
 8006bf0:	4644      	mov	r4, r8
 8006bf2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bf6:	3501      	adds	r5, #1
 8006bf8:	615f      	str	r7, [r3, #20]
 8006bfa:	6125      	str	r5, [r4, #16]
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c02 <__s2b>:
 8006c02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c06:	460c      	mov	r4, r1
 8006c08:	4615      	mov	r5, r2
 8006c0a:	461f      	mov	r7, r3
 8006c0c:	2209      	movs	r2, #9
 8006c0e:	3308      	adds	r3, #8
 8006c10:	4606      	mov	r6, r0
 8006c12:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c16:	2100      	movs	r1, #0
 8006c18:	2201      	movs	r2, #1
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	db20      	blt.n	8006c60 <__s2b+0x5e>
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f7ff ff69 	bl	8006af6 <_Balloc>
 8006c24:	9b08      	ldr	r3, [sp, #32]
 8006c26:	6143      	str	r3, [r0, #20]
 8006c28:	2d09      	cmp	r5, #9
 8006c2a:	f04f 0301 	mov.w	r3, #1
 8006c2e:	6103      	str	r3, [r0, #16]
 8006c30:	dd19      	ble.n	8006c66 <__s2b+0x64>
 8006c32:	f104 0809 	add.w	r8, r4, #9
 8006c36:	46c1      	mov	r9, r8
 8006c38:	442c      	add	r4, r5
 8006c3a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006c3e:	4601      	mov	r1, r0
 8006c40:	3b30      	subs	r3, #48	; 0x30
 8006c42:	220a      	movs	r2, #10
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7ff ffa1 	bl	8006b8c <__multadd>
 8006c4a:	45a1      	cmp	r9, r4
 8006c4c:	d1f5      	bne.n	8006c3a <__s2b+0x38>
 8006c4e:	eb08 0405 	add.w	r4, r8, r5
 8006c52:	3c08      	subs	r4, #8
 8006c54:	1b2d      	subs	r5, r5, r4
 8006c56:	1963      	adds	r3, r4, r5
 8006c58:	42bb      	cmp	r3, r7
 8006c5a:	db07      	blt.n	8006c6c <__s2b+0x6a>
 8006c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c60:	0052      	lsls	r2, r2, #1
 8006c62:	3101      	adds	r1, #1
 8006c64:	e7d9      	b.n	8006c1a <__s2b+0x18>
 8006c66:	340a      	adds	r4, #10
 8006c68:	2509      	movs	r5, #9
 8006c6a:	e7f3      	b.n	8006c54 <__s2b+0x52>
 8006c6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c70:	4601      	mov	r1, r0
 8006c72:	3b30      	subs	r3, #48	; 0x30
 8006c74:	220a      	movs	r2, #10
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ff88 	bl	8006b8c <__multadd>
 8006c7c:	e7eb      	b.n	8006c56 <__s2b+0x54>

08006c7e <__hi0bits>:
 8006c7e:	0c02      	lsrs	r2, r0, #16
 8006c80:	0412      	lsls	r2, r2, #16
 8006c82:	4603      	mov	r3, r0
 8006c84:	b9b2      	cbnz	r2, 8006cb4 <__hi0bits+0x36>
 8006c86:	0403      	lsls	r3, r0, #16
 8006c88:	2010      	movs	r0, #16
 8006c8a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006c8e:	bf04      	itt	eq
 8006c90:	021b      	lsleq	r3, r3, #8
 8006c92:	3008      	addeq	r0, #8
 8006c94:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006c98:	bf04      	itt	eq
 8006c9a:	011b      	lsleq	r3, r3, #4
 8006c9c:	3004      	addeq	r0, #4
 8006c9e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ca2:	bf04      	itt	eq
 8006ca4:	009b      	lsleq	r3, r3, #2
 8006ca6:	3002      	addeq	r0, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	db06      	blt.n	8006cba <__hi0bits+0x3c>
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	d503      	bpl.n	8006cb8 <__hi0bits+0x3a>
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	4770      	bx	lr
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	e7e8      	b.n	8006c8a <__hi0bits+0xc>
 8006cb8:	2020      	movs	r0, #32
 8006cba:	4770      	bx	lr

08006cbc <__lo0bits>:
 8006cbc:	6803      	ldr	r3, [r0, #0]
 8006cbe:	f013 0207 	ands.w	r2, r3, #7
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	d00b      	beq.n	8006cde <__lo0bits+0x22>
 8006cc6:	07da      	lsls	r2, r3, #31
 8006cc8:	d423      	bmi.n	8006d12 <__lo0bits+0x56>
 8006cca:	0798      	lsls	r0, r3, #30
 8006ccc:	bf49      	itett	mi
 8006cce:	085b      	lsrmi	r3, r3, #1
 8006cd0:	089b      	lsrpl	r3, r3, #2
 8006cd2:	2001      	movmi	r0, #1
 8006cd4:	600b      	strmi	r3, [r1, #0]
 8006cd6:	bf5c      	itt	pl
 8006cd8:	600b      	strpl	r3, [r1, #0]
 8006cda:	2002      	movpl	r0, #2
 8006cdc:	4770      	bx	lr
 8006cde:	b298      	uxth	r0, r3
 8006ce0:	b9a8      	cbnz	r0, 8006d0e <__lo0bits+0x52>
 8006ce2:	0c1b      	lsrs	r3, r3, #16
 8006ce4:	2010      	movs	r0, #16
 8006ce6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006cea:	bf04      	itt	eq
 8006cec:	0a1b      	lsreq	r3, r3, #8
 8006cee:	3008      	addeq	r0, #8
 8006cf0:	071a      	lsls	r2, r3, #28
 8006cf2:	bf04      	itt	eq
 8006cf4:	091b      	lsreq	r3, r3, #4
 8006cf6:	3004      	addeq	r0, #4
 8006cf8:	079a      	lsls	r2, r3, #30
 8006cfa:	bf04      	itt	eq
 8006cfc:	089b      	lsreq	r3, r3, #2
 8006cfe:	3002      	addeq	r0, #2
 8006d00:	07da      	lsls	r2, r3, #31
 8006d02:	d402      	bmi.n	8006d0a <__lo0bits+0x4e>
 8006d04:	085b      	lsrs	r3, r3, #1
 8006d06:	d006      	beq.n	8006d16 <__lo0bits+0x5a>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	600b      	str	r3, [r1, #0]
 8006d0c:	4770      	bx	lr
 8006d0e:	4610      	mov	r0, r2
 8006d10:	e7e9      	b.n	8006ce6 <__lo0bits+0x2a>
 8006d12:	2000      	movs	r0, #0
 8006d14:	4770      	bx	lr
 8006d16:	2020      	movs	r0, #32
 8006d18:	4770      	bx	lr

08006d1a <__i2b>:
 8006d1a:	b510      	push	{r4, lr}
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	2101      	movs	r1, #1
 8006d20:	f7ff fee9 	bl	8006af6 <_Balloc>
 8006d24:	2201      	movs	r2, #1
 8006d26:	6144      	str	r4, [r0, #20]
 8006d28:	6102      	str	r2, [r0, #16]
 8006d2a:	bd10      	pop	{r4, pc}

08006d2c <__multiply>:
 8006d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	4614      	mov	r4, r2
 8006d32:	690a      	ldr	r2, [r1, #16]
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	bfb8      	it	lt
 8006d3a:	460b      	movlt	r3, r1
 8006d3c:	4688      	mov	r8, r1
 8006d3e:	bfbc      	itt	lt
 8006d40:	46a0      	movlt	r8, r4
 8006d42:	461c      	movlt	r4, r3
 8006d44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d54:	eb07 0609 	add.w	r6, r7, r9
 8006d58:	42b3      	cmp	r3, r6
 8006d5a:	bfb8      	it	lt
 8006d5c:	3101      	addlt	r1, #1
 8006d5e:	f7ff feca 	bl	8006af6 <_Balloc>
 8006d62:	f100 0514 	add.w	r5, r0, #20
 8006d66:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006d6a:	462b      	mov	r3, r5
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	4573      	cmp	r3, lr
 8006d70:	d316      	bcc.n	8006da0 <__multiply+0x74>
 8006d72:	f104 0214 	add.w	r2, r4, #20
 8006d76:	f108 0114 	add.w	r1, r8, #20
 8006d7a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006d7e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	9b00      	ldr	r3, [sp, #0]
 8006d86:	9201      	str	r2, [sp, #4]
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d80c      	bhi.n	8006da6 <__multiply+0x7a>
 8006d8c:	2e00      	cmp	r6, #0
 8006d8e:	dd03      	ble.n	8006d98 <__multiply+0x6c>
 8006d90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d05d      	beq.n	8006e54 <__multiply+0x128>
 8006d98:	6106      	str	r6, [r0, #16]
 8006d9a:	b003      	add	sp, #12
 8006d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da0:	f843 2b04 	str.w	r2, [r3], #4
 8006da4:	e7e3      	b.n	8006d6e <__multiply+0x42>
 8006da6:	f8b2 b000 	ldrh.w	fp, [r2]
 8006daa:	f1bb 0f00 	cmp.w	fp, #0
 8006dae:	d023      	beq.n	8006df8 <__multiply+0xcc>
 8006db0:	4689      	mov	r9, r1
 8006db2:	46ac      	mov	ip, r5
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	f859 4b04 	ldr.w	r4, [r9], #4
 8006dbc:	f8dc a000 	ldr.w	sl, [ip]
 8006dc0:	b2a3      	uxth	r3, r4
 8006dc2:	fa1f fa8a 	uxth.w	sl, sl
 8006dc6:	fb0b a303 	mla	r3, fp, r3, sl
 8006dca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006dce:	f8dc 4000 	ldr.w	r4, [ip]
 8006dd2:	4443      	add	r3, r8
 8006dd4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006dd8:	fb0b 840a 	mla	r4, fp, sl, r8
 8006ddc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006de0:	46e2      	mov	sl, ip
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006de8:	454f      	cmp	r7, r9
 8006dea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006dee:	f84a 3b04 	str.w	r3, [sl], #4
 8006df2:	d82b      	bhi.n	8006e4c <__multiply+0x120>
 8006df4:	f8cc 8004 	str.w	r8, [ip, #4]
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006dfe:	3204      	adds	r2, #4
 8006e00:	f1ba 0f00 	cmp.w	sl, #0
 8006e04:	d020      	beq.n	8006e48 <__multiply+0x11c>
 8006e06:	682b      	ldr	r3, [r5, #0]
 8006e08:	4689      	mov	r9, r1
 8006e0a:	46a8      	mov	r8, r5
 8006e0c:	f04f 0b00 	mov.w	fp, #0
 8006e10:	f8b9 c000 	ldrh.w	ip, [r9]
 8006e14:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006e18:	fb0a 440c 	mla	r4, sl, ip, r4
 8006e1c:	445c      	add	r4, fp
 8006e1e:	46c4      	mov	ip, r8
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006e26:	f84c 3b04 	str.w	r3, [ip], #4
 8006e2a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e2e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006e32:	0c1b      	lsrs	r3, r3, #16
 8006e34:	fb0a b303 	mla	r3, sl, r3, fp
 8006e38:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006e3c:	454f      	cmp	r7, r9
 8006e3e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006e42:	d805      	bhi.n	8006e50 <__multiply+0x124>
 8006e44:	f8c8 3004 	str.w	r3, [r8, #4]
 8006e48:	3504      	adds	r5, #4
 8006e4a:	e79b      	b.n	8006d84 <__multiply+0x58>
 8006e4c:	46d4      	mov	ip, sl
 8006e4e:	e7b3      	b.n	8006db8 <__multiply+0x8c>
 8006e50:	46e0      	mov	r8, ip
 8006e52:	e7dd      	b.n	8006e10 <__multiply+0xe4>
 8006e54:	3e01      	subs	r6, #1
 8006e56:	e799      	b.n	8006d8c <__multiply+0x60>

08006e58 <__pow5mult>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	4615      	mov	r5, r2
 8006e5e:	f012 0203 	ands.w	r2, r2, #3
 8006e62:	4606      	mov	r6, r0
 8006e64:	460f      	mov	r7, r1
 8006e66:	d007      	beq.n	8006e78 <__pow5mult+0x20>
 8006e68:	3a01      	subs	r2, #1
 8006e6a:	4c21      	ldr	r4, [pc, #132]	; (8006ef0 <__pow5mult+0x98>)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e72:	f7ff fe8b 	bl	8006b8c <__multadd>
 8006e76:	4607      	mov	r7, r0
 8006e78:	10ad      	asrs	r5, r5, #2
 8006e7a:	d035      	beq.n	8006ee8 <__pow5mult+0x90>
 8006e7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e7e:	b93c      	cbnz	r4, 8006e90 <__pow5mult+0x38>
 8006e80:	2010      	movs	r0, #16
 8006e82:	f7ff fe13 	bl	8006aac <malloc>
 8006e86:	6270      	str	r0, [r6, #36]	; 0x24
 8006e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e8c:	6004      	str	r4, [r0, #0]
 8006e8e:	60c4      	str	r4, [r0, #12]
 8006e90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e98:	b94c      	cbnz	r4, 8006eae <__pow5mult+0x56>
 8006e9a:	f240 2171 	movw	r1, #625	; 0x271
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7ff ff3b 	bl	8006d1a <__i2b>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006eaa:	4604      	mov	r4, r0
 8006eac:	6003      	str	r3, [r0, #0]
 8006eae:	f04f 0800 	mov.w	r8, #0
 8006eb2:	07eb      	lsls	r3, r5, #31
 8006eb4:	d50a      	bpl.n	8006ecc <__pow5mult+0x74>
 8006eb6:	4639      	mov	r1, r7
 8006eb8:	4622      	mov	r2, r4
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7ff ff36 	bl	8006d2c <__multiply>
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	4681      	mov	r9, r0
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7ff fe4a 	bl	8006b5e <_Bfree>
 8006eca:	464f      	mov	r7, r9
 8006ecc:	106d      	asrs	r5, r5, #1
 8006ece:	d00b      	beq.n	8006ee8 <__pow5mult+0x90>
 8006ed0:	6820      	ldr	r0, [r4, #0]
 8006ed2:	b938      	cbnz	r0, 8006ee4 <__pow5mult+0x8c>
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7ff ff27 	bl	8006d2c <__multiply>
 8006ede:	6020      	str	r0, [r4, #0]
 8006ee0:	f8c0 8000 	str.w	r8, [r0]
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	e7e4      	b.n	8006eb2 <__pow5mult+0x5a>
 8006ee8:	4638      	mov	r0, r7
 8006eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eee:	bf00      	nop
 8006ef0:	08007cc8 	.word	0x08007cc8

08006ef4 <__lshift>:
 8006ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef8:	460c      	mov	r4, r1
 8006efa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006efe:	6923      	ldr	r3, [r4, #16]
 8006f00:	6849      	ldr	r1, [r1, #4]
 8006f02:	eb0a 0903 	add.w	r9, sl, r3
 8006f06:	68a3      	ldr	r3, [r4, #8]
 8006f08:	4607      	mov	r7, r0
 8006f0a:	4616      	mov	r6, r2
 8006f0c:	f109 0501 	add.w	r5, r9, #1
 8006f10:	42ab      	cmp	r3, r5
 8006f12:	db32      	blt.n	8006f7a <__lshift+0x86>
 8006f14:	4638      	mov	r0, r7
 8006f16:	f7ff fdee 	bl	8006af6 <_Balloc>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	4680      	mov	r8, r0
 8006f1e:	f100 0114 	add.w	r1, r0, #20
 8006f22:	461a      	mov	r2, r3
 8006f24:	4553      	cmp	r3, sl
 8006f26:	db2b      	blt.n	8006f80 <__lshift+0x8c>
 8006f28:	6920      	ldr	r0, [r4, #16]
 8006f2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f2e:	f104 0314 	add.w	r3, r4, #20
 8006f32:	f016 021f 	ands.w	r2, r6, #31
 8006f36:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f3a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f3e:	d025      	beq.n	8006f8c <__lshift+0x98>
 8006f40:	f1c2 0e20 	rsb	lr, r2, #32
 8006f44:	2000      	movs	r0, #0
 8006f46:	681e      	ldr	r6, [r3, #0]
 8006f48:	468a      	mov	sl, r1
 8006f4a:	4096      	lsls	r6, r2
 8006f4c:	4330      	orrs	r0, r6
 8006f4e:	f84a 0b04 	str.w	r0, [sl], #4
 8006f52:	f853 0b04 	ldr.w	r0, [r3], #4
 8006f56:	459c      	cmp	ip, r3
 8006f58:	fa20 f00e 	lsr.w	r0, r0, lr
 8006f5c:	d814      	bhi.n	8006f88 <__lshift+0x94>
 8006f5e:	6048      	str	r0, [r1, #4]
 8006f60:	b108      	cbz	r0, 8006f66 <__lshift+0x72>
 8006f62:	f109 0502 	add.w	r5, r9, #2
 8006f66:	3d01      	subs	r5, #1
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f8c8 5010 	str.w	r5, [r8, #16]
 8006f6e:	4621      	mov	r1, r4
 8006f70:	f7ff fdf5 	bl	8006b5e <_Bfree>
 8006f74:	4640      	mov	r0, r8
 8006f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7a:	3101      	adds	r1, #1
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	e7c7      	b.n	8006f10 <__lshift+0x1c>
 8006f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006f84:	3301      	adds	r3, #1
 8006f86:	e7cd      	b.n	8006f24 <__lshift+0x30>
 8006f88:	4651      	mov	r1, sl
 8006f8a:	e7dc      	b.n	8006f46 <__lshift+0x52>
 8006f8c:	3904      	subs	r1, #4
 8006f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f92:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f96:	459c      	cmp	ip, r3
 8006f98:	d8f9      	bhi.n	8006f8e <__lshift+0x9a>
 8006f9a:	e7e4      	b.n	8006f66 <__lshift+0x72>

08006f9c <__mcmp>:
 8006f9c:	6903      	ldr	r3, [r0, #16]
 8006f9e:	690a      	ldr	r2, [r1, #16]
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	b530      	push	{r4, r5, lr}
 8006fa4:	d10c      	bne.n	8006fc0 <__mcmp+0x24>
 8006fa6:	0092      	lsls	r2, r2, #2
 8006fa8:	3014      	adds	r0, #20
 8006faa:	3114      	adds	r1, #20
 8006fac:	1884      	adds	r4, r0, r2
 8006fae:	4411      	add	r1, r2
 8006fb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006fb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006fb8:	4295      	cmp	r5, r2
 8006fba:	d003      	beq.n	8006fc4 <__mcmp+0x28>
 8006fbc:	d305      	bcc.n	8006fca <__mcmp+0x2e>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	bd30      	pop	{r4, r5, pc}
 8006fc4:	42a0      	cmp	r0, r4
 8006fc6:	d3f3      	bcc.n	8006fb0 <__mcmp+0x14>
 8006fc8:	e7fa      	b.n	8006fc0 <__mcmp+0x24>
 8006fca:	f04f 33ff 	mov.w	r3, #4294967295
 8006fce:	e7f7      	b.n	8006fc0 <__mcmp+0x24>

08006fd0 <__mdiff>:
 8006fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd4:	460d      	mov	r5, r1
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4628      	mov	r0, r5
 8006fdc:	4614      	mov	r4, r2
 8006fde:	f7ff ffdd 	bl	8006f9c <__mcmp>
 8006fe2:	1e06      	subs	r6, r0, #0
 8006fe4:	d108      	bne.n	8006ff8 <__mdiff+0x28>
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4638      	mov	r0, r7
 8006fea:	f7ff fd84 	bl	8006af6 <_Balloc>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	bfa4      	itt	ge
 8006ffa:	4623      	movge	r3, r4
 8006ffc:	462c      	movge	r4, r5
 8006ffe:	4638      	mov	r0, r7
 8007000:	6861      	ldr	r1, [r4, #4]
 8007002:	bfa6      	itte	ge
 8007004:	461d      	movge	r5, r3
 8007006:	2600      	movge	r6, #0
 8007008:	2601      	movlt	r6, #1
 800700a:	f7ff fd74 	bl	8006af6 <_Balloc>
 800700e:	692b      	ldr	r3, [r5, #16]
 8007010:	60c6      	str	r6, [r0, #12]
 8007012:	6926      	ldr	r6, [r4, #16]
 8007014:	f105 0914 	add.w	r9, r5, #20
 8007018:	f104 0214 	add.w	r2, r4, #20
 800701c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007020:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007024:	f100 0514 	add.w	r5, r0, #20
 8007028:	f04f 0e00 	mov.w	lr, #0
 800702c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007030:	f859 4b04 	ldr.w	r4, [r9], #4
 8007034:	fa1e f18a 	uxtah	r1, lr, sl
 8007038:	b2a3      	uxth	r3, r4
 800703a:	1ac9      	subs	r1, r1, r3
 800703c:	0c23      	lsrs	r3, r4, #16
 800703e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007042:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007046:	b289      	uxth	r1, r1
 8007048:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800704c:	45c8      	cmp	r8, r9
 800704e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007052:	4694      	mov	ip, r2
 8007054:	f845 3b04 	str.w	r3, [r5], #4
 8007058:	d8e8      	bhi.n	800702c <__mdiff+0x5c>
 800705a:	45bc      	cmp	ip, r7
 800705c:	d304      	bcc.n	8007068 <__mdiff+0x98>
 800705e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007062:	b183      	cbz	r3, 8007086 <__mdiff+0xb6>
 8007064:	6106      	str	r6, [r0, #16]
 8007066:	e7c5      	b.n	8006ff4 <__mdiff+0x24>
 8007068:	f85c 1b04 	ldr.w	r1, [ip], #4
 800706c:	fa1e f381 	uxtah	r3, lr, r1
 8007070:	141a      	asrs	r2, r3, #16
 8007072:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007076:	b29b      	uxth	r3, r3
 8007078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800707c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007080:	f845 3b04 	str.w	r3, [r5], #4
 8007084:	e7e9      	b.n	800705a <__mdiff+0x8a>
 8007086:	3e01      	subs	r6, #1
 8007088:	e7e9      	b.n	800705e <__mdiff+0x8e>
	...

0800708c <__ulp>:
 800708c:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <__ulp+0x4c>)
 800708e:	ee10 2a90 	vmov	r2, s1
 8007092:	401a      	ands	r2, r3
 8007094:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007098:	2b00      	cmp	r3, #0
 800709a:	dd04      	ble.n	80070a6 <__ulp+0x1a>
 800709c:	2000      	movs	r0, #0
 800709e:	4619      	mov	r1, r3
 80070a0:	ec41 0b10 	vmov	d0, r0, r1
 80070a4:	4770      	bx	lr
 80070a6:	425b      	negs	r3, r3
 80070a8:	151b      	asrs	r3, r3, #20
 80070aa:	2b13      	cmp	r3, #19
 80070ac:	f04f 0000 	mov.w	r0, #0
 80070b0:	f04f 0100 	mov.w	r1, #0
 80070b4:	dc04      	bgt.n	80070c0 <__ulp+0x34>
 80070b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80070ba:	fa42 f103 	asr.w	r1, r2, r3
 80070be:	e7ef      	b.n	80070a0 <__ulp+0x14>
 80070c0:	3b14      	subs	r3, #20
 80070c2:	2b1e      	cmp	r3, #30
 80070c4:	f04f 0201 	mov.w	r2, #1
 80070c8:	bfda      	itte	le
 80070ca:	f1c3 031f 	rsble	r3, r3, #31
 80070ce:	fa02 f303 	lslle.w	r3, r2, r3
 80070d2:	4613      	movgt	r3, r2
 80070d4:	4618      	mov	r0, r3
 80070d6:	e7e3      	b.n	80070a0 <__ulp+0x14>
 80070d8:	7ff00000 	.word	0x7ff00000

080070dc <__b2d>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	6905      	ldr	r5, [r0, #16]
 80070e0:	f100 0714 	add.w	r7, r0, #20
 80070e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80070e8:	1f2e      	subs	r6, r5, #4
 80070ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7ff fdc5 	bl	8006c7e <__hi0bits>
 80070f4:	f1c0 0320 	rsb	r3, r0, #32
 80070f8:	280a      	cmp	r0, #10
 80070fa:	600b      	str	r3, [r1, #0]
 80070fc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007174 <__b2d+0x98>
 8007100:	dc14      	bgt.n	800712c <__b2d+0x50>
 8007102:	f1c0 0e0b 	rsb	lr, r0, #11
 8007106:	fa24 f10e 	lsr.w	r1, r4, lr
 800710a:	42b7      	cmp	r7, r6
 800710c:	ea41 030c 	orr.w	r3, r1, ip
 8007110:	bf34      	ite	cc
 8007112:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007116:	2100      	movcs	r1, #0
 8007118:	3015      	adds	r0, #21
 800711a:	fa04 f000 	lsl.w	r0, r4, r0
 800711e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007122:	ea40 0201 	orr.w	r2, r0, r1
 8007126:	ec43 2b10 	vmov	d0, r2, r3
 800712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800712c:	42b7      	cmp	r7, r6
 800712e:	bf3a      	itte	cc
 8007130:	f1a5 0608 	subcc.w	r6, r5, #8
 8007134:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007138:	2100      	movcs	r1, #0
 800713a:	380b      	subs	r0, #11
 800713c:	d015      	beq.n	800716a <__b2d+0x8e>
 800713e:	4084      	lsls	r4, r0
 8007140:	f1c0 0520 	rsb	r5, r0, #32
 8007144:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007148:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800714c:	42be      	cmp	r6, r7
 800714e:	fa21 fc05 	lsr.w	ip, r1, r5
 8007152:	ea44 030c 	orr.w	r3, r4, ip
 8007156:	bf8c      	ite	hi
 8007158:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800715c:	2400      	movls	r4, #0
 800715e:	fa01 f000 	lsl.w	r0, r1, r0
 8007162:	40ec      	lsrs	r4, r5
 8007164:	ea40 0204 	orr.w	r2, r0, r4
 8007168:	e7dd      	b.n	8007126 <__b2d+0x4a>
 800716a:	ea44 030c 	orr.w	r3, r4, ip
 800716e:	460a      	mov	r2, r1
 8007170:	e7d9      	b.n	8007126 <__b2d+0x4a>
 8007172:	bf00      	nop
 8007174:	3ff00000 	.word	0x3ff00000

08007178 <__d2b>:
 8007178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800717c:	460e      	mov	r6, r1
 800717e:	2101      	movs	r1, #1
 8007180:	ec59 8b10 	vmov	r8, r9, d0
 8007184:	4615      	mov	r5, r2
 8007186:	f7ff fcb6 	bl	8006af6 <_Balloc>
 800718a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800718e:	4607      	mov	r7, r0
 8007190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007194:	bb34      	cbnz	r4, 80071e4 <__d2b+0x6c>
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	f1b8 0300 	subs.w	r3, r8, #0
 800719c:	d027      	beq.n	80071ee <__d2b+0x76>
 800719e:	a802      	add	r0, sp, #8
 80071a0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80071a4:	f7ff fd8a 	bl	8006cbc <__lo0bits>
 80071a8:	9900      	ldr	r1, [sp, #0]
 80071aa:	b1f0      	cbz	r0, 80071ea <__d2b+0x72>
 80071ac:	9a01      	ldr	r2, [sp, #4]
 80071ae:	f1c0 0320 	rsb	r3, r0, #32
 80071b2:	fa02 f303 	lsl.w	r3, r2, r3
 80071b6:	430b      	orrs	r3, r1
 80071b8:	40c2      	lsrs	r2, r0
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	9201      	str	r2, [sp, #4]
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bf14      	ite	ne
 80071c6:	2102      	movne	r1, #2
 80071c8:	2101      	moveq	r1, #1
 80071ca:	6139      	str	r1, [r7, #16]
 80071cc:	b1c4      	cbz	r4, 8007200 <__d2b+0x88>
 80071ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80071d2:	4404      	add	r4, r0
 80071d4:	6034      	str	r4, [r6, #0]
 80071d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071da:	6028      	str	r0, [r5, #0]
 80071dc:	4638      	mov	r0, r7
 80071de:	b003      	add	sp, #12
 80071e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071e8:	e7d5      	b.n	8007196 <__d2b+0x1e>
 80071ea:	6179      	str	r1, [r7, #20]
 80071ec:	e7e7      	b.n	80071be <__d2b+0x46>
 80071ee:	a801      	add	r0, sp, #4
 80071f0:	f7ff fd64 	bl	8006cbc <__lo0bits>
 80071f4:	9b01      	ldr	r3, [sp, #4]
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	2101      	movs	r1, #1
 80071fa:	6139      	str	r1, [r7, #16]
 80071fc:	3020      	adds	r0, #32
 80071fe:	e7e5      	b.n	80071cc <__d2b+0x54>
 8007200:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007204:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007208:	6030      	str	r0, [r6, #0]
 800720a:	6918      	ldr	r0, [r3, #16]
 800720c:	f7ff fd37 	bl	8006c7e <__hi0bits>
 8007210:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007214:	e7e1      	b.n	80071da <__d2b+0x62>

08007216 <__ratio>:
 8007216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	4688      	mov	r8, r1
 800721c:	4669      	mov	r1, sp
 800721e:	4681      	mov	r9, r0
 8007220:	f7ff ff5c 	bl	80070dc <__b2d>
 8007224:	a901      	add	r1, sp, #4
 8007226:	4640      	mov	r0, r8
 8007228:	ec57 6b10 	vmov	r6, r7, d0
 800722c:	f7ff ff56 	bl	80070dc <__b2d>
 8007230:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007234:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007238:	eba3 0c02 	sub.w	ip, r3, r2
 800723c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007246:	ec5b ab10 	vmov	sl, fp, d0
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfce      	itee	gt
 800724e:	463a      	movgt	r2, r7
 8007250:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007254:	465a      	movle	r2, fp
 8007256:	4659      	mov	r1, fp
 8007258:	463d      	mov	r5, r7
 800725a:	bfd4      	ite	le
 800725c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007260:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007264:	4630      	mov	r0, r6
 8007266:	ee10 2a10 	vmov	r2, s0
 800726a:	460b      	mov	r3, r1
 800726c:	4629      	mov	r1, r5
 800726e:	f7f9 fb0d 	bl	800088c <__aeabi_ddiv>
 8007272:	ec41 0b10 	vmov	d0, r0, r1
 8007276:	b003      	add	sp, #12
 8007278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800727c <__copybits>:
 800727c:	3901      	subs	r1, #1
 800727e:	b510      	push	{r4, lr}
 8007280:	1149      	asrs	r1, r1, #5
 8007282:	6914      	ldr	r4, [r2, #16]
 8007284:	3101      	adds	r1, #1
 8007286:	f102 0314 	add.w	r3, r2, #20
 800728a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800728e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007292:	42a3      	cmp	r3, r4
 8007294:	4602      	mov	r2, r0
 8007296:	d303      	bcc.n	80072a0 <__copybits+0x24>
 8007298:	2300      	movs	r3, #0
 800729a:	428a      	cmp	r2, r1
 800729c:	d305      	bcc.n	80072aa <__copybits+0x2e>
 800729e:	bd10      	pop	{r4, pc}
 80072a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a4:	f840 2b04 	str.w	r2, [r0], #4
 80072a8:	e7f3      	b.n	8007292 <__copybits+0x16>
 80072aa:	f842 3b04 	str.w	r3, [r2], #4
 80072ae:	e7f4      	b.n	800729a <__copybits+0x1e>

080072b0 <__any_on>:
 80072b0:	f100 0214 	add.w	r2, r0, #20
 80072b4:	6900      	ldr	r0, [r0, #16]
 80072b6:	114b      	asrs	r3, r1, #5
 80072b8:	4298      	cmp	r0, r3
 80072ba:	b510      	push	{r4, lr}
 80072bc:	db11      	blt.n	80072e2 <__any_on+0x32>
 80072be:	dd0a      	ble.n	80072d6 <__any_on+0x26>
 80072c0:	f011 011f 	ands.w	r1, r1, #31
 80072c4:	d007      	beq.n	80072d6 <__any_on+0x26>
 80072c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072ca:	fa24 f001 	lsr.w	r0, r4, r1
 80072ce:	fa00 f101 	lsl.w	r1, r0, r1
 80072d2:	428c      	cmp	r4, r1
 80072d4:	d10b      	bne.n	80072ee <__any_on+0x3e>
 80072d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072da:	4293      	cmp	r3, r2
 80072dc:	d803      	bhi.n	80072e6 <__any_on+0x36>
 80072de:	2000      	movs	r0, #0
 80072e0:	bd10      	pop	{r4, pc}
 80072e2:	4603      	mov	r3, r0
 80072e4:	e7f7      	b.n	80072d6 <__any_on+0x26>
 80072e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072ea:	2900      	cmp	r1, #0
 80072ec:	d0f5      	beq.n	80072da <__any_on+0x2a>
 80072ee:	2001      	movs	r0, #1
 80072f0:	e7f6      	b.n	80072e0 <__any_on+0x30>

080072f2 <_calloc_r>:
 80072f2:	b538      	push	{r3, r4, r5, lr}
 80072f4:	fb02 f401 	mul.w	r4, r2, r1
 80072f8:	4621      	mov	r1, r4
 80072fa:	f000 f857 	bl	80073ac <_malloc_r>
 80072fe:	4605      	mov	r5, r0
 8007300:	b118      	cbz	r0, 800730a <_calloc_r+0x18>
 8007302:	4622      	mov	r2, r4
 8007304:	2100      	movs	r1, #0
 8007306:	f7fc f9db 	bl	80036c0 <memset>
 800730a:	4628      	mov	r0, r5
 800730c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007310 <_free_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4605      	mov	r5, r0
 8007314:	2900      	cmp	r1, #0
 8007316:	d045      	beq.n	80073a4 <_free_r+0x94>
 8007318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800731c:	1f0c      	subs	r4, r1, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	bfb8      	it	lt
 8007322:	18e4      	addlt	r4, r4, r3
 8007324:	f000 fb65 	bl	80079f2 <__malloc_lock>
 8007328:	4a1f      	ldr	r2, [pc, #124]	; (80073a8 <_free_r+0x98>)
 800732a:	6813      	ldr	r3, [r2, #0]
 800732c:	4610      	mov	r0, r2
 800732e:	b933      	cbnz	r3, 800733e <_free_r+0x2e>
 8007330:	6063      	str	r3, [r4, #4]
 8007332:	6014      	str	r4, [r2, #0]
 8007334:	4628      	mov	r0, r5
 8007336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800733a:	f000 bb5b 	b.w	80079f4 <__malloc_unlock>
 800733e:	42a3      	cmp	r3, r4
 8007340:	d90c      	bls.n	800735c <_free_r+0x4c>
 8007342:	6821      	ldr	r1, [r4, #0]
 8007344:	1862      	adds	r2, r4, r1
 8007346:	4293      	cmp	r3, r2
 8007348:	bf04      	itt	eq
 800734a:	681a      	ldreq	r2, [r3, #0]
 800734c:	685b      	ldreq	r3, [r3, #4]
 800734e:	6063      	str	r3, [r4, #4]
 8007350:	bf04      	itt	eq
 8007352:	1852      	addeq	r2, r2, r1
 8007354:	6022      	streq	r2, [r4, #0]
 8007356:	6004      	str	r4, [r0, #0]
 8007358:	e7ec      	b.n	8007334 <_free_r+0x24>
 800735a:	4613      	mov	r3, r2
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	b10a      	cbz	r2, 8007364 <_free_r+0x54>
 8007360:	42a2      	cmp	r2, r4
 8007362:	d9fa      	bls.n	800735a <_free_r+0x4a>
 8007364:	6819      	ldr	r1, [r3, #0]
 8007366:	1858      	adds	r0, r3, r1
 8007368:	42a0      	cmp	r0, r4
 800736a:	d10b      	bne.n	8007384 <_free_r+0x74>
 800736c:	6820      	ldr	r0, [r4, #0]
 800736e:	4401      	add	r1, r0
 8007370:	1858      	adds	r0, r3, r1
 8007372:	4282      	cmp	r2, r0
 8007374:	6019      	str	r1, [r3, #0]
 8007376:	d1dd      	bne.n	8007334 <_free_r+0x24>
 8007378:	6810      	ldr	r0, [r2, #0]
 800737a:	6852      	ldr	r2, [r2, #4]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	4401      	add	r1, r0
 8007380:	6019      	str	r1, [r3, #0]
 8007382:	e7d7      	b.n	8007334 <_free_r+0x24>
 8007384:	d902      	bls.n	800738c <_free_r+0x7c>
 8007386:	230c      	movs	r3, #12
 8007388:	602b      	str	r3, [r5, #0]
 800738a:	e7d3      	b.n	8007334 <_free_r+0x24>
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	1821      	adds	r1, r4, r0
 8007390:	428a      	cmp	r2, r1
 8007392:	bf04      	itt	eq
 8007394:	6811      	ldreq	r1, [r2, #0]
 8007396:	6852      	ldreq	r2, [r2, #4]
 8007398:	6062      	str	r2, [r4, #4]
 800739a:	bf04      	itt	eq
 800739c:	1809      	addeq	r1, r1, r0
 800739e:	6021      	streq	r1, [r4, #0]
 80073a0:	605c      	str	r4, [r3, #4]
 80073a2:	e7c7      	b.n	8007334 <_free_r+0x24>
 80073a4:	bd38      	pop	{r3, r4, r5, pc}
 80073a6:	bf00      	nop
 80073a8:	20000204 	.word	0x20000204

080073ac <_malloc_r>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	1ccd      	adds	r5, r1, #3
 80073b0:	f025 0503 	bic.w	r5, r5, #3
 80073b4:	3508      	adds	r5, #8
 80073b6:	2d0c      	cmp	r5, #12
 80073b8:	bf38      	it	cc
 80073ba:	250c      	movcc	r5, #12
 80073bc:	2d00      	cmp	r5, #0
 80073be:	4606      	mov	r6, r0
 80073c0:	db01      	blt.n	80073c6 <_malloc_r+0x1a>
 80073c2:	42a9      	cmp	r1, r5
 80073c4:	d903      	bls.n	80073ce <_malloc_r+0x22>
 80073c6:	230c      	movs	r3, #12
 80073c8:	6033      	str	r3, [r6, #0]
 80073ca:	2000      	movs	r0, #0
 80073cc:	bd70      	pop	{r4, r5, r6, pc}
 80073ce:	f000 fb10 	bl	80079f2 <__malloc_lock>
 80073d2:	4a21      	ldr	r2, [pc, #132]	; (8007458 <_malloc_r+0xac>)
 80073d4:	6814      	ldr	r4, [r2, #0]
 80073d6:	4621      	mov	r1, r4
 80073d8:	b991      	cbnz	r1, 8007400 <_malloc_r+0x54>
 80073da:	4c20      	ldr	r4, [pc, #128]	; (800745c <_malloc_r+0xb0>)
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	b91b      	cbnz	r3, 80073e8 <_malloc_r+0x3c>
 80073e0:	4630      	mov	r0, r6
 80073e2:	f000 fa25 	bl	8007830 <_sbrk_r>
 80073e6:	6020      	str	r0, [r4, #0]
 80073e8:	4629      	mov	r1, r5
 80073ea:	4630      	mov	r0, r6
 80073ec:	f000 fa20 	bl	8007830 <_sbrk_r>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d124      	bne.n	800743e <_malloc_r+0x92>
 80073f4:	230c      	movs	r3, #12
 80073f6:	6033      	str	r3, [r6, #0]
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 fafb 	bl	80079f4 <__malloc_unlock>
 80073fe:	e7e4      	b.n	80073ca <_malloc_r+0x1e>
 8007400:	680b      	ldr	r3, [r1, #0]
 8007402:	1b5b      	subs	r3, r3, r5
 8007404:	d418      	bmi.n	8007438 <_malloc_r+0x8c>
 8007406:	2b0b      	cmp	r3, #11
 8007408:	d90f      	bls.n	800742a <_malloc_r+0x7e>
 800740a:	600b      	str	r3, [r1, #0]
 800740c:	50cd      	str	r5, [r1, r3]
 800740e:	18cc      	adds	r4, r1, r3
 8007410:	4630      	mov	r0, r6
 8007412:	f000 faef 	bl	80079f4 <__malloc_unlock>
 8007416:	f104 000b 	add.w	r0, r4, #11
 800741a:	1d23      	adds	r3, r4, #4
 800741c:	f020 0007 	bic.w	r0, r0, #7
 8007420:	1ac3      	subs	r3, r0, r3
 8007422:	d0d3      	beq.n	80073cc <_malloc_r+0x20>
 8007424:	425a      	negs	r2, r3
 8007426:	50e2      	str	r2, [r4, r3]
 8007428:	e7d0      	b.n	80073cc <_malloc_r+0x20>
 800742a:	428c      	cmp	r4, r1
 800742c:	684b      	ldr	r3, [r1, #4]
 800742e:	bf16      	itet	ne
 8007430:	6063      	strne	r3, [r4, #4]
 8007432:	6013      	streq	r3, [r2, #0]
 8007434:	460c      	movne	r4, r1
 8007436:	e7eb      	b.n	8007410 <_malloc_r+0x64>
 8007438:	460c      	mov	r4, r1
 800743a:	6849      	ldr	r1, [r1, #4]
 800743c:	e7cc      	b.n	80073d8 <_malloc_r+0x2c>
 800743e:	1cc4      	adds	r4, r0, #3
 8007440:	f024 0403 	bic.w	r4, r4, #3
 8007444:	42a0      	cmp	r0, r4
 8007446:	d005      	beq.n	8007454 <_malloc_r+0xa8>
 8007448:	1a21      	subs	r1, r4, r0
 800744a:	4630      	mov	r0, r6
 800744c:	f000 f9f0 	bl	8007830 <_sbrk_r>
 8007450:	3001      	adds	r0, #1
 8007452:	d0cf      	beq.n	80073f4 <_malloc_r+0x48>
 8007454:	6025      	str	r5, [r4, #0]
 8007456:	e7db      	b.n	8007410 <_malloc_r+0x64>
 8007458:	20000204 	.word	0x20000204
 800745c:	20000208 	.word	0x20000208

08007460 <__ssputs_r>:
 8007460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007464:	688e      	ldr	r6, [r1, #8]
 8007466:	429e      	cmp	r6, r3
 8007468:	4682      	mov	sl, r0
 800746a:	460c      	mov	r4, r1
 800746c:	4690      	mov	r8, r2
 800746e:	4699      	mov	r9, r3
 8007470:	d837      	bhi.n	80074e2 <__ssputs_r+0x82>
 8007472:	898a      	ldrh	r2, [r1, #12]
 8007474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007478:	d031      	beq.n	80074de <__ssputs_r+0x7e>
 800747a:	6825      	ldr	r5, [r4, #0]
 800747c:	6909      	ldr	r1, [r1, #16]
 800747e:	1a6f      	subs	r7, r5, r1
 8007480:	6965      	ldr	r5, [r4, #20]
 8007482:	2302      	movs	r3, #2
 8007484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007488:	fb95 f5f3 	sdiv	r5, r5, r3
 800748c:	f109 0301 	add.w	r3, r9, #1
 8007490:	443b      	add	r3, r7
 8007492:	429d      	cmp	r5, r3
 8007494:	bf38      	it	cc
 8007496:	461d      	movcc	r5, r3
 8007498:	0553      	lsls	r3, r2, #21
 800749a:	d530      	bpl.n	80074fe <__ssputs_r+0x9e>
 800749c:	4629      	mov	r1, r5
 800749e:	f7ff ff85 	bl	80073ac <_malloc_r>
 80074a2:	4606      	mov	r6, r0
 80074a4:	b950      	cbnz	r0, 80074bc <__ssputs_r+0x5c>
 80074a6:	230c      	movs	r3, #12
 80074a8:	f8ca 3000 	str.w	r3, [sl]
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074bc:	463a      	mov	r2, r7
 80074be:	6921      	ldr	r1, [r4, #16]
 80074c0:	f7ff fb0e 	bl	8006ae0 <memcpy>
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	6126      	str	r6, [r4, #16]
 80074d2:	6165      	str	r5, [r4, #20]
 80074d4:	443e      	add	r6, r7
 80074d6:	1bed      	subs	r5, r5, r7
 80074d8:	6026      	str	r6, [r4, #0]
 80074da:	60a5      	str	r5, [r4, #8]
 80074dc:	464e      	mov	r6, r9
 80074de:	454e      	cmp	r6, r9
 80074e0:	d900      	bls.n	80074e4 <__ssputs_r+0x84>
 80074e2:	464e      	mov	r6, r9
 80074e4:	4632      	mov	r2, r6
 80074e6:	4641      	mov	r1, r8
 80074e8:	6820      	ldr	r0, [r4, #0]
 80074ea:	f000 fa69 	bl	80079c0 <memmove>
 80074ee:	68a3      	ldr	r3, [r4, #8]
 80074f0:	1b9b      	subs	r3, r3, r6
 80074f2:	60a3      	str	r3, [r4, #8]
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	441e      	add	r6, r3
 80074f8:	6026      	str	r6, [r4, #0]
 80074fa:	2000      	movs	r0, #0
 80074fc:	e7dc      	b.n	80074b8 <__ssputs_r+0x58>
 80074fe:	462a      	mov	r2, r5
 8007500:	f000 fa79 	bl	80079f6 <_realloc_r>
 8007504:	4606      	mov	r6, r0
 8007506:	2800      	cmp	r0, #0
 8007508:	d1e2      	bne.n	80074d0 <__ssputs_r+0x70>
 800750a:	6921      	ldr	r1, [r4, #16]
 800750c:	4650      	mov	r0, sl
 800750e:	f7ff feff 	bl	8007310 <_free_r>
 8007512:	e7c8      	b.n	80074a6 <__ssputs_r+0x46>

08007514 <_svfiprintf_r>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	461d      	mov	r5, r3
 800751a:	898b      	ldrh	r3, [r1, #12]
 800751c:	061f      	lsls	r7, r3, #24
 800751e:	b09d      	sub	sp, #116	; 0x74
 8007520:	4680      	mov	r8, r0
 8007522:	460c      	mov	r4, r1
 8007524:	4616      	mov	r6, r2
 8007526:	d50f      	bpl.n	8007548 <_svfiprintf_r+0x34>
 8007528:	690b      	ldr	r3, [r1, #16]
 800752a:	b96b      	cbnz	r3, 8007548 <_svfiprintf_r+0x34>
 800752c:	2140      	movs	r1, #64	; 0x40
 800752e:	f7ff ff3d 	bl	80073ac <_malloc_r>
 8007532:	6020      	str	r0, [r4, #0]
 8007534:	6120      	str	r0, [r4, #16]
 8007536:	b928      	cbnz	r0, 8007544 <_svfiprintf_r+0x30>
 8007538:	230c      	movs	r3, #12
 800753a:	f8c8 3000 	str.w	r3, [r8]
 800753e:	f04f 30ff 	mov.w	r0, #4294967295
 8007542:	e0c8      	b.n	80076d6 <_svfiprintf_r+0x1c2>
 8007544:	2340      	movs	r3, #64	; 0x40
 8007546:	6163      	str	r3, [r4, #20]
 8007548:	2300      	movs	r3, #0
 800754a:	9309      	str	r3, [sp, #36]	; 0x24
 800754c:	2320      	movs	r3, #32
 800754e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007552:	2330      	movs	r3, #48	; 0x30
 8007554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007558:	9503      	str	r5, [sp, #12]
 800755a:	f04f 0b01 	mov.w	fp, #1
 800755e:	4637      	mov	r7, r6
 8007560:	463d      	mov	r5, r7
 8007562:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007566:	b10b      	cbz	r3, 800756c <_svfiprintf_r+0x58>
 8007568:	2b25      	cmp	r3, #37	; 0x25
 800756a:	d13e      	bne.n	80075ea <_svfiprintf_r+0xd6>
 800756c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007570:	d00b      	beq.n	800758a <_svfiprintf_r+0x76>
 8007572:	4653      	mov	r3, sl
 8007574:	4632      	mov	r2, r6
 8007576:	4621      	mov	r1, r4
 8007578:	4640      	mov	r0, r8
 800757a:	f7ff ff71 	bl	8007460 <__ssputs_r>
 800757e:	3001      	adds	r0, #1
 8007580:	f000 80a4 	beq.w	80076cc <_svfiprintf_r+0x1b8>
 8007584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007586:	4453      	add	r3, sl
 8007588:	9309      	str	r3, [sp, #36]	; 0x24
 800758a:	783b      	ldrb	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 809d 	beq.w	80076cc <_svfiprintf_r+0x1b8>
 8007592:	2300      	movs	r3, #0
 8007594:	f04f 32ff 	mov.w	r2, #4294967295
 8007598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	9307      	str	r3, [sp, #28]
 80075a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075a4:	931a      	str	r3, [sp, #104]	; 0x68
 80075a6:	462f      	mov	r7, r5
 80075a8:	2205      	movs	r2, #5
 80075aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80075ae:	4850      	ldr	r0, [pc, #320]	; (80076f0 <_svfiprintf_r+0x1dc>)
 80075b0:	f7f8 fe36 	bl	8000220 <memchr>
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	b9d0      	cbnz	r0, 80075ee <_svfiprintf_r+0xda>
 80075b8:	06d9      	lsls	r1, r3, #27
 80075ba:	bf44      	itt	mi
 80075bc:	2220      	movmi	r2, #32
 80075be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075c2:	071a      	lsls	r2, r3, #28
 80075c4:	bf44      	itt	mi
 80075c6:	222b      	movmi	r2, #43	; 0x2b
 80075c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075cc:	782a      	ldrb	r2, [r5, #0]
 80075ce:	2a2a      	cmp	r2, #42	; 0x2a
 80075d0:	d015      	beq.n	80075fe <_svfiprintf_r+0xea>
 80075d2:	9a07      	ldr	r2, [sp, #28]
 80075d4:	462f      	mov	r7, r5
 80075d6:	2000      	movs	r0, #0
 80075d8:	250a      	movs	r5, #10
 80075da:	4639      	mov	r1, r7
 80075dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e0:	3b30      	subs	r3, #48	; 0x30
 80075e2:	2b09      	cmp	r3, #9
 80075e4:	d94d      	bls.n	8007682 <_svfiprintf_r+0x16e>
 80075e6:	b1b8      	cbz	r0, 8007618 <_svfiprintf_r+0x104>
 80075e8:	e00f      	b.n	800760a <_svfiprintf_r+0xf6>
 80075ea:	462f      	mov	r7, r5
 80075ec:	e7b8      	b.n	8007560 <_svfiprintf_r+0x4c>
 80075ee:	4a40      	ldr	r2, [pc, #256]	; (80076f0 <_svfiprintf_r+0x1dc>)
 80075f0:	1a80      	subs	r0, r0, r2
 80075f2:	fa0b f000 	lsl.w	r0, fp, r0
 80075f6:	4318      	orrs	r0, r3
 80075f8:	9004      	str	r0, [sp, #16]
 80075fa:	463d      	mov	r5, r7
 80075fc:	e7d3      	b.n	80075a6 <_svfiprintf_r+0x92>
 80075fe:	9a03      	ldr	r2, [sp, #12]
 8007600:	1d11      	adds	r1, r2, #4
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	9103      	str	r1, [sp, #12]
 8007606:	2a00      	cmp	r2, #0
 8007608:	db01      	blt.n	800760e <_svfiprintf_r+0xfa>
 800760a:	9207      	str	r2, [sp, #28]
 800760c:	e004      	b.n	8007618 <_svfiprintf_r+0x104>
 800760e:	4252      	negs	r2, r2
 8007610:	f043 0302 	orr.w	r3, r3, #2
 8007614:	9207      	str	r2, [sp, #28]
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	783b      	ldrb	r3, [r7, #0]
 800761a:	2b2e      	cmp	r3, #46	; 0x2e
 800761c:	d10c      	bne.n	8007638 <_svfiprintf_r+0x124>
 800761e:	787b      	ldrb	r3, [r7, #1]
 8007620:	2b2a      	cmp	r3, #42	; 0x2a
 8007622:	d133      	bne.n	800768c <_svfiprintf_r+0x178>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	9203      	str	r2, [sp, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfb8      	it	lt
 8007630:	f04f 33ff 	movlt.w	r3, #4294967295
 8007634:	3702      	adds	r7, #2
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	4d2e      	ldr	r5, [pc, #184]	; (80076f4 <_svfiprintf_r+0x1e0>)
 800763a:	7839      	ldrb	r1, [r7, #0]
 800763c:	2203      	movs	r2, #3
 800763e:	4628      	mov	r0, r5
 8007640:	f7f8 fdee 	bl	8000220 <memchr>
 8007644:	b138      	cbz	r0, 8007656 <_svfiprintf_r+0x142>
 8007646:	2340      	movs	r3, #64	; 0x40
 8007648:	1b40      	subs	r0, r0, r5
 800764a:	fa03 f000 	lsl.w	r0, r3, r0
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	4303      	orrs	r3, r0
 8007652:	3701      	adds	r7, #1
 8007654:	9304      	str	r3, [sp, #16]
 8007656:	7839      	ldrb	r1, [r7, #0]
 8007658:	4827      	ldr	r0, [pc, #156]	; (80076f8 <_svfiprintf_r+0x1e4>)
 800765a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800765e:	2206      	movs	r2, #6
 8007660:	1c7e      	adds	r6, r7, #1
 8007662:	f7f8 fddd 	bl	8000220 <memchr>
 8007666:	2800      	cmp	r0, #0
 8007668:	d038      	beq.n	80076dc <_svfiprintf_r+0x1c8>
 800766a:	4b24      	ldr	r3, [pc, #144]	; (80076fc <_svfiprintf_r+0x1e8>)
 800766c:	bb13      	cbnz	r3, 80076b4 <_svfiprintf_r+0x1a0>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	3307      	adds	r3, #7
 8007672:	f023 0307 	bic.w	r3, r3, #7
 8007676:	3308      	adds	r3, #8
 8007678:	9303      	str	r3, [sp, #12]
 800767a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767c:	444b      	add	r3, r9
 800767e:	9309      	str	r3, [sp, #36]	; 0x24
 8007680:	e76d      	b.n	800755e <_svfiprintf_r+0x4a>
 8007682:	fb05 3202 	mla	r2, r5, r2, r3
 8007686:	2001      	movs	r0, #1
 8007688:	460f      	mov	r7, r1
 800768a:	e7a6      	b.n	80075da <_svfiprintf_r+0xc6>
 800768c:	2300      	movs	r3, #0
 800768e:	3701      	adds	r7, #1
 8007690:	9305      	str	r3, [sp, #20]
 8007692:	4619      	mov	r1, r3
 8007694:	250a      	movs	r5, #10
 8007696:	4638      	mov	r0, r7
 8007698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800769c:	3a30      	subs	r2, #48	; 0x30
 800769e:	2a09      	cmp	r2, #9
 80076a0:	d903      	bls.n	80076aa <_svfiprintf_r+0x196>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0c8      	beq.n	8007638 <_svfiprintf_r+0x124>
 80076a6:	9105      	str	r1, [sp, #20]
 80076a8:	e7c6      	b.n	8007638 <_svfiprintf_r+0x124>
 80076aa:	fb05 2101 	mla	r1, r5, r1, r2
 80076ae:	2301      	movs	r3, #1
 80076b0:	4607      	mov	r7, r0
 80076b2:	e7f0      	b.n	8007696 <_svfiprintf_r+0x182>
 80076b4:	ab03      	add	r3, sp, #12
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	4622      	mov	r2, r4
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <_svfiprintf_r+0x1ec>)
 80076bc:	a904      	add	r1, sp, #16
 80076be:	4640      	mov	r0, r8
 80076c0:	f7fc f89a 	bl	80037f8 <_printf_float>
 80076c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076c8:	4681      	mov	r9, r0
 80076ca:	d1d6      	bne.n	800767a <_svfiprintf_r+0x166>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	065b      	lsls	r3, r3, #25
 80076d0:	f53f af35 	bmi.w	800753e <_svfiprintf_r+0x2a>
 80076d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d6:	b01d      	add	sp, #116	; 0x74
 80076d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076dc:	ab03      	add	r3, sp, #12
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	4622      	mov	r2, r4
 80076e2:	4b07      	ldr	r3, [pc, #28]	; (8007700 <_svfiprintf_r+0x1ec>)
 80076e4:	a904      	add	r1, sp, #16
 80076e6:	4640      	mov	r0, r8
 80076e8:	f7fc fb3c 	bl	8003d64 <_printf_i>
 80076ec:	e7ea      	b.n	80076c4 <_svfiprintf_r+0x1b0>
 80076ee:	bf00      	nop
 80076f0:	08007cd4 	.word	0x08007cd4
 80076f4:	08007cda 	.word	0x08007cda
 80076f8:	08007cde 	.word	0x08007cde
 80076fc:	080037f9 	.word	0x080037f9
 8007700:	08007461 	.word	0x08007461

08007704 <lflush>:
 8007704:	8983      	ldrh	r3, [r0, #12]
 8007706:	f003 0309 	and.w	r3, r3, #9
 800770a:	2b09      	cmp	r3, #9
 800770c:	d101      	bne.n	8007712 <lflush+0xe>
 800770e:	f7fe bd37 	b.w	8006180 <fflush>
 8007712:	2000      	movs	r0, #0
 8007714:	4770      	bx	lr
	...

08007718 <__srefill_r>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	460c      	mov	r4, r1
 800771c:	4605      	mov	r5, r0
 800771e:	b118      	cbz	r0, 8007728 <__srefill_r+0x10>
 8007720:	6983      	ldr	r3, [r0, #24]
 8007722:	b90b      	cbnz	r3, 8007728 <__srefill_r+0x10>
 8007724:	f7fe fd7e 	bl	8006224 <__sinit>
 8007728:	4b3c      	ldr	r3, [pc, #240]	; (800781c <__srefill_r+0x104>)
 800772a:	429c      	cmp	r4, r3
 800772c:	d10a      	bne.n	8007744 <__srefill_r+0x2c>
 800772e:	686c      	ldr	r4, [r5, #4]
 8007730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007734:	2300      	movs	r3, #0
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	b293      	uxth	r3, r2
 800773a:	069e      	lsls	r6, r3, #26
 800773c:	d50c      	bpl.n	8007758 <__srefill_r+0x40>
 800773e:	f04f 30ff 	mov.w	r0, #4294967295
 8007742:	e067      	b.n	8007814 <__srefill_r+0xfc>
 8007744:	4b36      	ldr	r3, [pc, #216]	; (8007820 <__srefill_r+0x108>)
 8007746:	429c      	cmp	r4, r3
 8007748:	d101      	bne.n	800774e <__srefill_r+0x36>
 800774a:	68ac      	ldr	r4, [r5, #8]
 800774c:	e7f0      	b.n	8007730 <__srefill_r+0x18>
 800774e:	4b35      	ldr	r3, [pc, #212]	; (8007824 <__srefill_r+0x10c>)
 8007750:	429c      	cmp	r4, r3
 8007752:	bf08      	it	eq
 8007754:	68ec      	ldreq	r4, [r5, #12]
 8007756:	e7eb      	b.n	8007730 <__srefill_r+0x18>
 8007758:	0758      	lsls	r0, r3, #29
 800775a:	d449      	bmi.n	80077f0 <__srefill_r+0xd8>
 800775c:	06d9      	lsls	r1, r3, #27
 800775e:	d405      	bmi.n	800776c <__srefill_r+0x54>
 8007760:	2309      	movs	r3, #9
 8007762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007766:	602b      	str	r3, [r5, #0]
 8007768:	81a2      	strh	r2, [r4, #12]
 800776a:	e7e8      	b.n	800773e <__srefill_r+0x26>
 800776c:	071a      	lsls	r2, r3, #28
 800776e:	d50b      	bpl.n	8007788 <__srefill_r+0x70>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f7fe fcda 	bl	800612c <_fflush_r>
 8007778:	2800      	cmp	r0, #0
 800777a:	d1e0      	bne.n	800773e <__srefill_r+0x26>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	60a0      	str	r0, [r4, #8]
 8007780:	f023 0308 	bic.w	r3, r3, #8
 8007784:	81a3      	strh	r3, [r4, #12]
 8007786:	61a0      	str	r0, [r4, #24]
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f043 0304 	orr.w	r3, r3, #4
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	6923      	ldr	r3, [r4, #16]
 8007792:	b91b      	cbnz	r3, 800779c <__srefill_r+0x84>
 8007794:	4621      	mov	r1, r4
 8007796:	4628      	mov	r0, r5
 8007798:	f7ff f948 	bl	8006a2c <__smakebuf_r>
 800779c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80077a0:	b2be      	uxth	r6, r7
 80077a2:	07b3      	lsls	r3, r6, #30
 80077a4:	d00f      	beq.n	80077c6 <__srefill_r+0xae>
 80077a6:	2301      	movs	r3, #1
 80077a8:	81a3      	strh	r3, [r4, #12]
 80077aa:	4b1f      	ldr	r3, [pc, #124]	; (8007828 <__srefill_r+0x110>)
 80077ac:	491f      	ldr	r1, [pc, #124]	; (800782c <__srefill_r+0x114>)
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	f006 0609 	and.w	r6, r6, #9
 80077b4:	f7fe fda2 	bl	80062fc <_fwalk>
 80077b8:	2e09      	cmp	r6, #9
 80077ba:	81a7      	strh	r7, [r4, #12]
 80077bc:	d103      	bne.n	80077c6 <__srefill_r+0xae>
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f7fe fc2d 	bl	8006020 <__sflush_r>
 80077c6:	6922      	ldr	r2, [r4, #16]
 80077c8:	6022      	str	r2, [r4, #0]
 80077ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077cc:	6963      	ldr	r3, [r4, #20]
 80077ce:	6a21      	ldr	r1, [r4, #32]
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b0      	blx	r6
 80077d4:	2800      	cmp	r0, #0
 80077d6:	6060      	str	r0, [r4, #4]
 80077d8:	dc1d      	bgt.n	8007816 <__srefill_r+0xfe>
 80077da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077de:	bf17      	itett	ne
 80077e0:	2200      	movne	r2, #0
 80077e2:	f043 0320 	orreq.w	r3, r3, #32
 80077e6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80077ea:	6062      	strne	r2, [r4, #4]
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	e7a6      	b.n	800773e <__srefill_r+0x26>
 80077f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077f2:	2900      	cmp	r1, #0
 80077f4:	d0cc      	beq.n	8007790 <__srefill_r+0x78>
 80077f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077fa:	4299      	cmp	r1, r3
 80077fc:	d002      	beq.n	8007804 <__srefill_r+0xec>
 80077fe:	4628      	mov	r0, r5
 8007800:	f7ff fd86 	bl	8007310 <_free_r>
 8007804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007806:	6063      	str	r3, [r4, #4]
 8007808:	2000      	movs	r0, #0
 800780a:	6360      	str	r0, [r4, #52]	; 0x34
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0bf      	beq.n	8007790 <__srefill_r+0x78>
 8007810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007816:	2000      	movs	r0, #0
 8007818:	e7fc      	b.n	8007814 <__srefill_r+0xfc>
 800781a:	bf00      	nop
 800781c:	08007b88 	.word	0x08007b88
 8007820:	08007ba8 	.word	0x08007ba8
 8007824:	08007b68 	.word	0x08007b68
 8007828:	08007ac4 	.word	0x08007ac4
 800782c:	08007705 	.word	0x08007705

08007830 <_sbrk_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4c06      	ldr	r4, [pc, #24]	; (800784c <_sbrk_r+0x1c>)
 8007834:	2300      	movs	r3, #0
 8007836:	4605      	mov	r5, r0
 8007838:	4608      	mov	r0, r1
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	f7f9 fe96 	bl	800156c <_sbrk>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_sbrk_r+0x1a>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	b103      	cbz	r3, 800784a <_sbrk_r+0x1a>
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20000654 	.word	0x20000654

08007850 <__sread>:
 8007850:	b510      	push	{r4, lr}
 8007852:	460c      	mov	r4, r1
 8007854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007858:	f000 f8f4 	bl	8007a44 <_read_r>
 800785c:	2800      	cmp	r0, #0
 800785e:	bfab      	itete	ge
 8007860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007862:	89a3      	ldrhlt	r3, [r4, #12]
 8007864:	181b      	addge	r3, r3, r0
 8007866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800786a:	bfac      	ite	ge
 800786c:	6563      	strge	r3, [r4, #84]	; 0x54
 800786e:	81a3      	strhlt	r3, [r4, #12]
 8007870:	bd10      	pop	{r4, pc}

08007872 <__swrite>:
 8007872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007876:	461f      	mov	r7, r3
 8007878:	898b      	ldrh	r3, [r1, #12]
 800787a:	05db      	lsls	r3, r3, #23
 800787c:	4605      	mov	r5, r0
 800787e:	460c      	mov	r4, r1
 8007880:	4616      	mov	r6, r2
 8007882:	d505      	bpl.n	8007890 <__swrite+0x1e>
 8007884:	2302      	movs	r3, #2
 8007886:	2200      	movs	r2, #0
 8007888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788c:	f000 f886 	bl	800799c <_lseek_r>
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800789a:	81a3      	strh	r3, [r4, #12]
 800789c:	4632      	mov	r2, r6
 800789e:	463b      	mov	r3, r7
 80078a0:	4628      	mov	r0, r5
 80078a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a6:	f000 b835 	b.w	8007914 <_write_r>

080078aa <__sseek>:
 80078aa:	b510      	push	{r4, lr}
 80078ac:	460c      	mov	r4, r1
 80078ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b2:	f000 f873 	bl	800799c <_lseek_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	bf15      	itete	ne
 80078bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80078be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078c6:	81a3      	strheq	r3, [r4, #12]
 80078c8:	bf18      	it	ne
 80078ca:	81a3      	strhne	r3, [r4, #12]
 80078cc:	bd10      	pop	{r4, pc}

080078ce <__sclose>:
 80078ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d2:	f000 b831 	b.w	8007938 <_close_r>

080078d6 <strncmp>:
 80078d6:	b510      	push	{r4, lr}
 80078d8:	b16a      	cbz	r2, 80078f6 <strncmp+0x20>
 80078da:	3901      	subs	r1, #1
 80078dc:	1884      	adds	r4, r0, r2
 80078de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80078e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d103      	bne.n	80078f2 <strncmp+0x1c>
 80078ea:	42a0      	cmp	r0, r4
 80078ec:	d001      	beq.n	80078f2 <strncmp+0x1c>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f5      	bne.n	80078de <strncmp+0x8>
 80078f2:	1a98      	subs	r0, r3, r2
 80078f4:	bd10      	pop	{r4, pc}
 80078f6:	4610      	mov	r0, r2
 80078f8:	e7fc      	b.n	80078f4 <strncmp+0x1e>

080078fa <__ascii_wctomb>:
 80078fa:	b149      	cbz	r1, 8007910 <__ascii_wctomb+0x16>
 80078fc:	2aff      	cmp	r2, #255	; 0xff
 80078fe:	bf85      	ittet	hi
 8007900:	238a      	movhi	r3, #138	; 0x8a
 8007902:	6003      	strhi	r3, [r0, #0]
 8007904:	700a      	strbls	r2, [r1, #0]
 8007906:	f04f 30ff 	movhi.w	r0, #4294967295
 800790a:	bf98      	it	ls
 800790c:	2001      	movls	r0, #1
 800790e:	4770      	bx	lr
 8007910:	4608      	mov	r0, r1
 8007912:	4770      	bx	lr

08007914 <_write_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4c07      	ldr	r4, [pc, #28]	; (8007934 <_write_r+0x20>)
 8007918:	4605      	mov	r5, r0
 800791a:	4608      	mov	r0, r1
 800791c:	4611      	mov	r1, r2
 800791e:	2200      	movs	r2, #0
 8007920:	6022      	str	r2, [r4, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f7f9 fdd1 	bl	80014ca <_write>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_write_r+0x1e>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	b103      	cbz	r3, 8007932 <_write_r+0x1e>
 8007930:	602b      	str	r3, [r5, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	20000654 	.word	0x20000654

08007938 <_close_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4c06      	ldr	r4, [pc, #24]	; (8007954 <_close_r+0x1c>)
 800793c:	2300      	movs	r3, #0
 800793e:	4605      	mov	r5, r0
 8007940:	4608      	mov	r0, r1
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	f7f9 fddd 	bl	8001502 <_close>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_close_r+0x1a>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	b103      	cbz	r3, 8007952 <_close_r+0x1a>
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	20000654 	.word	0x20000654

08007958 <_fstat_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4c07      	ldr	r4, [pc, #28]	; (8007978 <_fstat_r+0x20>)
 800795c:	2300      	movs	r3, #0
 800795e:	4605      	mov	r5, r0
 8007960:	4608      	mov	r0, r1
 8007962:	4611      	mov	r1, r2
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	f7f9 fdd8 	bl	800151a <_fstat>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	d102      	bne.n	8007974 <_fstat_r+0x1c>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	b103      	cbz	r3, 8007974 <_fstat_r+0x1c>
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	bd38      	pop	{r3, r4, r5, pc}
 8007976:	bf00      	nop
 8007978:	20000654 	.word	0x20000654

0800797c <_isatty_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4c06      	ldr	r4, [pc, #24]	; (8007998 <_isatty_r+0x1c>)
 8007980:	2300      	movs	r3, #0
 8007982:	4605      	mov	r5, r0
 8007984:	4608      	mov	r0, r1
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	f7f9 fdd7 	bl	800153a <_isatty>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_isatty_r+0x1a>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	b103      	cbz	r3, 8007996 <_isatty_r+0x1a>
 8007994:	602b      	str	r3, [r5, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	20000654 	.word	0x20000654

0800799c <_lseek_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4c07      	ldr	r4, [pc, #28]	; (80079bc <_lseek_r+0x20>)
 80079a0:	4605      	mov	r5, r0
 80079a2:	4608      	mov	r0, r1
 80079a4:	4611      	mov	r1, r2
 80079a6:	2200      	movs	r2, #0
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f7f9 fdd0 	bl	8001550 <_lseek>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_lseek_r+0x1e>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_lseek_r+0x1e>
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	20000654 	.word	0x20000654

080079c0 <memmove>:
 80079c0:	4288      	cmp	r0, r1
 80079c2:	b510      	push	{r4, lr}
 80079c4:	eb01 0302 	add.w	r3, r1, r2
 80079c8:	d807      	bhi.n	80079da <memmove+0x1a>
 80079ca:	1e42      	subs	r2, r0, #1
 80079cc:	4299      	cmp	r1, r3
 80079ce:	d00a      	beq.n	80079e6 <memmove+0x26>
 80079d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80079d8:	e7f8      	b.n	80079cc <memmove+0xc>
 80079da:	4283      	cmp	r3, r0
 80079dc:	d9f5      	bls.n	80079ca <memmove+0xa>
 80079de:	1881      	adds	r1, r0, r2
 80079e0:	1ad2      	subs	r2, r2, r3
 80079e2:	42d3      	cmn	r3, r2
 80079e4:	d100      	bne.n	80079e8 <memmove+0x28>
 80079e6:	bd10      	pop	{r4, pc}
 80079e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80079f0:	e7f7      	b.n	80079e2 <memmove+0x22>

080079f2 <__malloc_lock>:
 80079f2:	4770      	bx	lr

080079f4 <__malloc_unlock>:
 80079f4:	4770      	bx	lr

080079f6 <_realloc_r>:
 80079f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f8:	4607      	mov	r7, r0
 80079fa:	4614      	mov	r4, r2
 80079fc:	460e      	mov	r6, r1
 80079fe:	b921      	cbnz	r1, 8007a0a <_realloc_r+0x14>
 8007a00:	4611      	mov	r1, r2
 8007a02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a06:	f7ff bcd1 	b.w	80073ac <_malloc_r>
 8007a0a:	b922      	cbnz	r2, 8007a16 <_realloc_r+0x20>
 8007a0c:	f7ff fc80 	bl	8007310 <_free_r>
 8007a10:	4625      	mov	r5, r4
 8007a12:	4628      	mov	r0, r5
 8007a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a16:	f000 f827 	bl	8007a68 <_malloc_usable_size_r>
 8007a1a:	42a0      	cmp	r0, r4
 8007a1c:	d20f      	bcs.n	8007a3e <_realloc_r+0x48>
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4638      	mov	r0, r7
 8007a22:	f7ff fcc3 	bl	80073ac <_malloc_r>
 8007a26:	4605      	mov	r5, r0
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d0f2      	beq.n	8007a12 <_realloc_r+0x1c>
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4622      	mov	r2, r4
 8007a30:	f7ff f856 	bl	8006ae0 <memcpy>
 8007a34:	4631      	mov	r1, r6
 8007a36:	4638      	mov	r0, r7
 8007a38:	f7ff fc6a 	bl	8007310 <_free_r>
 8007a3c:	e7e9      	b.n	8007a12 <_realloc_r+0x1c>
 8007a3e:	4635      	mov	r5, r6
 8007a40:	e7e7      	b.n	8007a12 <_realloc_r+0x1c>
	...

08007a44 <_read_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4c07      	ldr	r4, [pc, #28]	; (8007a64 <_read_r+0x20>)
 8007a48:	4605      	mov	r5, r0
 8007a4a:	4608      	mov	r0, r1
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	2200      	movs	r2, #0
 8007a50:	6022      	str	r2, [r4, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	f7f9 fd1c 	bl	8001490 <_read>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d102      	bne.n	8007a62 <_read_r+0x1e>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	b103      	cbz	r3, 8007a62 <_read_r+0x1e>
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	20000654 	.word	0x20000654

08007a68 <_malloc_usable_size_r>:
 8007a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a6c:	1f18      	subs	r0, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bfbc      	itt	lt
 8007a72:	580b      	ldrlt	r3, [r1, r0]
 8007a74:	18c0      	addlt	r0, r0, r3
 8007a76:	4770      	bx	lr

08007a78 <_init>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr

08007a84 <_fini>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr
