
ADC_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061cc  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e4  080063e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063ec  080063ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000070  08006464  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  08006464  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010743  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002442  00000000  00000000  000307dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  00032c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  00033a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020aef  00000000  00000000  00034788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b68c  00000000  00000000  00055277  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c92b1  00000000  00000000  00060903  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129bb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f4c  00000000  00000000  00129c30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000070 	.word	0x20000070
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08006338 	.word	0x08006338

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000074 	.word	0x20000074
 80001c0:	08006338 	.word	0x08006338

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	4604      	mov	r4, r0
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0c03 	orr.w	ip, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	fbbc f7fe 	udiv	r7, ip, lr
 800023a:	fa1f f885 	uxth.w	r8, r5
 800023e:	fb0e c317 	mls	r3, lr, r7, ip
 8000242:	fb07 f908 	mul.w	r9, r7, r8
 8000246:	0c21      	lsrs	r1, r4, #16
 8000248:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024c:	4599      	cmp	r9, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 31ff 	add.w	r1, r7, #4294967295
 8000256:	f080 811c 	bcs.w	8000492 <__udivmoddi4+0x28e>
 800025a:	4599      	cmp	r9, r3
 800025c:	f240 8119 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	eba3 0309 	sub.w	r3, r3, r9
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	fb00 f108 	mul.w	r1, r0, r8
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027a:	42a1      	cmp	r1, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	192c      	adds	r4, r5, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 8107 	bcs.w	8000496 <__udivmoddi4+0x292>
 8000288:	42a1      	cmp	r1, r4
 800028a:	f240 8104 	bls.w	8000496 <__udivmoddi4+0x292>
 800028e:	3802      	subs	r0, #2
 8000290:	442c      	add	r4, r5
 8000292:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000296:	2700      	movs	r7, #0
 8000298:	1a64      	subs	r4, r4, r1
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	2300      	movs	r3, #0
 800029e:	40d4      	lsrs	r4, r2
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ec 	beq.w	800048c <__udivmoddi4+0x288>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0x158>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fb 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469c      	mov	ip, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	2701      	movs	r7, #1
 80002f8:	1b49      	subs	r1, r1, r5
 80002fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fe:	fa1f f985 	uxth.w	r9, r5
 8000302:	fbb1 fef8 	udiv	lr, r1, r8
 8000306:	fb08 111e 	mls	r1, r8, lr, r1
 800030a:	fb09 f00e 	mul.w	r0, r9, lr
 800030e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000312:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x126>
 800031a:	18eb      	adds	r3, r5, r3
 800031c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4298      	cmp	r0, r3
 8000324:	f200 80cd 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 8000328:	468e      	mov	lr, r1
 800032a:	1a1b      	subs	r3, r3, r0
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	fb09 f900 	mul.w	r9, r9, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033e:	45a1      	cmp	r9, r4
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000342:	192c      	adds	r4, r5, r4
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a1      	cmp	r9, r4
 800034c:	f200 80b6 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000350:	4618      	mov	r0, r3
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800035a:	e79e      	b.n	800029a <__udivmoddi4+0x96>
 800035c:	f1c7 0520 	rsb	r5, r7, #32
 8000360:	40bb      	lsls	r3, r7
 8000362:	fa22 fc05 	lsr.w	ip, r2, r5
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa21 f405 	lsr.w	r4, r1, r5
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fbb4 f9fe 	udiv	r9, r4, lr
 8000376:	fa1f f88c 	uxth.w	r8, ip
 800037a:	fb0e 4419 	mls	r4, lr, r9, r4
 800037e:	fa20 f305 	lsr.w	r3, r0, r5
 8000382:	40b9      	lsls	r1, r7
 8000384:	fb09 fa08 	mul.w	sl, r9, r8
 8000388:	4319      	orrs	r1, r3
 800038a:	0c0b      	lsrs	r3, r1, #16
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	45a2      	cmp	sl, r4
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f307 	lsl.w	r3, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	45a2      	cmp	sl, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	eba4 040a 	sub.w	r4, r4, sl
 80003b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80003c0:	fb00 fa08 	mul.w	sl, r0, r8
 80003c4:	b289      	uxth	r1, r1
 80003c6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003dc:	3802      	subs	r0, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e4:	fba0 8902 	umull	r8, r9, r0, r2
 80003e8:	eba4 040a 	sub.w	r4, r4, sl
 80003ec:	454c      	cmp	r4, r9
 80003ee:	4641      	mov	r1, r8
 80003f0:	46ce      	mov	lr, r9
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d069      	beq.n	80004ce <__udivmoddi4+0x2ca>
 80003fa:	1a5a      	subs	r2, r3, r1
 80003fc:	eb64 040e 	sbc.w	r4, r4, lr
 8000400:	fa04 f505 	lsl.w	r5, r4, r5
 8000404:	fa22 f307 	lsr.w	r3, r2, r7
 8000408:	40fc      	lsrs	r4, r7
 800040a:	431d      	orrs	r5, r3
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	4095      	lsls	r5, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	fa21 f003 	lsr.w	r0, r1, r3
 800041e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000422:	fbb0 f7f8 	udiv	r7, r0, r8
 8000426:	fa1f f985 	uxth.w	r9, r5
 800042a:	fb08 0017 	mls	r0, r8, r7, r0
 800042e:	fa24 f303 	lsr.w	r3, r4, r3
 8000432:	4091      	lsls	r1, r2
 8000434:	fb07 fc09 	mul.w	ip, r7, r9
 8000438:	430b      	orrs	r3, r1
 800043a:	0c19      	lsrs	r1, r3, #16
 800043c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000440:	458c      	cmp	ip, r1
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x254>
 8000448:	1869      	adds	r1, r5, r1
 800044a:	f107 30ff 	add.w	r0, r7, #4294967295
 800044e:	d231      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000450:	458c      	cmp	ip, r1
 8000452:	d92f      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	3f02      	subs	r7, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 010c 	sub.w	r1, r1, ip
 800045c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000460:	fb08 1c10 	mls	ip, r8, r0, r1
 8000464:	fb00 fe09 	mul.w	lr, r0, r9
 8000468:	b299      	uxth	r1, r3
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 33ff 	add.w	r3, r0, #4294967295
 8000478:	d218      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047a:	458e      	cmp	lr, r1
 800047c:	d916      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4637      	mov	r7, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000492:	460f      	mov	r7, r1
 8000494:	e6e6      	b.n	8000264 <__udivmoddi4+0x60>
 8000496:	4618      	mov	r0, r3
 8000498:	e6fb      	b.n	8000292 <__udivmoddi4+0x8e>
 800049a:	4543      	cmp	r3, r8
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb8 0102 	subs.w	r1, r8, r2
 80004a2:	eb69 020c 	sbc.w	r2, r9, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	4696      	mov	lr, r2
 80004aa:	e7a4      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e7e8      	b.n	8000482 <__udivmoddi4+0x27e>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e7cf      	b.n	8000458 <__udivmoddi4+0x254>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	442c      	add	r4, r5
 80004c0:	e747      	b.n	8000352 <__udivmoddi4+0x14e>
 80004c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	e72f      	b.n	800032a <__udivmoddi4+0x126>
 80004ca:	4638      	mov	r0, r7
 80004cc:	e707      	b.n	80002de <__udivmoddi4+0xda>
 80004ce:	4637      	mov	r7, r6
 80004d0:	e6e8      	b.n	80002a4 <__udivmoddi4+0xa0>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b0ae      	sub	sp, #184	; 0xb8
 80004dc:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004de:	f000 ffbd 	bl	800145c <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e2:	f000 f8c7 	bl	8000674 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e6:	f000 fb07 	bl	8000af8 <MX_GPIO_Init>
	MX_DMA_Init();
 80004ea:	f000 fadd 	bl	8000aa8 <MX_DMA_Init>
	MX_ETH_Init();
 80004ee:	f000 fa11 	bl	8000914 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80004f2:	f000 fa85 	bl	8000a00 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80004f6:	f000 faad 	bl	8000a54 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 80004fa:	f000 f903 	bl	8000704 <MX_ADC1_Init>
	MX_ADC3_Init();
 80004fe:	f000 f98d 	bl	800081c <MX_ADC3_Init>
	MX_SPI3_Init();
 8000502:	f000 fa47 	bl	8000994 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	HAL_PRINT(&huart3, "INIT CLEAR\r\n"); // ?��처리?�� 것으�?? UART Transmit ?��
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	220c      	movs	r2, #12
 800050c:	4951      	ldr	r1, [pc, #324]	; (8000654 <main+0x17c>)
 800050e:	4852      	ldr	r0, [pc, #328]	; (8000658 <main+0x180>)
 8000510:	f004 fb73 	bl	8004bfa <HAL_UART_Transmit>
	uint32_t adcValue[4]; // ACD �?? ???�� 배열
	char buf[130]; // ?�� ?��?�� 130?���?? >> �??

	uint16_t command; // SET MAX Value SAVE Variable
	uint8_t cnt = 0; // 초기?�� �?? 분기 �???��
 8000514:	2300      	movs	r3, #0
 8000516:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		for (int i = 2; i <= 5; i++)
 800051a:	2302      	movs	r3, #2
 800051c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000520:	e03b      	b.n	800059a <main+0xc2>
		{
			HAL_GPIO_WritePin(GPIOE, (1 << i), RESET);
 8000522:	2201      	movs	r2, #1
 8000524:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	b29b      	uxth	r3, r3
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	484a      	ldr	r0, [pc, #296]	; (800065c <main+0x184>)
 8000534:	f003 fb42 	bl	8003bbc <HAL_GPIO_WritePin>
			switch (i % 2)
 8000538:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800053c:	2b00      	cmp	r3, #0
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	bfb8      	it	lt
 8000544:	425b      	neglt	r3, r3
 8000546:	2b01      	cmp	r3, #1
 8000548:	d104      	bne.n	8000554 <main+0x7c>
			{ // if 문을 switch case�?? 바꿈
			case 1:
				command = cnt;
 800054a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800054e:	b29b      	uxth	r3, r3
 8000550:	80fb      	strh	r3, [r7, #6]
				break;
 8000552:	e007      	b.n	8000564 <main+0x8c>
			default:
				command = 255 - cnt;
 8000554:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000558:	b29b      	uxth	r3, r3
 800055a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800055e:	b29b      	uxth	r3, r3
 8000560:	80fb      	strh	r3, [r7, #6]
				break;
 8000562:	bf00      	nop
			 }
			 else
			 {
			 command = 255 - cnt;
			 }*/
			command <<= 8; // Bit shift
 8000564:	88fb      	ldrh	r3, [r7, #6]
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	b29b      	uxth	r3, r3
 800056a:	80fb      	strh	r3, [r7, #6]
			HAL_SPI_Transmit(&hspi3, &command, 2, 1000); // SPI ?��?��
 800056c:	1db9      	adds	r1, r7, #6
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	2202      	movs	r2, #2
 8000574:	483a      	ldr	r0, [pc, #232]	; (8000660 <main+0x188>)
 8000576:	f004 f937 	bl	80047e8 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOE, (1 << i), SET);
 800057a:	2201      	movs	r2, #1
 800057c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	b29b      	uxth	r3, r3
 8000586:	2201      	movs	r2, #1
 8000588:	4619      	mov	r1, r3
 800058a:	4834      	ldr	r0, [pc, #208]	; (800065c <main+0x184>)
 800058c:	f003 fb16 	bl	8003bbc <HAL_GPIO_WritePin>
		for (int i = 2; i <= 5; i++)
 8000590:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000594:	3301      	adds	r3, #1
 8000596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800059a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800059e:	2b05      	cmp	r3, #5
 80005a0:	ddbf      	ble.n	8000522 <main+0x4a>
			// HAL_SPI_Receive(&hspi3, buf, 2, 1000);
		} // End of for

		HAL_ADC_Start_DMA(&hadc1, adcValue, 3); // ADC1 3개이�??�??
 80005a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005a6:	2203      	movs	r2, #3
 80005a8:	4619      	mov	r1, r3
 80005aa:	482e      	ldr	r0, [pc, #184]	; (8000664 <main+0x18c>)
 80005ac:	f001 fac6 	bl	8001b3c <HAL_ADC_Start_DMA>
		for (int i = 0; i < 3; i++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80005b6:	e00a      	b.n	80005ce <main+0xf6>
		{ // ADC 3개�?? ?��?��?���??�?? DMA�?? ?��?��?��
			HAL_DMA_PollForTransfer(&hdma_adc1, HAL_DMA_FULL_TRANSFER, 1000); // ?���?? 뭔�? ?��?��?��?��
 80005b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005bc:	2100      	movs	r1, #0
 80005be:	482a      	ldr	r0, [pc, #168]	; (8000668 <main+0x190>)
 80005c0:	f002 f9bd 	bl	800293e <HAL_DMA_PollForTransfer>
		for (int i = 0; i < 3; i++)
 80005c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80005c8:	3301      	adds	r3, #1
 80005ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80005ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	ddf0      	ble.n	80005b8 <main+0xe0>
		}
		HAL_ADC_Stop_DMA(&hadc1); // ?��것이 뭔�?
 80005d6:	4823      	ldr	r0, [pc, #140]	; (8000664 <main+0x18c>)
 80005d8:	f001 fb82 	bl	8001ce0 <HAL_ADC_Stop_DMA>

		HAL_ADC_Start(&hadc3); // ADC 1개만 ?��근하�??�?? DMA�?? ?��?�� ?��?��.
 80005dc:	4823      	ldr	r0, [pc, #140]	; (800066c <main+0x194>)
 80005de:	f001 f811 	bl	8001604 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, 100);
 80005e2:	2164      	movs	r1, #100	; 0x64
 80005e4:	4821      	ldr	r0, [pc, #132]	; (800066c <main+0x194>)
 80005e6:	f001 f8e3 	bl	80017b0 <HAL_ADC_PollForConversion>
		adcValue[3] = HAL_ADC_GetValue(&hadc3);
 80005ea:	4820      	ldr	r0, [pc, #128]	; (800066c <main+0x194>)
 80005ec:	f001 fbc2 	bl	8001d74 <HAL_ADC_GetValue>
 80005f0:	4603      	mov	r3, r0
 80005f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		HAL_ADC_Stop(&hadc3);
 80005f6:	481d      	ldr	r0, [pc, #116]	; (800066c <main+0x194>)
 80005f8:	f001 f8a8 	bl	800174c <HAL_ADC_Stop>

		sprintf(buf, "STEP : ADC = %03d   %04d   %04d   %04d   %04d\r\n", cnt,
 80005fc:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8000600:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
 8000604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000608:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800060c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000610:	f107 0008 	add.w	r0, r7, #8
 8000614:	9102      	str	r1, [sp, #8]
 8000616:	9201      	str	r2, [sp, #4]
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	462b      	mov	r3, r5
 800061c:	4622      	mov	r2, r4
 800061e:	4914      	ldr	r1, [pc, #80]	; (8000670 <main+0x198>)
 8000620:	f005 fa78 	bl	8005b14 <siprintf>
				adcValue[0], adcValue[1], adcValue[2], adcValue[3]);
		HAL_PRINT(&huart3, (uint8_t* )buf);
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fdcb 	bl	80001c4 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	f107 0108 	add.w	r1, r7, #8
 8000636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <main+0x180>)
 800063c:	f004 fadd 	bl	8004bfa <HAL_UART_Transmit>
		HAL_Delay(500);
 8000640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000644:	f000 ff78 	bl	8001538 <HAL_Delay>
		cnt++;
 8000648:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800064c:	3301      	adds	r3, #1
 800064e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	{
 8000652:	e762      	b.n	800051a <main+0x42>
 8000654:	08006350 	.word	0x08006350
 8000658:	20000098 	.word	0x20000098
 800065c:	40021000 	.word	0x40021000
 8000660:	20000538 	.word	0x20000538
 8000664:	20000590 	.word	0x20000590
 8000668:	20000620 	.word	0x20000620
 800066c:	200005d8 	.word	0x200005d8
 8000670:	08006360 	.word	0x08006360

08000674 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b092      	sub	sp, #72	; 0x48
 8000678:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f005 fa3e 	bl	8005b04 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2310      	movs	r3, #16
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a6:	2300      	movs	r3, #0
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 80006aa:	230d      	movs	r3, #13
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 80006ae:	23c3      	movs	r3, #195	; 0xc3
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80006b6:	2305      	movs	r3, #5
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fbb2 	bl	8003e28 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x5a>
	{
		Error_Handler();
 80006ca:	f000 faf5 	bl	8000cb8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2103      	movs	r1, #3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fe06 	bl	80042fc <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x86>
	{
		Error_Handler();
 80006f6:	f000 fadf 	bl	8000cb8 <Error_Handler>
	}
}
 80006fa:	bf00      	nop
 80006fc:	3748      	adds	r7, #72	; 0x48
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */
	/* USER CODE END ADC1_Init 0 */

	ADC_AnalogWDGConfTypeDef AnalogWDGConfig =
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	615a      	str	r2, [r3, #20]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN ADC1_Init 1 */
	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <MX_ADC1_Init+0x108>)
 800072a:	4a39      	ldr	r2, [pc, #228]	; (8000810 <MX_ADC1_Init+0x10c>)
 800072c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <MX_ADC1_Init+0x108>)
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000734:	4b35      	ldr	r3, [pc, #212]	; (800080c <MX_ADC1_Init+0x108>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <MX_ADC1_Init+0x108>)
 800073c:	2201      	movs	r2, #1
 800073e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000740:	4b32      	ldr	r3, [pc, #200]	; (800080c <MX_ADC1_Init+0x108>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_ADC1_Init+0x108>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_ADC1_Init+0x108>)
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_ADC1_Init+0x108>)
 8000754:	4a2f      	ldr	r2, [pc, #188]	; (8000814 <MX_ADC1_Init+0x110>)
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_ADC1_Init+0x108>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_ADC1_Init+0x108>)
 8000760:	2203      	movs	r2, #3
 8000762:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_ADC1_Init+0x108>)
 8000766:	2200      	movs	r2, #0
 8000768:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_ADC1_Init+0x108>)
 800076c:	2201      	movs	r2, #1
 800076e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000770:	4826      	ldr	r0, [pc, #152]	; (800080c <MX_ADC1_Init+0x108>)
 8000772:	f000 ff03 	bl	800157c <HAL_ADC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x7c>
	{
		Error_Handler();
 800077c:	f000 fa9c 	bl	8000cb8 <Error_Handler>
	}
	/** Configure the analog watchdog
	 */
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_ADC1_Init+0x114>)
 8000782:	613b      	str	r3, [r7, #16]
	AnalogWDGConfig.HighThreshold = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
	AnalogWDGConfig.LowThreshold = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
	AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 800078c:	2303      	movs	r3, #3
 800078e:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.ITMode = DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	481c      	ldr	r0, [pc, #112]	; (800080c <MX_ADC1_Init+0x108>)
 800079c:	f001 fc3a 	bl	8002014 <HAL_ADC_AnalogWDGConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC1_Init+0xa6>
	{
		Error_Handler();
 80007a6:	f000 fa87 	bl	8000cb8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80007aa:	2303      	movs	r3, #3
 80007ac:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4814      	ldr	r0, [pc, #80]	; (800080c <MX_ADC1_Init+0x108>)
 80007bc:	f001 fb0a 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0xc6>
	{
		Error_Handler();
 80007c6:	f000 fa77 	bl	8000cb8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80007ca:	230a      	movs	r3, #10
 80007cc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_ADC1_Init+0x108>)
 80007d8:	f001 fafc 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC1_Init+0xe2>
	{
		Error_Handler();
 80007e2:	f000 fa69 	bl	8000cb8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 80007e6:	230d      	movs	r3, #13
 80007e8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80007ea:	2303      	movs	r3, #3
 80007ec:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC1_Init+0x108>)
 80007f4:	f001 faee 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0xfe>
	{
		Error_Handler();
 80007fe:	f000 fa5b 	bl	8000cb8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	/* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000590 	.word	0x20000590
 8000810:	40012000 	.word	0x40012000
 8000814:	0f000001 	.word	0x0f000001
 8000818:	00800200 	.word	0x00800200

0800081c <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */
	/* USER CODE END ADC3_Init 0 */

	ADC_AnalogWDGConfTypeDef AnalogWDGConfig =
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
 8000832:	615a      	str	r2, [r3, #20]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN ADC3_Init 1 */
	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000840:	4b30      	ldr	r3, [pc, #192]	; (8000904 <MX_ADC3_Init+0xe8>)
 8000842:	4a31      	ldr	r2, [pc, #196]	; (8000908 <MX_ADC3_Init+0xec>)
 8000844:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <MX_ADC3_Init+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800084c:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <MX_ADC3_Init+0xe8>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ENABLE;
 8000852:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <MX_ADC3_Init+0xe8>)
 8000854:	2201      	movs	r2, #1
 8000856:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <MX_ADC3_Init+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800085e:	4b29      	ldr	r3, [pc, #164]	; (8000904 <MX_ADC3_Init+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <MX_ADC3_Init+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800086a:	4b26      	ldr	r3, [pc, #152]	; (8000904 <MX_ADC3_Init+0xe8>)
 800086c:	4a27      	ldr	r2, [pc, #156]	; (800090c <MX_ADC3_Init+0xf0>)
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000870:	4b24      	ldr	r3, [pc, #144]	; (8000904 <MX_ADC3_Init+0xe8>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 2;
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <MX_ADC3_Init+0xe8>)
 8000878:	2202      	movs	r2, #2
 800087a:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_ADC3_Init+0xe8>)
 800087e:	2200      	movs	r2, #0
 8000880:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <MX_ADC3_Init+0xe8>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000888:	481e      	ldr	r0, [pc, #120]	; (8000904 <MX_ADC3_Init+0xe8>)
 800088a:	f000 fe77 	bl	800157c <HAL_ADC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC3_Init+0x7c>
	{
		Error_Handler();
 8000894:	f000 fa10 	bl	8000cb8 <Error_Handler>
	}
	/** Configure the analog watchdog
	 */
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_ADC3_Init+0xf4>)
 800089a:	613b      	str	r3, [r7, #16]
	AnalogWDGConfig.HighThreshold = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
	AnalogWDGConfig.LowThreshold = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
	AnalogWDGConfig.Channel = ADC_CHANNEL_9;
 80008a4:	2309      	movs	r3, #9
 80008a6:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.ITMode = DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <MX_ADC3_Init+0xe8>)
 80008b4:	f001 fbae 	bl	8002014 <HAL_ADC_AnalogWDGConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC3_Init+0xa6>
	{
		Error_Handler();
 80008be:	f000 f9fb 	bl	8000cb8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80008c2:	2309      	movs	r3, #9
 80008c4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_ADC3_Init+0xe8>)
 80008d4:	f001 fa7e 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC3_Init+0xc6>
	{
		Error_Handler();
 80008de:	f000 f9eb 	bl	8000cb8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Rank = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e6:	463b      	mov	r3, r7
 80008e8:	4619      	mov	r1, r3
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <MX_ADC3_Init+0xe8>)
 80008ec:	f001 fa72 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC3_Init+0xde>
	{
		Error_Handler();
 80008f6:	f000 f9df 	bl	8000cb8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */
	/* USER CODE END ADC3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200005d8 	.word	0x200005d8
 8000908:	40012200 	.word	0x40012200
 800090c:	0f000001 	.word	0x0f000001
 8000910:	00800200 	.word	0x00800200

08000914 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ETH_Init 0 */
	/* USER CODE END ETH_Init 0 */

	/* USER CODE BEGIN ETH_Init 1 */
	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_ETH_Init+0x78>)
 800091a:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <MX_ETH_Init+0x7c>)
 800091c:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_ETH_Init+0x78>)
 8000920:	2201      	movs	r2, #1
 8000922:	605a      	str	r2, [r3, #4]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_ETH_Init+0x78>)
 8000926:	2200      	movs	r2, #0
 8000928:	821a      	strh	r2, [r3, #16]
	heth.Init.MACAddr[0] = 0x00;
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_ETH_Init+0x78>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_ETH_Init+0x78>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	3301      	adds	r3, #1
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[2] = 0xE1;
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_ETH_Init+0x78>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	3302      	adds	r3, #2
 8000942:	22e1      	movs	r2, #225	; 0xe1
 8000944:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[3] = 0x00;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_ETH_Init+0x78>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	3303      	adds	r3, #3
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[4] = 0x00;
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_ETH_Init+0x78>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	3304      	adds	r3, #4
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[5] = 0x00;
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_ETH_Init+0x78>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	3305      	adds	r3, #5
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_ETH_Init+0x78>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_ETH_Init+0x78>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_ETH_Init+0x78>)
 8000972:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000976:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */
	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_ETH_Init+0x78>)
 800097a:	f002 fb25 	bl	8002fc8 <HAL_ETH_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ETH_Init+0x74>
	{
		Error_Handler();
 8000984:	f000 f998 	bl	8000cb8 <Error_Handler>
	}
	/* USER CODE BEGIN ETH_Init 2 */
	/* USER CODE END ETH_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000680 	.word	0x20000680
 8000990:	40028000 	.word	0x40028000

08000994 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	/* USER CODE END SPI3_Init 0 */

	/* USER CODE BEGIN SPI3_Init 1 */
	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_SPI3_Init+0x64>)
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <MX_SPI3_Init+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a4:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c4:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009e0:	220a      	movs	r2, #10
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_SPI3_Init+0x64>)
 80009e6:	f003 fe9b 	bl	8004720 <HAL_SPI_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_SPI3_Init+0x60>
	{
		Error_Handler();
 80009f0:	f000 f962 	bl	8000cb8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */
	/* USER CODE END SPI3_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000538 	.word	0x20000538
 80009fc:	40003c00 	.word	0x40003c00

08000a00 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_Init 0 */
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */
	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <MX_USART3_UART_Init+0x50>)
 8000a08:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a38:	f004 f892 	bl	8004b60 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000a42:	f000 f939 	bl	8000cb8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */
	/* USER CODE END USART3_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000098 	.word	0x20000098
 8000a50:	40004800 	.word	0x40004800

08000a54 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_OTG_FS_Init 0 */
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */
	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a5e:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a68:	2202      	movs	r2, #2
 8000a6a:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a92:	f003 f8ab 	bl	8003bec <HAL_PCD_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USB_OTG_FS_PCD_Init+0x4c>
	{
		Error_Handler();
 8000a9c:	f000 f90c 	bl	8000cb8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */
	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000d8 	.word	0x200000d8

08000aa8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_DMA_Init+0x4c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MX_DMA_Init+0x4c>)
 8000ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_DMA_Init+0x4c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2038      	movs	r0, #56	; 0x38
 8000ad0:	f001 fd67 	bl	80025a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ad4:	2038      	movs	r0, #56	; 0x38
 8000ad6:	f001 fd80 	bl	80025da <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2039      	movs	r0, #57	; 0x39
 8000ae0:	f001 fd5f 	bl	80025a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ae4:	2039      	movs	r0, #57	; 0x39
 8000ae6:	f001 fd78 	bl	80025da <HAL_NVIC_EnableIRQ>

}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
 8000b12:	4b63      	ldr	r3, [pc, #396]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a62      	ldr	r2, [pc, #392]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b60      	ldr	r3, [pc, #384]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	623b      	str	r3, [r7, #32]
 8000b28:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a5b      	ldr	r2, [pc, #364]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b59      	ldr	r3, [pc, #356]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	4b55      	ldr	r3, [pc, #340]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a54      	ldr	r2, [pc, #336]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b52      	ldr	r3, [pc, #328]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	4b4e      	ldr	r3, [pc, #312]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a4d      	ldr	r2, [pc, #308]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a46      	ldr	r2, [pc, #280]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a3f      	ldr	r2, [pc, #252]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a38      	ldr	r2, [pc, #224]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5,
 8000bee:	2200      	movs	r2, #0
 8000bf0:	213c      	movs	r1, #60	; 0x3c
 8000bf2:	482c      	ldr	r0, [pc, #176]	; (8000ca4 <MX_GPIO_Init+0x1ac>)
 8000bf4:	f002 ffe2 	bl	8003bbc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bfe:	482a      	ldr	r0, [pc, #168]	; (8000ca8 <MX_GPIO_Init+0x1b0>)
 8000c00:	f002 ffdc 	bl	8003bbc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000c04:	2200      	movs	r2, #0
 8000c06:	2140      	movs	r1, #64	; 0x40
 8000c08:	4828      	ldr	r0, [pc, #160]	; (8000cac <MX_GPIO_Init+0x1b4>)
 8000c0a:	f002 ffd7 	bl	8003bbc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PE3 PE4 PE5 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000c0e:	233c      	movs	r3, #60	; 0x3c
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <MX_GPIO_Init+0x1ac>)
 8000c26:	f002 fe2b 	bl	8003880 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_GPIO_Init+0x1b8>)
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481d      	ldr	r0, [pc, #116]	; (8000cb4 <MX_GPIO_Init+0x1bc>)
 8000c40:	f002 fe1e 	bl	8003880 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000c44:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <MX_GPIO_Init+0x1b0>)
 8000c5e:	f002 fe0f 	bl	8003880 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_GPIO_Init+0x1b4>)
 8000c7a:	f002 fe01 	bl	8003880 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_GPIO_Init+0x1b4>)
 8000c92:	f002 fdf5 	bl	8003880 <HAL_GPIO_Init>

}
 8000c96:	bf00      	nop
 8000c98:	3738      	adds	r7, #56	; 0x38
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40021800 	.word	0x40021800
 8000cb0:	10110000 	.word	0x10110000
 8000cb4:	40020800 	.word	0x40020800

08000cb8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x48>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x48>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x48>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_MspInit+0x48>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_MspInit+0x48>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_MspInit+0x48>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a73      	ldr	r2, [pc, #460]	; (8000efc <HAL_ADC_MspInit+0x1ec>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d17a      	bne.n	8000e28 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	4b72      	ldr	r3, [pc, #456]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a71      	ldr	r2, [pc, #452]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a6a      	ldr	r2, [pc, #424]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b68      	ldr	r3, [pc, #416]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b64      	ldr	r3, [pc, #400]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a63      	ldr	r2, [pc, #396]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b61      	ldr	r3, [pc, #388]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000d86:	2309      	movs	r3, #9
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	485a      	ldr	r0, [pc, #360]	; (8000f04 <HAL_ADC_MspInit+0x1f4>)
 8000d9a:	f002 fd71 	bl	8003880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d9e:	2308      	movs	r3, #8
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da2:	2303      	movs	r3, #3
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	4855      	ldr	r0, [pc, #340]	; (8000f08 <HAL_ADC_MspInit+0x1f8>)
 8000db2:	f002 fd65 	bl	8003880 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000db6:	4b55      	ldr	r3, [pc, #340]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000db8:	4a55      	ldr	r2, [pc, #340]	; (8000f10 <HAL_ADC_MspInit+0x200>)
 8000dba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dbc:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc2:	4b52      	ldr	r3, [pc, #328]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	4b50      	ldr	r3, [pc, #320]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dce:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dd6:	4b4d      	ldr	r3, [pc, #308]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000dd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ddc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dde:	4b4b      	ldr	r3, [pc, #300]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000de0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000de6:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dee:	4b47      	ldr	r3, [pc, #284]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df4:	4b45      	ldr	r3, [pc, #276]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dfa:	4844      	ldr	r0, [pc, #272]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000dfc:	f001 fc08 	bl	8002610 <HAL_DMA_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000e06:	f7ff ff57 	bl	8000cb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a3f      	ldr	r2, [pc, #252]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000e0e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e10:	4a3e      	ldr	r2, [pc, #248]	; (8000f0c <HAL_ADC_MspInit+0x1fc>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2012      	movs	r0, #18
 8000e1c:	f001 fbc1 	bl	80025a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e20:	2012      	movs	r0, #18
 8000e22:	f001 fbda 	bl	80025da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e26:	e065      	b.n	8000ef4 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC3)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a39      	ldr	r2, [pc, #228]	; (8000f14 <HAL_ADC_MspInit+0x204>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d160      	bne.n	8000ef4 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a31      	ldr	r2, [pc, #196]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <HAL_ADC_MspInit+0x1f0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0320 	and.w	r3, r3, #32
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4826      	ldr	r0, [pc, #152]	; (8000f18 <HAL_ADC_MspInit+0x208>)
 8000e7e:	f002 fcff 	bl	8003880 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000e84:	4a26      	ldr	r2, [pc, #152]	; (8000f20 <HAL_ADC_MspInit+0x210>)
 8000e86:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000e8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e8e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eba:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000eca:	f001 fba1 	bl	8002610 <HAL_DMA_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 8000ed4:	f7ff fef0 	bl	8000cb8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_ADC_MspInit+0x20c>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2012      	movs	r0, #18
 8000eea:	f001 fb5a 	bl	80025a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eee:	2012      	movs	r0, #18
 8000ef0:	f001 fb73 	bl	80025da <HAL_NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40012000 	.word	0x40012000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	20000620 	.word	0x20000620
 8000f10:	40026410 	.word	0x40026410
 8000f14:	40012200 	.word	0x40012200
 8000f18:	40021400 	.word	0x40021400
 8000f1c:	200004d8 	.word	0x200004d8
 8000f20:	40026428 	.word	0x40026428

08000f24 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a55      	ldr	r2, [pc, #340]	; (8001098 <HAL_ETH_MspInit+0x174>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f040 80a4 	bne.w	8001090 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	4b53      	ldr	r3, [pc, #332]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	4a52      	ldr	r2, [pc, #328]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000f52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f56:	6313      	str	r3, [r2, #48]	; 0x30
 8000f58:	4b50      	ldr	r3, [pc, #320]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f60:	623b      	str	r3, [r7, #32]
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	4b4c      	ldr	r3, [pc, #304]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a4b      	ldr	r2, [pc, #300]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000f6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b49      	ldr	r3, [pc, #292]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	4b45      	ldr	r3, [pc, #276]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a44      	ldr	r2, [pc, #272]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000f8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b42      	ldr	r3, [pc, #264]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a3d      	ldr	r2, [pc, #244]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b3b      	ldr	r3, [pc, #236]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	4b37      	ldr	r3, [pc, #220]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	4a36      	ldr	r2, [pc, #216]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc8:	4b34      	ldr	r3, [pc, #208]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	4b30      	ldr	r3, [pc, #192]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	4a2f      	ldr	r2, [pc, #188]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <HAL_ETH_MspInit+0x178>)
 8000ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <HAL_ETH_MspInit+0x178>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800100c:	2332      	movs	r3, #50	; 0x32
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800101c:	230b      	movs	r3, #11
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	481e      	ldr	r0, [pc, #120]	; (80010a0 <HAL_ETH_MspInit+0x17c>)
 8001028:	f002 fc2a 	bl	8003880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800102c:	2386      	movs	r3, #134	; 0x86
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800103c:	230b      	movs	r3, #11
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	4817      	ldr	r0, [pc, #92]	; (80010a4 <HAL_ETH_MspInit+0x180>)
 8001048:	f002 fc1a 	bl	8003880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800104c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105e:	230b      	movs	r3, #11
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <HAL_ETH_MspInit+0x184>)
 800106a:	f002 fc09 	bl	8003880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800106e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001080:	230b      	movs	r3, #11
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <HAL_ETH_MspInit+0x188>)
 800108c:	f002 fbf8 	bl	8003880 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3738      	adds	r7, #56	; 0x38
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40028000 	.word	0x40028000
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40021800 	.word	0x40021800

080010b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a19      	ldr	r2, [pc, #100]	; (8001134 <HAL_SPI_MspInit+0x84>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d12c      	bne.n	800112c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_SPI_MspInit+0x88>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800110e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800111c:	2306      	movs	r3, #6
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_SPI_MspInit+0x8c>)
 8001128:	f002 fbaa 	bl	8003880 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40003c00 	.word	0x40003c00
 8001138:	40023800 	.word	0x40023800
 800113c:	40020800 	.word	0x40020800

08001140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <HAL_UART_MspInit+0x94>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d134      	bne.n	80011cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_UART_MspInit+0x98>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <HAL_UART_MspInit+0x98>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_UART_MspInit+0x98>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_UART_MspInit+0x98>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <HAL_UART_MspInit+0x98>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_UART_MspInit+0x98>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800119a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ac:	2307      	movs	r3, #7
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <HAL_UART_MspInit+0x9c>)
 80011b8:	f002 fb62 	bl	8003880 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2027      	movs	r0, #39	; 0x27
 80011c2:	f001 f9ee 	bl	80025a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011c6:	2027      	movs	r0, #39	; 0x27
 80011c8:	f001 fa07 	bl	80025da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40004800 	.word	0x40004800
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001200:	d13f      	bne.n	8001282 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <HAL_PCD_MspInit+0xac>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a20      	ldr	r2, [pc, #128]	; (800128c <HAL_PCD_MspInit+0xac>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <HAL_PCD_MspInit+0xac>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800121e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001230:	230a      	movs	r3, #10
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4815      	ldr	r0, [pc, #84]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 800123c:	f002 fb20 	bl	8003880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	480e      	ldr	r0, [pc, #56]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 8001256:	f002 fb13 	bl	8003880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_PCD_MspInit+0xac>)
 800125c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_PCD_MspInit+0xac>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001264:	6353      	str	r3, [r2, #52]	; 0x34
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_PCD_MspInit+0xac>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_PCD_MspInit+0xac>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_PCD_MspInit+0xac>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <HardFault_Handler+0x4>

080012a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <MemManage_Handler+0x4>

080012ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <BusFault_Handler+0x4>

080012b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <UsageFault_Handler+0x4>

080012b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 f90e 	bl	8001500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <ADC_IRQHandler+0x14>)
 80012ee:	f000 fae3 	bl	80018b8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <ADC_IRQHandler+0x18>)
 80012f4:	f000 fae0 	bl	80018b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000590 	.word	0x20000590
 8001300:	200005d8 	.word	0x200005d8

08001304 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <USART3_IRQHandler+0x10>)
 800130a:	f003 fd0f 	bl	8004d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000098 	.word	0x20000098

08001318 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <DMA2_Stream0_IRQHandler+0x10>)
 800131e:	f001 fbed 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000620 	.word	0x20000620

0800132c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <DMA2_Stream1_IRQHandler+0x10>)
 8001332:	f001 fbe3 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200004d8 	.word	0x200004d8

08001340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <_sbrk+0x5c>)
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <_sbrk+0x60>)
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <_sbrk+0x64>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <_sbrk+0x68>)
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	429a      	cmp	r2, r3
 800136e:	d207      	bcs.n	8001380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001370:	f004 fb9e 	bl	8005ab0 <__errno>
 8001374:	4602      	mov	r2, r0
 8001376:	230c      	movs	r3, #12
 8001378:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	e009      	b.n	8001394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <_sbrk+0x64>)
 8001390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20020000 	.word	0x20020000
 80013a0:	00000400 	.word	0x00000400
 80013a4:	2000008c 	.word	0x2000008c
 80013a8:	200006d0 	.word	0x200006d0

080013ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <SystemInit+0x50>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a11      	ldr	r2, [pc, #68]	; (80013fc <SystemInit+0x50>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <SystemInit+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <SystemInit+0x50>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <SystemInit+0x50>)
 80013c8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <SystemInit+0x50>)
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SystemInit+0x54>)
 80013d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <SystemInit+0x50>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <SystemInit+0x50>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SystemInit+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <SystemInit+0x58>)
 80013ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f0:	609a      	str	r2, [r3, #8]
#endif
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	24003010 	.word	0x24003010
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800140c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800140e:	e003      	b.n	8001418 <LoopCopyDataInit>

08001410 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001412:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001414:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001416:	3104      	adds	r1, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800141c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800141e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001420:	d3f6      	bcc.n	8001410 <CopyDataInit>
  ldr  r2, =_sbss
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001424:	e002      	b.n	800142c <LoopFillZerobss>

08001426 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001426:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001428:	f842 3b04 	str.w	r3, [r2], #4

0800142c <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800142e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001430:	d3f9      	bcc.n	8001426 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001432:	f7ff ffbb 	bl	80013ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001436:	f004 fb41 	bl	8005abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff f84d 	bl	80004d8 <main>
  bx  lr
 800143e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001440:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001444:	080063f4 	.word	0x080063f4
  ldr  r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800144c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001450:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001454:	200006d0 	.word	0x200006d0

08001458 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <CAN1_RX0_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <HAL_Init+0x40>)
 8001466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_Init+0x40>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_Init+0x40>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f001 f881 	bl	800258c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148a:	2000      	movs	r0, #0
 800148c:	f000 f808 	bl	80014a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff fc18 	bl	8000cc4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x54>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x58>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 f899 	bl	80025f6 <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00e      	b.n	80014ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d80a      	bhi.n	80014ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f001 f861 	bl	80025a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_InitTick+0x5c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000004 	.word	0x20000004

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_IncTick+0x1c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x20>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a03      	ldr	r2, [pc, #12]	; (8001520 <HAL_IncTick+0x20>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000008 	.word	0x20000008
 8001520:	200006c8 	.word	0x200006c8

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b02      	ldr	r3, [pc, #8]	; (8001534 <HAL_GetTick+0x10>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	200006c8 	.word	0x200006c8

08001538 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001540:	f7ff fff0 	bl	8001524 <HAL_GetTick>
 8001544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001550:	d005      	beq.n	800155e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_Delay+0x40>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155e:	bf00      	nop
 8001560:	f7ff ffe0 	bl	8001524 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	429a      	cmp	r2, r3
 800156e:	d8f7      	bhi.n	8001560 <HAL_Delay+0x28>
  {
  }
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000008 	.word	0x20000008

0800157c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e033      	b.n	80015fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fbb8 	bl	8000d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d118      	bne.n	80015ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015c2:	f023 0302 	bic.w	r3, r3, #2
 80015c6:	f043 0202 	orr.w	r2, r3, #2
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fd80 	bl	80020d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f023 0303 	bic.w	r3, r3, #3
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	641a      	str	r2, [r3, #64]	; 0x40
 80015ea:	e001      	b.n	80015f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_ADC_Start+0x1a>
 800161a:	2302      	movs	r3, #2
 800161c:	e088      	b.n	8001730 <HAL_ADC_Start+0x12c>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b01      	cmp	r3, #1
 8001632:	d018      	beq.n	8001666 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001644:	4b3d      	ldr	r3, [pc, #244]	; (800173c <HAL_ADC_Start+0x138>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a3d      	ldr	r2, [pc, #244]	; (8001740 <HAL_ADC_Start+0x13c>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0c9a      	lsrs	r2, r3, #18
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8001658:	e002      	b.n	8001660 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b01      	subs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f9      	bne.n	800165a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d15c      	bne.n	800172e <HAL_ADC_Start+0x12a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800169e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016b2:	d106      	bne.n	80016c2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	f023 0206 	bic.w	r2, r3, #6
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	645a      	str	r2, [r3, #68]	; 0x44
 80016c0:	e002      	b.n	80016c8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <HAL_ADC_Start+0x140>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d11c      	bne.n	800172e <HAL_ADC_Start+0x12a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	e013      	b.n	800172e <HAL_ADC_Start+0x12a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_ADC_Start+0x144>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d10e      	bne.n	800172e <HAL_ADC_Start+0x12a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d107      	bne.n	800172e <HAL_ADC_Start+0x12a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800172c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000000 	.word	0x20000000
 8001740:	431bde83 	.word	0x431bde83
 8001744:	40012300 	.word	0x40012300
 8001748:	40012000 	.word	0x40012000

0800174c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Stop+0x16>
 800175e:	2302      	movs	r3, #2
 8001760:	e021      	b.n	80017a6 <HAL_ADC_Stop+0x5a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017cc:	d113      	bne.n	80017f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017dc:	d10b      	bne.n	80017f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f043 0220 	orr.w	r2, r3, #32
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e05c      	b.n	80018b0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80017f6:	f7ff fe95 	bl	8001524 <HAL_GetTick>
 80017fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017fc:	e01a      	b.n	8001834 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d016      	beq.n	8001834 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_ADC_PollForConversion+0x6c>
 800180c:	f7ff fe8a 	bl	8001524 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d20b      	bcs.n	8001834 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f043 0204 	orr.w	r2, r3, #4
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e03d      	b.n	80018b0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b02      	cmp	r3, #2
 8001840:	d1dd      	bne.n	80017fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f06f 0212 	mvn.w	r2, #18
 800184a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d123      	bne.n	80018ae <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11f      	bne.n	80018ae <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001886:	2b00      	cmp	r3, #0
 8001888:	d111      	bne.n	80018ae <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d105      	bne.n	80018ae <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	bf0c      	ite	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2300      	movne	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d049      	beq.n	800198e <HAL_ADC_IRQHandler+0xd6>
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d046      	beq.n	800198e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d12b      	bne.n	800197e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	d127      	bne.n	800197e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001946:	2b00      	cmp	r3, #0
 8001948:	d119      	bne.n	800197e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0220 	bic.w	r2, r2, #32
 8001958:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fa04 	bl	8001d8c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0212 	mvn.w	r2, #18
 800198c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b04      	cmp	r3, #4
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	2b80      	cmp	r3, #128	; 0x80
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d057      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x1b8>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d054      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d139      	bne.n	8001a60 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d12b      	bne.n	8001a60 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d124      	bne.n	8001a60 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11d      	bne.n	8001a60 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d119      	bne.n	8001a60 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fcbd 	bl	80023e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f06f 020c 	mvn.w	r2, #12
 8001a6e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b40      	cmp	r3, #64	; 0x40
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d017      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x21a>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d014      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f974 	bl	8001db0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0201 	mvn.w	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d015      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x27a>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d012      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	f043 0202 	orr.w	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0220 	mvn.w	r2, #32
 8001b20:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f94d 	bl	8001dc2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0220 	mvn.w	r2, #32
 8001b30:	601a      	str	r2, [r3, #0]
  }
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_Start_DMA+0x1e>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e0af      	b.n	8001cba <HAL_ADC_Start_DMA+0x17e>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d018      	beq.n	8001ba2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b80:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <HAL_ADC_Start_DMA+0x188>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a50      	ldr	r2, [pc, #320]	; (8001cc8 <HAL_ADC_Start_DMA+0x18c>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0c9a      	lsrs	r2, r3, #18
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8001b94:	e002      	b.n	8001b9c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f9      	bne.n	8001b96 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	f040 8083 	bne.w	8001cb8 <HAL_ADC_Start_DMA+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf0:	d106      	bne.n	8001c00 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f023 0206 	bic.w	r2, r3, #6
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
 8001bfe:	e002      	b.n	8001c06 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	4a2e      	ldr	r2, [pc, #184]	; (8001ccc <HAL_ADC_Start_DMA+0x190>)
 8001c14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1a:	4a2d      	ldr	r2, [pc, #180]	; (8001cd0 <HAL_ADC_Start_DMA+0x194>)
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	4a2c      	ldr	r2, [pc, #176]	; (8001cd4 <HAL_ADC_Start_DMA+0x198>)
 8001c24:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c3e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c4e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	334c      	adds	r3, #76	; 0x4c
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f000 fd84 	bl	800276c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_ADC_Start_DMA+0x19c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10f      	bne.n	8001c90 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d11c      	bne.n	8001cb8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	e013      	b.n	8001cb8 <HAL_ADC_Start_DMA+0x17c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <HAL_ADC_Start_DMA+0x1a0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d10e      	bne.n	8001cb8 <HAL_ADC_Start_DMA+0x17c>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cb6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	431bde83 	.word	0x431bde83
 8001ccc:	080022dd 	.word	0x080022dd
 8001cd0:	08002397 	.word	0x08002397
 8001cd4:	080023b3 	.word	0x080023b3
 8001cd8:	40012300 	.word	0x40012300
 8001cdc:	40012000 	.word	0x40012000

08001ce0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_Stop_DMA+0x1a>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e038      	b.n	8001d6c <HAL_ADC_Stop_DMA+0x8c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d120      	bne.n	8001d62 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d2e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fd71 	bl	800281c <HAL_DMA_Abort>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d4c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1c>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e103      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x224>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	d925      	bls.n	8001e4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68d9      	ldr	r1, [r3, #12]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	3b1e      	subs	r3, #30
 8001e16:	2207      	movs	r2, #7
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	400a      	ands	r2, r1
 8001e24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68d9      	ldr	r1, [r3, #12]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	4603      	mov	r3, r0
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4403      	add	r3, r0
 8001e3e:	3b1e      	subs	r3, #30
 8001e40:	409a      	lsls	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	e022      	b.n	8001e92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6919      	ldr	r1, [r3, #16]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	2207      	movs	r2, #7
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6919      	ldr	r1, [r3, #16]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4403      	add	r3, r0
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d824      	bhi.n	8001ee4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b05      	subs	r3, #5
 8001eac:	221f      	movs	r2, #31
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	400a      	ands	r2, r1
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3b05      	subs	r3, #5
 8001ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee2:	e04c      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b0c      	cmp	r3, #12
 8001eea:	d824      	bhi.n	8001f36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3b23      	subs	r3, #35	; 0x23
 8001efe:	221f      	movs	r2, #31
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43da      	mvns	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b23      	subs	r3, #35	; 0x23
 8001f28:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
 8001f34:	e023      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3b41      	subs	r3, #65	; 0x41
 8001f48:	221f      	movs	r2, #31
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	400a      	ands	r2, r1
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b41      	subs	r3, #65	; 0x41
 8001f72:	fa00 f203 	lsl.w	r2, r0, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_ADC_ConfigChannel+0x230>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d109      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1c8>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_ADC_ConfigChannel+0x234>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_ADC_ConfigChannel+0x234>)
 8001f96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f9a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_ADC_ConfigChannel+0x230>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d123      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x21a>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d003      	beq.n	8001fb6 <HAL_ADC_ConfigChannel+0x1e2>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b11      	cmp	r3, #17
 8001fb4:	d11b      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_ADC_ConfigChannel+0x234>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_ADC_ConfigChannel+0x234>)
 8001fbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fc0:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d111      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_ADC_ConfigChannel+0x238>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a10      	ldr	r2, [pc, #64]	; (8002010 <HAL_ADC_ConfigChannel+0x23c>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	0c9a      	lsrs	r2, r3, #18
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001fe0:	e002      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f9      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40012000 	.word	0x40012000
 8002008:	40012300 	.word	0x40012300
 800200c:	20000000 	.word	0x20000000
 8002010:	431bde83 	.word	0x431bde83

08002014 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_ADC_AnalogWDGConfig+0x18>
 8002028:	2302      	movs	r3, #2
 800202a:	e04d      	b.n	80020c8 <HAL_ADC_AnalogWDGConfig+0xb4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d108      	bne.n	800204e <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	e007      	b.n	800205e <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800205c:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800206c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002070:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	6852      	ldr	r2, [r2, #4]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	6892      	ldr	r2, [r2, #8]
 8002096:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 021f 	bic.w	r2, r2, #31
 80020a6:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4619      	mov	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020dc:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <ADC_Init+0x200>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a7c      	ldr	r2, [pc, #496]	; (80022d4 <ADC_Init+0x200>)
 80020e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020e8:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <ADC_Init+0x200>)
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4978      	ldr	r1, [pc, #480]	; (80022d4 <ADC_Init+0x200>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	021a      	lsls	r2, r3, #8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	4a5d      	ldr	r2, [pc, #372]	; (80022d8 <ADC_Init+0x204>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d022      	beq.n	80021ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002176:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e00f      	b.n	80021ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0202 	bic.w	r2, r2, #2
 80021dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6899      	ldr	r1, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	005a      	lsls	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d027      	beq.n	800224a <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002208:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002218:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	3b01      	subs	r3, #1
 8002220:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002224:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	fa92 f2a2 	rbit	r2, r2
 800222c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	fab2 f282 	clz	r2, r2
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	fa03 f102 	lsl.w	r1, r3, r2
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	e007      	b.n	800225a <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002258:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	3b01      	subs	r3, #1
 8002276:	051a      	lsls	r2, r3, #20
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800228e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	025a      	lsls	r2, r3, #9
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	029a      	lsls	r2, r3, #10
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40012300 	.word	0x40012300
 80022d8:	0f000001 	.word	0x0f000001

080022dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d13c      	bne.n	8002370 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d12b      	bne.n	8002368 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d127      	bne.n	8002368 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002330:	2b00      	cmp	r3, #0
 8002332:	d119      	bne.n	8002368 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0220 	bic.w	r2, r2, #32
 8002342:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d105      	bne.n	8002368 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7ff fd0f 	bl	8001d8c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800236e:	e00e      	b.n	800238e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f7ff fd20 	bl	8001dc2 <HAL_ADC_ErrorCallback>
}
 8002382:	e004      	b.n	800238e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	4798      	blx	r3
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fcfa 	bl	8001d9e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f043 0204 	orr.w	r2, r3, #4
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f7ff fcf5 	bl	8001dc2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
	...

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4906      	ldr	r1, [pc, #24]	; (800248c <__NVIC_EnableIRQ+0x34>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100

08002490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	db0a      	blt.n	80024ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	490c      	ldr	r1, [pc, #48]	; (80024dc <__NVIC_SetPriority+0x4c>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	440b      	add	r3, r1
 80024b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b8:	e00a      	b.n	80024d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4908      	ldr	r1, [pc, #32]	; (80024e0 <__NVIC_SetPriority+0x50>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3b04      	subs	r3, #4
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	440b      	add	r3, r1
 80024ce:	761a      	strb	r2, [r3, #24]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f1c3 0307 	rsb	r3, r3, #7
 80024fe:	2b04      	cmp	r3, #4
 8002500:	bf28      	it	cs
 8002502:	2304      	movcs	r3, #4
 8002504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3304      	adds	r3, #4
 800250a:	2b06      	cmp	r3, #6
 800250c:	d902      	bls.n	8002514 <NVIC_EncodePriority+0x30>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3b03      	subs	r3, #3
 8002512:	e000      	b.n	8002516 <NVIC_EncodePriority+0x32>
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	f04f 32ff 	mov.w	r2, #4294967295
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43d9      	mvns	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	4313      	orrs	r3, r2
         );
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002558:	d301      	bcc.n	800255e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255a:	2301      	movs	r3, #1
 800255c:	e00f      	b.n	800257e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <SysTick_Config+0x40>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002566:	210f      	movs	r1, #15
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f7ff ff90 	bl	8002490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <SysTick_Config+0x40>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SysTick_Config+0x40>)
 8002578:	2207      	movs	r2, #7
 800257a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000e010 	.word	0xe000e010

0800258c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ff2d 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b4:	f7ff ff42 	bl	800243c <__NVIC_GetPriorityGrouping>
 80025b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	6978      	ldr	r0, [r7, #20]
 80025c0:	f7ff ff90 	bl	80024e4 <NVIC_EncodePriority>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff5f 	bl	8002490 <__NVIC_SetPriority>
}
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff35 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffa2 	bl	8002548 <SysTick_Config>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7fe ff82 	bl	8001524 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e099      	b.n	8002760 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264c:	e00f      	b.n	800266e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800264e:	f7fe ff69 	bl	8001524 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b05      	cmp	r3, #5
 800265a:	d908      	bls.n	800266e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2203      	movs	r2, #3
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e078      	b.n	8002760 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e8      	bne.n	800264e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_DMA_Init+0x158>)
 8002688:	4013      	ands	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800269a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d107      	bne.n	80026d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4313      	orrs	r3, r2
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f023 0307 	bic.w	r3, r3, #7
 80026ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d117      	bne.n	8002732 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00e      	beq.n	8002732 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fbdd 	bl	8002ed4 <DMA_CheckFifoParam>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800272e:	2301      	movs	r3, #1
 8002730:	e016      	b.n	8002760 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fb96 	bl	8002e6c <DMA_CalcBaseAndBitshift>
 8002740:	4603      	mov	r3, r0
 8002742:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	223f      	movs	r2, #63	; 0x3f
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	f010803f 	.word	0xf010803f

0800276c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_DMA_Start_IT+0x26>
 800278e:	2302      	movs	r3, #2
 8002790:	e040      	b.n	8002814 <HAL_DMA_Start_IT+0xa8>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d12f      	bne.n	8002806 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fb28 	bl	8002e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	223f      	movs	r2, #63	; 0x3f
 80027c6:	409a      	lsls	r2, r3
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0216 	orr.w	r2, r2, #22
 80027da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0208 	orr.w	r2, r2, #8
 80027f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e005      	b.n	8002812 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002812:	7dfb      	ldrb	r3, [r7, #23]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800282a:	f7fe fe7b 	bl	8001524 <HAL_GetTick>
 800282e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d008      	beq.n	800284e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e052      	b.n	80028f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0216 	bic.w	r2, r2, #22
 800285c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <HAL_DMA_Abort+0x62>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0208 	bic.w	r2, r2, #8
 800288c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289e:	e013      	b.n	80028c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028a0:	f7fe fe40 	bl	8001524 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d90c      	bls.n	80028c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2203      	movs	r2, #3
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e015      	b.n	80028f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1e4      	bne.n	80028a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	223f      	movs	r2, #63	; 0x3f
 80028dc:	409a      	lsls	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d004      	beq.n	800291a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e00c      	b.n	8002934 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2205      	movs	r2, #5
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b08a      	sub	sp, #40	; 0x28
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	460b      	mov	r3, r1
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 800294c:	2300      	movs	r3, #0
 800294e:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8002950:	f7fe fde8 	bl	8001524 <HAL_GetTick>
 8002954:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d008      	beq.n	8002974 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0bf      	b.n	8002af4 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0b2      	b.n	8002af4 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800298e:	7afb      	ldrb	r3, [r7, #11]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d106      	bne.n	80029a2 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	2220      	movs	r2, #32
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
 80029a0:	e005      	b.n	80029ae <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2210      	movs	r2, #16
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80029ba:	e05a      	b.n	8002a72 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c2:	d017      	beq.n	80029f4 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <HAL_DMA_PollForTransfer+0x9c>
 80029ca:	f7fe fdab 	bl	8001524 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d20c      	bcs.n	80029f4 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e07f      	b.n	8002af4 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	2208      	movs	r2, #8
 8002a00:	409a      	lsls	r2, r3
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	2201      	movs	r2, #1
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f043 0202 	orr.w	r2, r3, #2
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	2201      	movs	r2, #1
 8002a44:	409a      	lsls	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	2204      	movs	r2, #4
 8002a50:	409a      	lsls	r2, r3
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002a72:	6a3a      	ldr	r2, [r7, #32]
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_DMA_PollForTransfer+0x14a>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d099      	beq.n	80029bc <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d012      	beq.n	8002ac2 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff febd 	bl	800281c <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	2230      	movs	r2, #48	; 0x30
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e018      	b.n	8002af4 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10e      	bne.n	8002ae6 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2230      	movs	r2, #48	; 0x30
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002ae4:	e005      	b.n	8002af2 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	2210      	movs	r2, #16
 8002aec:	409a      	lsls	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8002af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3728      	adds	r7, #40	; 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b08:	4b92      	ldr	r3, [pc, #584]	; (8002d54 <HAL_DMA_IRQHandler+0x258>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a92      	ldr	r2, [pc, #584]	; (8002d58 <HAL_DMA_IRQHandler+0x25c>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2208      	movs	r2, #8
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01a      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0204 	bic.w	r2, r2, #4
 8002b4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	2208      	movs	r2, #8
 8002b56:	409a      	lsls	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	f043 0202 	orr.w	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	2210      	movs	r2, #16
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d043      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d03c      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d018      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d108      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d024      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
 8002c2a:	e01f      	b.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01b      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
 8002c3c:	e016      	b.n	8002c6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0208 	bic.w	r2, r2, #8
 8002c5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	2220      	movs	r2, #32
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 808e 	beq.w	8002d9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8086 	beq.w	8002d9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	2220      	movs	r2, #32
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d136      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0216 	bic.w	r2, r2, #22
 8002cb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_DMA_IRQHandler+0x1da>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0208 	bic.w	r2, r2, #8
 8002ce4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	223f      	movs	r2, #63	; 0x3f
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d07d      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
        }
        return;
 8002d12:	e078      	b.n	8002e06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01c      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d108      	bne.n	8002d42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d030      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
 8002d40:	e02b      	b.n	8002d9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d027      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
 8002d52:	e022      	b.n	8002d9a <HAL_DMA_IRQHandler+0x29e>
 8002d54:	20000000 	.word	0x20000000
 8002d58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0210 	bic.w	r2, r2, #16
 8002d78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d032      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d022      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2205      	movs	r2, #5
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d307      	bcc.n	8002de2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f2      	bne.n	8002dc6 <HAL_DMA_IRQHandler+0x2ca>
 8002de0:	e000      	b.n	8002de4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002de2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
 8002e04:	e000      	b.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e06:	bf00      	nop
    }
  }
}
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop

08002e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d108      	bne.n	8002e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e4e:	e007      	b.n	8002e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
	...

08002e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3b10      	subs	r3, #16
 8002e7c:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <DMA_CalcBaseAndBitshift+0x60>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d909      	bls.n	8002eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	1d1a      	adds	r2, r3, #4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8002eac:	e007      	b.n	8002ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	aaaaaaab 	.word	0xaaaaaaab
 8002ed0:	080063a8 	.word	0x080063a8

08002ed4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11f      	bne.n	8002f2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d855      	bhi.n	8002fa0 <DMA_CheckFifoParam+0xcc>
 8002ef4:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <DMA_CheckFifoParam+0x28>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f0d 	.word	0x08002f0d
 8002f00:	08002f1f 	.word	0x08002f1f
 8002f04:	08002f0d 	.word	0x08002f0d
 8002f08:	08002fa1 	.word	0x08002fa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d045      	beq.n	8002fa4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1c:	e042      	b.n	8002fa4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f26:	d13f      	bne.n	8002fa8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2c:	e03c      	b.n	8002fa8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f36:	d121      	bne.n	8002f7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d836      	bhi.n	8002fac <DMA_CheckFifoParam+0xd8>
 8002f3e:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <DMA_CheckFifoParam+0x70>)
 8002f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f44:	08002f55 	.word	0x08002f55
 8002f48:	08002f5b 	.word	0x08002f5b
 8002f4c:	08002f55 	.word	0x08002f55
 8002f50:	08002f6d 	.word	0x08002f6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
      break;
 8002f58:	e02f      	b.n	8002fba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d024      	beq.n	8002fb0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6a:	e021      	b.n	8002fb0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f74:	d11e      	bne.n	8002fb4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f7a:	e01b      	b.n	8002fb4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d902      	bls.n	8002f88 <DMA_CheckFifoParam+0xb4>
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d003      	beq.n	8002f8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f86:	e018      	b.n	8002fba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8c:	e015      	b.n	8002fba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00e      	beq.n	8002fb8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9e:	e00b      	b.n	8002fb8 <DMA_CheckFifoParam+0xe4>
      break;
 8002fa0:	bf00      	nop
 8002fa2:	e00a      	b.n	8002fba <DMA_CheckFifoParam+0xe6>
      break;
 8002fa4:	bf00      	nop
 8002fa6:	e008      	b.n	8002fba <DMA_CheckFifoParam+0xe6>
      break;
 8002fa8:	bf00      	nop
 8002faa:	e006      	b.n	8002fba <DMA_CheckFifoParam+0xe6>
      break;
 8002fac:	bf00      	nop
 8002fae:	e004      	b.n	8002fba <DMA_CheckFifoParam+0xe6>
      break;
 8002fb0:	bf00      	nop
 8002fb2:	e002      	b.n	8002fba <DMA_CheckFifoParam+0xe6>
      break;   
 8002fb4:	bf00      	nop
 8002fb6:	e000      	b.n	8002fba <DMA_CheckFifoParam+0xe6>
      break;
 8002fb8:	bf00      	nop
    }
  } 
  
  return status; 
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop

08002fc8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002fd8:	4ba3      	ldr	r3, [pc, #652]	; (8003268 <HAL_ETH_Init+0x2a0>)
 8002fda:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e175      	b.n	80032da <HAL_ETH_Init+0x312>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd ff8e 	bl	8000f24 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	4b97      	ldr	r3, [pc, #604]	; (800326c <HAL_ETH_Init+0x2a4>)
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	4a96      	ldr	r2, [pc, #600]	; (800326c <HAL_ETH_Init+0x2a4>)
 8003012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003016:	6453      	str	r3, [r2, #68]	; 0x44
 8003018:	4b94      	ldr	r3, [pc, #592]	; (800326c <HAL_ETH_Init+0x2a4>)
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003024:	4b92      	ldr	r3, [pc, #584]	; (8003270 <HAL_ETH_Init+0x2a8>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a91      	ldr	r2, [pc, #580]	; (8003270 <HAL_ETH_Init+0x2a8>)
 800302a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800302e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003030:	4b8f      	ldr	r3, [pc, #572]	; (8003270 <HAL_ETH_Init+0x2a8>)
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	498d      	ldr	r1, [pc, #564]	; (8003270 <HAL_ETH_Init+0x2a8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003054:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003056:	f7fe fa65 	bl	8001524 <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800305c:	e011      	b.n	8003082 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 800305e:	f7fe fa61 	bl	8001524 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800306c:	d909      	bls.n	8003082 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2203      	movs	r2, #3
 8003072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e12b      	b.n	80032da <HAL_ETH_Init+0x312>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e4      	bne.n	800305e <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f023 031c 	bic.w	r3, r3, #28
 80030a2:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80030a4:	f001 faee 	bl	8004684 <HAL_RCC_GetHCLKFreq>
 80030a8:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	4a71      	ldr	r2, [pc, #452]	; (8003274 <HAL_ETH_Init+0x2ac>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d908      	bls.n	80030c4 <HAL_ETH_Init+0xfc>
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4a70      	ldr	r2, [pc, #448]	; (8003278 <HAL_ETH_Init+0x2b0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d804      	bhi.n	80030c4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	e01a      	b.n	80030fa <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	4a6c      	ldr	r2, [pc, #432]	; (8003278 <HAL_ETH_Init+0x2b0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d908      	bls.n	80030de <HAL_ETH_Init+0x116>
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	4a6b      	ldr	r2, [pc, #428]	; (800327c <HAL_ETH_Init+0x2b4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d804      	bhi.n	80030de <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f043 030c 	orr.w	r3, r3, #12
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	e00d      	b.n	80030fa <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4a66      	ldr	r2, [pc, #408]	; (800327c <HAL_ETH_Init+0x2b4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d903      	bls.n	80030ee <HAL_ETH_Init+0x126>
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4a65      	ldr	r2, [pc, #404]	; (8003280 <HAL_ETH_Init+0x2b8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d904      	bls.n	80030f8 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e000      	b.n	80030fa <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80030f8:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003102:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003106:	2100      	movs	r1, #0
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f953 	bl	80033b4 <HAL_ETH_WritePHYRegister>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003118:	6939      	ldr	r1, [r7, #16]
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f9b0 	bl	8003480 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0d6      	b.n	80032da <HAL_ETH_Init+0x312>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800312c:	20ff      	movs	r0, #255	; 0xff
 800312e:	f7fe fa03 	bl	8001538 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80a4 	beq.w	8003284 <HAL_ETH_Init+0x2bc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800313c:	f7fe f9f2 	bl	8001524 <HAL_GetTick>
 8003140:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	461a      	mov	r2, r3
 8003148:	2101      	movs	r1, #1
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8ca 	bl	80032e4 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8003150:	f7fe f9e8 	bl	8001524 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d90f      	bls.n	8003182 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003166:	6939      	ldr	r1, [r7, #16]
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f989 	bl	8003480 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0ab      	b.n	80032da <HAL_ETH_Init+0x312>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0da      	beq.n	8003142 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800318c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003190:	2100      	movs	r1, #0
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f90e 	bl	80033b4 <HAL_ETH_WritePHYRegister>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80031a2:	6939      	ldr	r1, [r7, #16]
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f96b 	bl	8003480 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e091      	b.n	80032da <HAL_ETH_Init+0x312>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80031b6:	f7fe f9b5 	bl	8001524 <HAL_GetTick>
 80031ba:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80031bc:	f107 030c 	add.w	r3, r7, #12
 80031c0:	461a      	mov	r2, r3
 80031c2:	2101      	movs	r1, #1
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f88d 	bl	80032e4 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80031ca:	f7fe f9ab 	bl	8001524 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d90f      	bls.n	80031fc <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80031e0:	6939      	ldr	r1, [r7, #16]
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f94c 	bl	8003480 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e06e      	b.n	80032da <HAL_ETH_Init+0x312>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0da      	beq.n	80031bc <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	461a      	mov	r2, r3
 800320c:	211f      	movs	r1, #31
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f868 	bl	80032e4 <HAL_ETH_ReadPHYRegister>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800321e:	6939      	ldr	r1, [r7, #16]
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f92d 	bl	8003480 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e053      	b.n	80032da <HAL_ETH_Init+0x312>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003242:	60da      	str	r2, [r3, #12]
 8003244:	e002      	b.n	800324c <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e034      	b.n	80032c8 <HAL_ETH_Init+0x300>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	e02f      	b.n	80032c8 <HAL_ETH_Init+0x300>
 8003268:	03938700 	.word	0x03938700
 800326c:	40023800 	.word	0x40023800
 8003270:	40013800 	.word	0x40013800
 8003274:	01312cff 	.word	0x01312cff
 8003278:	02160ebf 	.word	0x02160ebf
 800327c:	039386ff 	.word	0x039386ff
 8003280:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003294:	4313      	orrs	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	2100      	movs	r1, #0
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f889 	bl	80033b4 <HAL_ETH_WritePHYRegister>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <HAL_ETH_Init+0x2f8>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80032ac:	6939      	ldr	r1, [r7, #16]
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8e6 	bl	8003480 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e00c      	b.n	80032da <HAL_ETH_Init+0x312>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80032c0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80032c4:	f7fe f938 	bl	8001538 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80032c8:	6939      	ldr	r1, [r7, #16]
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8d8 	bl	8003480 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop

080032e4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	460b      	mov	r3, r1
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b82      	cmp	r3, #130	; 0x82
 8003304:	d101      	bne.n	800330a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	e050      	b.n	80033ac <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2282      	movs	r2, #130	; 0x82
 800330e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 031c 	and.w	r3, r3, #28
 8003320:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8a1b      	ldrh	r3, [r3, #16]
 8003326:	02db      	lsls	r3, r3, #11
 8003328:	b29b      	uxth	r3, r3
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003330:	897b      	ldrh	r3, [r7, #10]
 8003332:	019b      	lsls	r3, r3, #6
 8003334:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f023 0302 	bic.w	r3, r3, #2
 8003344:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003356:	f7fe f8e5 	bl	8001524 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800335c:	e015      	b.n	800338a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800335e:	f7fe f8e1 	bl	8001524 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d309      	bcc.n	8003382 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e014      	b.n	80033ac <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e4      	bne.n	800335e <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	b29b      	uxth	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	460b      	mov	r3, r1
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b42      	cmp	r3, #66	; 0x42
 80033d4:	d101      	bne.n	80033da <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
 80033d8:	e04e      	b.n	8003478 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2242      	movs	r2, #66	; 0x42
 80033de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 031c 	and.w	r3, r3, #28
 80033f0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8a1b      	ldrh	r3, [r3, #16]
 80033f6:	02db      	lsls	r3, r3, #11
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	019b      	lsls	r3, r3, #6
 8003404:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003430:	f7fe f878 	bl	8001524 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003436:	e015      	b.n	8003464 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003438:	f7fe f874 	bl	8001524 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003446:	d309      	bcc.n	800345c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e00d      	b.n	8003478 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e4      	bne.n	8003438 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b0b0      	sub	sp, #192	; 0xc0
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800349c:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034a4:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80034ae:	2300      	movs	r3, #0
 80034b0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80034c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ca:	663b      	str	r3, [r7, #96]	; 0x60
 80034cc:	e001      	b.n	80034d2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80034d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80034dc:	2300      	movs	r3, #0
 80034de:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80034ec:	2340      	movs	r3, #64	; 0x40
 80034ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003532:	2300      	movs	r3, #0
 8003534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800353e:	2300      	movs	r3, #0
 8003540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003554:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003558:	4bac      	ldr	r3, [pc, #688]	; (800380c <ETH_MACDMAConfig+0x38c>)
 800355a:	4013      	ands	r3, r2
 800355c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8003560:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8003562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8003564:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8003566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8003568:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 800356a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 800356c:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8003572:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8003574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8003576:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8003578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 800357a:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8003580:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8003582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8003584:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8003586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8003588:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 800358a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 800358c:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 800358e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8003590:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8003592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8003594:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8003596:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035b4:	2001      	movs	r0, #1
 80035b6:	f7fd ffbf 	bl	8001538 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035c2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80035c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80035c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80035c8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80035ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80035cc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 80035ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80035d2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80035d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 80035d8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80035da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80035de:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80035e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80035e4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80035e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80035f0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80035f2:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035fe:	2001      	movs	r0, #1
 8003600:	f7fd ff9a 	bl	8001538 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800360c:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003616:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003620:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800362c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003630:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003634:	4013      	ands	r3, r2
 8003636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800363a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800363e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8003644:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800364a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 800364c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003650:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8003656:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8003658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800365c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800365e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003670:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800367c:	2001      	movs	r0, #1
 800367e:	f7fd ff5b 	bl	8001538 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800368a:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 800368c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8003690:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7fd ff46 	bl	8001538 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036b4:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80036ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036be:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80036c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036c8:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80036da:	2304      	movs	r3, #4
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80036de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80036e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e8:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80036f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036f4:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80036fe:	2300      	movs	r3, #0
 8003700:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370a:	3318      	adds	r3, #24
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003712:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003716:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <ETH_MACDMAConfig+0x390>)
 8003718:	4013      	ands	r3, r2
 800371a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800371e:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8003720:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8003722:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8003724:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8003726:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8003728:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 800372a:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 800372c:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 800372e:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8003730:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8003732:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8003734:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8003736:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 800373a:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 800373e:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8003740:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003752:	3318      	adds	r3, #24
 8003754:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003758:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003762:	3318      	adds	r3, #24
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800376a:	2001      	movs	r0, #1
 800376c:	f7fd fee4 	bl	8001538 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003778:	3318      	adds	r3, #24
 800377a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800377e:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8003780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8003784:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8003788:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 800378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800378c:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 800378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8003790:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8003792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003794:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8003796:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8003798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 800379a:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a8:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037b8:	2001      	movs	r0, #1
 80037ba:	f7fd febd 	bl	8001538 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037ca:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10f      	bne.n	80037f4 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037dc:	331c      	adds	r3, #28
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f0:	331c      	adds	r3, #28
 80037f2:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	461a      	mov	r2, r3
 80037fa:	2100      	movs	r1, #0
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f809 	bl	8003814 <ETH_MACAddressConfig>
}
 8003802:	bf00      	nop
 8003804:	37c0      	adds	r7, #192	; 0xc0
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	ff20810f 	.word	0xff20810f
 8003810:	f8de3f23 	.word	0xf8de3f23

08003814 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3305      	adds	r3, #5
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	3204      	adds	r2, #4
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <ETH_MACAddressConfig+0x64>)
 8003836:	4413      	add	r3, r2
 8003838:	461a      	mov	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3303      	adds	r3, #3
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	061a      	lsls	r2, r3, #24
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3302      	adds	r3, #2
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3301      	adds	r3, #1
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	4313      	orrs	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	7812      	ldrb	r2, [r2, #0]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <ETH_MACAddressConfig+0x68>)
 8003866:	4413      	add	r3, r2
 8003868:	461a      	mov	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6013      	str	r3, [r2, #0]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	40028040 	.word	0x40028040
 800387c:	40028044 	.word	0x40028044

08003880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800388e:	e16f      	b.n	8003b70 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2101      	movs	r1, #1
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	4013      	ands	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8161 	beq.w	8003b6a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d00b      	beq.n	80038c8 <HAL_GPIO_Init+0x48>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d007      	beq.n	80038c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038bc:	2b11      	cmp	r3, #17
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b12      	cmp	r3, #18
 80038c6:	d130      	bne.n	800392a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038fe:	2201      	movs	r2, #1
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 0201 	and.w	r2, r3, #1
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	2203      	movs	r2, #3
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0xea>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b12      	cmp	r3, #18
 8003968:	d123      	bne.n	80039b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	08da      	lsrs	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3208      	adds	r2, #8
 8003972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	220f      	movs	r2, #15
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	08da      	lsrs	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3208      	adds	r2, #8
 80039ac:	6939      	ldr	r1, [r7, #16]
 80039ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	2203      	movs	r2, #3
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0203 	and.w	r2, r3, #3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80bb 	beq.w	8003b6a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f4:	2300      	movs	r3, #0
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	4b64      	ldr	r3, [pc, #400]	; (8003b8c <HAL_GPIO_Init+0x30c>)
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	4a63      	ldr	r2, [pc, #396]	; (8003b8c <HAL_GPIO_Init+0x30c>)
 80039fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a02:	6453      	str	r3, [r2, #68]	; 0x44
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <HAL_GPIO_Init+0x30c>)
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a10:	4a5f      	ldr	r2, [pc, #380]	; (8003b90 <HAL_GPIO_Init+0x310>)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	089b      	lsrs	r3, r3, #2
 8003a16:	3302      	adds	r3, #2
 8003a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	220f      	movs	r2, #15
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a57      	ldr	r2, [pc, #348]	; (8003b94 <HAL_GPIO_Init+0x314>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d031      	beq.n	8003aa0 <HAL_GPIO_Init+0x220>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a56      	ldr	r2, [pc, #344]	; (8003b98 <HAL_GPIO_Init+0x318>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d02b      	beq.n	8003a9c <HAL_GPIO_Init+0x21c>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a55      	ldr	r2, [pc, #340]	; (8003b9c <HAL_GPIO_Init+0x31c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d025      	beq.n	8003a98 <HAL_GPIO_Init+0x218>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a54      	ldr	r2, [pc, #336]	; (8003ba0 <HAL_GPIO_Init+0x320>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d01f      	beq.n	8003a94 <HAL_GPIO_Init+0x214>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a53      	ldr	r2, [pc, #332]	; (8003ba4 <HAL_GPIO_Init+0x324>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d019      	beq.n	8003a90 <HAL_GPIO_Init+0x210>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_GPIO_Init+0x328>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <HAL_GPIO_Init+0x20c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a51      	ldr	r2, [pc, #324]	; (8003bac <HAL_GPIO_Init+0x32c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00d      	beq.n	8003a88 <HAL_GPIO_Init+0x208>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a50      	ldr	r2, [pc, #320]	; (8003bb0 <HAL_GPIO_Init+0x330>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d007      	beq.n	8003a84 <HAL_GPIO_Init+0x204>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a4f      	ldr	r2, [pc, #316]	; (8003bb4 <HAL_GPIO_Init+0x334>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_GPIO_Init+0x200>
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	e010      	b.n	8003aa2 <HAL_GPIO_Init+0x222>
 8003a80:	2309      	movs	r3, #9
 8003a82:	e00e      	b.n	8003aa2 <HAL_GPIO_Init+0x222>
 8003a84:	2307      	movs	r3, #7
 8003a86:	e00c      	b.n	8003aa2 <HAL_GPIO_Init+0x222>
 8003a88:	2306      	movs	r3, #6
 8003a8a:	e00a      	b.n	8003aa2 <HAL_GPIO_Init+0x222>
 8003a8c:	2305      	movs	r3, #5
 8003a8e:	e008      	b.n	8003aa2 <HAL_GPIO_Init+0x222>
 8003a90:	2304      	movs	r3, #4
 8003a92:	e006      	b.n	8003aa2 <HAL_GPIO_Init+0x222>
 8003a94:	2303      	movs	r3, #3
 8003a96:	e004      	b.n	8003aa2 <HAL_GPIO_Init+0x222>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e002      	b.n	8003aa2 <HAL_GPIO_Init+0x222>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <HAL_GPIO_Init+0x222>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	f002 0203 	and.w	r2, r2, #3
 8003aa8:	0092      	lsls	r2, r2, #2
 8003aaa:	4093      	lsls	r3, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ab4:	4936      	ldr	r1, [pc, #216]	; (8003b90 <HAL_GPIO_Init+0x310>)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	3302      	adds	r3, #2
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ac2:	4b3d      	ldr	r3, [pc, #244]	; (8003bb8 <HAL_GPIO_Init+0x338>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ae6:	4a34      	ldr	r2, [pc, #208]	; (8003bb8 <HAL_GPIO_Init+0x338>)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003aec:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <HAL_GPIO_Init+0x338>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b10:	4a29      	ldr	r2, [pc, #164]	; (8003bb8 <HAL_GPIO_Init+0x338>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b16:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <HAL_GPIO_Init+0x338>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b3a:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <HAL_GPIO_Init+0x338>)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b40:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_GPIO_Init+0x338>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b64:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <HAL_GPIO_Init+0x338>)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f47f ae88 	bne.w	8003890 <HAL_GPIO_Init+0x10>
  }
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40013800 	.word	0x40013800
 8003b94:	40020000 	.word	0x40020000
 8003b98:	40020400 	.word	0x40020400
 8003b9c:	40020800 	.word	0x40020800
 8003ba0:	40020c00 	.word	0x40020c00
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40021400 	.word	0x40021400
 8003bac:	40021800 	.word	0x40021800
 8003bb0:	40021c00 	.word	0x40021c00
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	40013c00 	.word	0x40013c00

08003bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bcc:	787b      	ldrb	r3, [r7, #1]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd2:	887a      	ldrh	r2, [r7, #2]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bd8:	e003      	b.n	8003be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	041a      	lsls	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	619a      	str	r2, [r3, #24]
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bee:	b08f      	sub	sp, #60	; 0x3c
 8003bf0:	af0a      	add	r7, sp, #40	; 0x28
 8003bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e10f      	b.n	8003e1e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fd fae1 	bl	80011e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2203      	movs	r2, #3
 8003c22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 fce4 	bl	800560a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	687e      	ldr	r6, [r7, #4]
 8003c4a:	466d      	mov	r5, sp
 8003c4c:	f106 0410 	add.w	r4, r6, #16
 8003c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c60:	1d33      	adds	r3, r6, #4
 8003c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c64:	6838      	ldr	r0, [r7, #0]
 8003c66:	f001 fc79 	bl	800555c <USB_CoreInit>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0d0      	b.n	8003e1e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 fcd1 	bl	800562a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	e04a      	b.n	8003d24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c8e:	7bfa      	ldrb	r2, [r7, #15]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	333d      	adds	r3, #61	; 0x3d
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	333c      	adds	r3, #60	; 0x3c
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cb6:	7bfa      	ldrb	r2, [r7, #15]
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	b298      	uxth	r0, r3
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3342      	adds	r3, #66	; 0x42
 8003cca:	4602      	mov	r2, r0
 8003ccc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cce:	7bfa      	ldrb	r2, [r7, #15]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	333f      	adds	r3, #63	; 0x3f
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ce2:	7bfa      	ldrb	r2, [r7, #15]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	3344      	adds	r3, #68	; 0x44
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3348      	adds	r3, #72	; 0x48
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	3350      	adds	r3, #80	; 0x50
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	3301      	adds	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
 8003d24:	7bfa      	ldrb	r2, [r7, #15]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d3af      	bcc.n	8003c8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
 8003d32:	e044      	b.n	8003dbe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d4a:	7bfa      	ldrb	r2, [r7, #15]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d76:	7bfa      	ldrb	r2, [r7, #15]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d3b5      	bcc.n	8003d34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	687e      	ldr	r6, [r7, #4]
 8003dd0:	466d      	mov	r5, sp
 8003dd2:	f106 0410 	add.w	r4, r6, #16
 8003dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003de6:	1d33      	adds	r3, r6, #4
 8003de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dea:	6838      	ldr	r0, [r7, #0]
 8003dec:	f001 fc48 	bl	8005680 <USB_DevInit>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00d      	b.n	8003e1e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 fe00 	bl	8005a1c <USB_DevDisconnect>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b090      	sub	sp, #64	; 0x40
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e253      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d050      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e46:	4ba3      	ldr	r3, [pc, #652]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d00c      	beq.n	8003e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e52:	4ba0      	ldr	r3, [pc, #640]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d112      	bne.n	8003e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5e:	4b9d      	ldr	r3, [pc, #628]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6a:	d10b      	bne.n	8003e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	4b99      	ldr	r3, [pc, #612]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d036      	beq.n	8003ee6 <HAL_RCC_OscConfig+0xbe>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d132      	bne.n	8003ee6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e22e      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4b93      	ldr	r3, [pc, #588]	; (80040d8 <HAL_RCC_OscConfig+0x2b0>)
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d013      	beq.n	8003ebe <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fd fb45 	bl	8001524 <HAL_GetTick>
 8003e9a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e9e:	f7fd fb41 	bl	8001524 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b64      	cmp	r3, #100	; 0x64
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e218      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb0:	4b88      	ldr	r3, [pc, #544]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x76>
 8003ebc:	e014      	b.n	8003ee8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebe:	f7fd fb31 	bl	8001524 <HAL_GetTick>
 8003ec2:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fb2d 	bl	8001524 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b64      	cmp	r3, #100	; 0x64
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e204      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed8:	4b7e      	ldr	r3, [pc, #504]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x9e>
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d077      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ef4:	4b77      	ldr	r3, [pc, #476]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f00:	4b74      	ldr	r3, [pc, #464]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d126      	bne.n	8003f5a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0c:	4b71      	ldr	r3, [pc, #452]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d120      	bne.n	8003f5a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f18:	4b6e      	ldr	r3, [pc, #440]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_OscConfig+0x108>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e1d8      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	21f8      	movs	r1, #248	; 0xf8
 8003f3e:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f42:	fa91 f1a1 	rbit	r1, r1
 8003f46:	62f9      	str	r1, [r7, #44]	; 0x2c
  return result;
 8003f48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f4a:	fab1 f181 	clz	r1, r1
 8003f4e:	b2c9      	uxtb	r1, r1
 8003f50:	408b      	lsls	r3, r1
 8003f52:	4960      	ldr	r1, [pc, #384]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f58:	e044      	b.n	8003fe4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02a      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f62:	4b5e      	ldr	r3, [pc, #376]	; (80040dc <HAL_RCC_OscConfig+0x2b4>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fd fadc 	bl	8001524 <HAL_GetTick>
 8003f6c:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fd fad8 	bl	8001524 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e1af      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	4b54      	ldr	r3, [pc, #336]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8e:	4b51      	ldr	r3, [pc, #324]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	21f8      	movs	r1, #248	; 0xf8
 8003f9c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fa0:	fa91 f1a1 	rbit	r1, r1
 8003fa4:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8003fa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fa8:	fab1 f181 	clz	r1, r1
 8003fac:	b2c9      	uxtb	r1, r1
 8003fae:	408b      	lsls	r3, r1
 8003fb0:	4948      	ldr	r1, [pc, #288]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
 8003fb6:	e015      	b.n	8003fe4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb8:	4b48      	ldr	r3, [pc, #288]	; (80040dc <HAL_RCC_OscConfig+0x2b4>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fd fab1 	bl	8001524 <HAL_GetTick>
 8003fc2:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc6:	f7fd faad 	bl	8001524 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e184      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d030      	beq.n	8004052 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d016      	beq.n	8004026 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff8:	4b39      	ldr	r3, [pc, #228]	; (80040e0 <HAL_RCC_OscConfig+0x2b8>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffe:	f7fd fa91 	bl	8001524 <HAL_GetTick>
 8004002:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004006:	f7fd fa8d 	bl	8001524 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e164      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004018:	4b2e      	ldr	r3, [pc, #184]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 800401a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x1de>
 8004024:	e015      	b.n	8004052 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004026:	4b2e      	ldr	r3, [pc, #184]	; (80040e0 <HAL_RCC_OscConfig+0x2b8>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402c:	f7fd fa7a 	bl	8001524 <HAL_GetTick>
 8004030:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004034:	f7fd fa76 	bl	8001524 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e14d      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8088 	beq.w	8004170 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004060:	2300      	movs	r3, #0
 8004062:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d110      	bne.n	8004094 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	4a16      	ldr	r2, [pc, #88]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004080:	6413      	str	r3, [r2, #64]	; 0x40
 8004082:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004094:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <HAL_RCC_OscConfig+0x2bc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <HAL_RCC_OscConfig+0x2bc>)
 800409a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a0:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <HAL_RCC_OscConfig+0x2bc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d123      	bne.n	80040f4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_RCC_OscConfig+0x2bc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <HAL_RCC_OscConfig+0x2bc>)
 80040b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b8:	f7fd fa34 	bl	8001524 <HAL_GetTick>
 80040bc:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040be:	e013      	b.n	80040e8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c0:	f7fd fa30 	bl	8001524 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d90c      	bls.n	80040e8 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e107      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40023802 	.word	0x40023802
 80040dc:	42470000 	.word	0x42470000
 80040e0:	42470e80 	.word	0x42470e80
 80040e4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e8:	4b80      	ldr	r3, [pc, #512]	; (80042ec <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0e5      	beq.n	80040c0 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	4b7d      	ldr	r3, [pc, #500]	; (80042f0 <HAL_RCC_OscConfig+0x4c8>)
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d015      	beq.n	8004132 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fd fa0d 	bl	8001524 <HAL_GetTick>
 800410a:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fd fa09 	bl	8001524 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0de      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004124:	4b73      	ldr	r3, [pc, #460]	; (80042f4 <HAL_RCC_OscConfig+0x4cc>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ee      	beq.n	800410e <HAL_RCC_OscConfig+0x2e6>
 8004130:	e014      	b.n	800415c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fd f9f7 	bl	8001524 <HAL_GetTick>
 8004136:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fd f9f3 	bl	8001524 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0c8      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004150:	4b68      	ldr	r3, [pc, #416]	; (80042f4 <HAL_RCC_OscConfig+0x4cc>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ee      	bne.n	800413a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800415c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004164:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_RCC_OscConfig+0x4cc>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	4a62      	ldr	r2, [pc, #392]	; (80042f4 <HAL_RCC_OscConfig+0x4cc>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80b3 	beq.w	80042e0 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800417a:	4b5e      	ldr	r3, [pc, #376]	; (80042f4 <HAL_RCC_OscConfig+0x4cc>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b08      	cmp	r3, #8
 8004184:	d07d      	beq.n	8004282 <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d162      	bne.n	8004254 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418e:	4b5a      	ldr	r3, [pc, #360]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fd f9c6 	bl	8001524 <HAL_GetTick>
 8004198:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419c:	f7fd f9c2 	bl	8001524 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e099      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b51      	ldr	r3, [pc, #324]	; (80042f4 <HAL_RCC_OscConfig+0x4cc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80041cc:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	6939      	ldr	r1, [r7, #16]
 80041d0:	fa91 f1a1 	rbit	r1, r1
 80041d4:	60f9      	str	r1, [r7, #12]
  return result;
 80041d6:	68f9      	ldr	r1, [r7, #12]
 80041d8:	fab1 f181 	clz	r1, r1
 80041dc:	b2c9      	uxtb	r1, r1
 80041de:	408b      	lsls	r3, r1
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	3b01      	subs	r3, #1
 80041ea:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80041ee:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	69b9      	ldr	r1, [r7, #24]
 80041f2:	fa91 f1a1 	rbit	r1, r1
 80041f6:	6179      	str	r1, [r7, #20]
  return result;
 80041f8:	6979      	ldr	r1, [r7, #20]
 80041fa:	fab1 f181 	clz	r1, r1
 80041fe:	b2c9      	uxtb	r1, r1
 8004200:	408b      	lsls	r3, r1
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800420c:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6a39      	ldr	r1, [r7, #32]
 8004210:	fa91 f1a1 	rbit	r1, r1
 8004214:	61f9      	str	r1, [r7, #28]
  return result;
 8004216:	69f9      	ldr	r1, [r7, #28]
 8004218:	fab1 f181 	clz	r1, r1
 800421c:	b2c9      	uxtb	r1, r1
 800421e:	408b      	lsls	r3, r1
 8004220:	4934      	ldr	r1, [pc, #208]	; (80042f4 <HAL_RCC_OscConfig+0x4cc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004226:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fd f97a 	bl	8001524 <HAL_GetTick>
 8004230:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004234:	f7fd f976 	bl	8001524 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e04d      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004246:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <HAL_RCC_OscConfig+0x4cc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x40c>
 8004252:	e045      	b.n	80042e0 <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004254:	4b28      	ldr	r3, [pc, #160]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fd f963 	bl	8001524 <HAL_GetTick>
 800425e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004262:	f7fd f95f 	bl	8001524 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b64      	cmp	r3, #100	; 0x64
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e036      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004274:	4b1f      	ldr	r3, [pc, #124]	; (80042f4 <HAL_RCC_OscConfig+0x4cc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <HAL_RCC_OscConfig+0x43a>
 8004280:	e02e      	b.n	80042e0 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e029      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800428e:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <HAL_RCC_OscConfig+0x4cc>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004296:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d11c      	bne.n	80042dc <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d115      	bne.n	80042dc <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	099b      	lsrs	r3, r3, #6
 80042b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d10d      	bne.n	80042dc <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d106      	bne.n	80042dc <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80042ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3740      	adds	r7, #64	; 0x40
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40007000 	.word	0x40007000
 80042f0:	40023870 	.word	0x40023870
 80042f4:	40023800 	.word	0x40023800
 80042f8:	42470060 	.word	0x42470060

080042fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0d2      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b6b      	ldr	r3, [pc, #428]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d90c      	bls.n	8004338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b68      	ldr	r3, [pc, #416]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b66      	ldr	r3, [pc, #408]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0be      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004350:	4b5c      	ldr	r3, [pc, #368]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800435a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8004368:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a55      	ldr	r2, [pc, #340]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 800436e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004372:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4950      	ldr	r1, [pc, #320]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d040      	beq.n	8004414 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b4a      	ldr	r3, [pc, #296]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d115      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e085      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b44      	ldr	r3, [pc, #272]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e079      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	4b40      	ldr	r3, [pc, #256]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e071      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d2:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4939      	ldr	r1, [pc, #228]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e4:	f7fd f89e 	bl	8001524 <HAL_GetTick>
 80043e8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ec:	f7fd f89a 	bl	8001524 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e059      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 020c 	and.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	429a      	cmp	r2, r3
 8004412:	d1eb      	bne.n	80043ec <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004414:	4b2a      	ldr	r3, [pc, #168]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d20c      	bcs.n	800443c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b25      	ldr	r3, [pc, #148]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e03c      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004448:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	491b      	ldr	r1, [pc, #108]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004466:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4913      	ldr	r1, [pc, #76]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800447a:	f000 f82b 	bl	80044d4 <HAL_RCC_GetSysClockFreq>
 800447e:	4601      	mov	r1, r0
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004488:	22f0      	movs	r2, #240	; 0xf0
 800448a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	fa92 f2a2 	rbit	r2, r2
 8004492:	60fa      	str	r2, [r7, #12]
  return result;
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	fab2 f282 	clz	r2, r2
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	40d3      	lsrs	r3, r2
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <HAL_RCC_ClockConfig+0x1cc>)
 80044a0:	5cd3      	ldrb	r3, [r2, r3]
 80044a2:	fa21 f303 	lsr.w	r3, r1, r3
 80044a6:	4a09      	ldr	r2, [pc, #36]	; (80044cc <HAL_RCC_ClockConfig+0x1d0>)
 80044a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044aa:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RCC_ClockConfig+0x1d4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fc fff6 	bl	80014a0 <HAL_InitTick>

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40023c00 	.word	0x40023c00
 80044c4:	40023800 	.word	0x40023800
 80044c8:	08006390 	.word	0x08006390
 80044cc:	20000000 	.word	0x20000000
 80044d0:	20000004 	.word	0x20000004

080044d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	2300      	movs	r3, #0
 80044e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ea:	4b63      	ldr	r3, [pc, #396]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d007      	beq.n	8004506 <HAL_RCC_GetSysClockFreq+0x32>
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d008      	beq.n	800450c <HAL_RCC_GetSysClockFreq+0x38>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 80b4 	bne.w	8004668 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004500:	4b5e      	ldr	r3, [pc, #376]	; (800467c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004502:	60bb      	str	r3, [r7, #8]
       break;
 8004504:	e0b3      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004506:	4b5e      	ldr	r3, [pc, #376]	; (8004680 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004508:	60bb      	str	r3, [r7, #8]
      break;
 800450a:	e0b0      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800450c:	4b5a      	ldr	r3, [pc, #360]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004514:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004516:	4b58      	ldr	r3, [pc, #352]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04a      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004522:	4b55      	ldr	r3, [pc, #340]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	099b      	lsrs	r3, r3, #6
 8004528:	f04f 0400 	mov.w	r4, #0
 800452c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	ea03 0501 	and.w	r5, r3, r1
 8004538:	ea04 0602 	and.w	r6, r4, r2
 800453c:	4629      	mov	r1, r5
 800453e:	4632      	mov	r2, r6
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	f04f 0400 	mov.w	r4, #0
 8004548:	0154      	lsls	r4, r2, #5
 800454a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800454e:	014b      	lsls	r3, r1, #5
 8004550:	4619      	mov	r1, r3
 8004552:	4622      	mov	r2, r4
 8004554:	1b49      	subs	r1, r1, r5
 8004556:	eb62 0206 	sbc.w	r2, r2, r6
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	f04f 0400 	mov.w	r4, #0
 8004562:	0194      	lsls	r4, r2, #6
 8004564:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004568:	018b      	lsls	r3, r1, #6
 800456a:	1a5b      	subs	r3, r3, r1
 800456c:	eb64 0402 	sbc.w	r4, r4, r2
 8004570:	f04f 0100 	mov.w	r1, #0
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	00e2      	lsls	r2, r4, #3
 800457a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800457e:	00d9      	lsls	r1, r3, #3
 8004580:	460b      	mov	r3, r1
 8004582:	4614      	mov	r4, r2
 8004584:	195b      	adds	r3, r3, r5
 8004586:	eb44 0406 	adc.w	r4, r4, r6
 800458a:	f04f 0100 	mov.w	r1, #0
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	0262      	lsls	r2, r4, #9
 8004594:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004598:	0259      	lsls	r1, r3, #9
 800459a:	460b      	mov	r3, r1
 800459c:	4614      	mov	r4, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	4621      	mov	r1, r4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f04f 0400 	mov.w	r4, #0
 80045a8:	461a      	mov	r2, r3
 80045aa:	4623      	mov	r3, r4
 80045ac:	f7fb fe12 	bl	80001d4 <__aeabi_uldivmod>
 80045b0:	4603      	mov	r3, r0
 80045b2:	460c      	mov	r4, r1
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e049      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b8:	4b2f      	ldr	r3, [pc, #188]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	f04f 0400 	mov.w	r4, #0
 80045c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	ea03 0501 	and.w	r5, r3, r1
 80045ce:	ea04 0602 	and.w	r6, r4, r2
 80045d2:	4629      	mov	r1, r5
 80045d4:	4632      	mov	r2, r6
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	f04f 0400 	mov.w	r4, #0
 80045de:	0154      	lsls	r4, r2, #5
 80045e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045e4:	014b      	lsls	r3, r1, #5
 80045e6:	4619      	mov	r1, r3
 80045e8:	4622      	mov	r2, r4
 80045ea:	1b49      	subs	r1, r1, r5
 80045ec:	eb62 0206 	sbc.w	r2, r2, r6
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	f04f 0400 	mov.w	r4, #0
 80045f8:	0194      	lsls	r4, r2, #6
 80045fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045fe:	018b      	lsls	r3, r1, #6
 8004600:	1a5b      	subs	r3, r3, r1
 8004602:	eb64 0402 	sbc.w	r4, r4, r2
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	00e2      	lsls	r2, r4, #3
 8004610:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004614:	00d9      	lsls	r1, r3, #3
 8004616:	460b      	mov	r3, r1
 8004618:	4614      	mov	r4, r2
 800461a:	195b      	adds	r3, r3, r5
 800461c:	eb44 0406 	adc.w	r4, r4, r6
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	02a2      	lsls	r2, r4, #10
 800462a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800462e:	0299      	lsls	r1, r3, #10
 8004630:	460b      	mov	r3, r1
 8004632:	4614      	mov	r4, r2
 8004634:	4618      	mov	r0, r3
 8004636:	4621      	mov	r1, r4
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f04f 0400 	mov.w	r4, #0
 800463e:	461a      	mov	r2, r3
 8004640:	4623      	mov	r3, r4
 8004642:	f7fb fdc7 	bl	80001d4 <__aeabi_uldivmod>
 8004646:	4603      	mov	r3, r0
 8004648:	460c      	mov	r4, r1
 800464a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	60bb      	str	r3, [r7, #8]
      break;
 8004666:	e002      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800466a:	60bb      	str	r3, [r7, #8]
      break;
 800466c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800466e:	68bb      	ldr	r3, [r7, #8]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004678:	40023800 	.word	0x40023800
 800467c:	00f42400 	.word	0x00f42400
 8004680:	007a1200 	.word	0x007a1200

08004684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004688:	4b02      	ldr	r3, [pc, #8]	; (8004694 <HAL_RCC_GetHCLKFreq+0x10>)
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr
 8004694:	20000000 	.word	0x20000000

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800469e:	f7ff fff1 	bl	8004684 <HAL_RCC_GetHCLKFreq>
 80046a2:	4601      	mov	r1, r0
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80046ac:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80046b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	fa92 f2a2 	rbit	r2, r2
 80046b8:	603a      	str	r2, [r7, #0]
  return result;
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	fab2 f282 	clz	r2, r2
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	40d3      	lsrs	r3, r2
 80046c4:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80046c6:	5cd3      	ldrb	r3, [r2, r3]
 80046c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40023800 	.word	0x40023800
 80046d8:	080063a0 	.word	0x080063a0

080046dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80046e2:	f7ff ffcf 	bl	8004684 <HAL_RCC_GetHCLKFreq>
 80046e6:	4601      	mov	r1, r0
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80046f0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80046f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	fa92 f2a2 	rbit	r2, r2
 80046fc:	603a      	str	r2, [r7, #0]
  return result;
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	fab2 f282 	clz	r2, r2
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	40d3      	lsrs	r3, r2
 8004708:	4a04      	ldr	r2, [pc, #16]	; (800471c <HAL_RCC_GetPCLK2Freq+0x40>)
 800470a:	5cd3      	ldrb	r3, [r2, r3]
 800470c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40023800 	.word	0x40023800
 800471c:	080063a0 	.word	0x080063a0

08004720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e056      	b.n	80047e0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d106      	bne.n	8004752 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7fc fcaf 	bl	80010b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2202      	movs	r2, #2
 8004756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004768:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	ea42 0103 	orr.w	r1, r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	0c1b      	lsrs	r3, r3, #16
 80047b0:	f003 0104 	and.w	r1, r3, #4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_SPI_Transmit+0x22>
 8004806:	2302      	movs	r3, #2
 8004808:	e11e      	b.n	8004a48 <HAL_SPI_Transmit+0x260>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004812:	f7fc fe87 	bl	8001524 <HAL_GetTick>
 8004816:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d002      	beq.n	800482e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004828:	2302      	movs	r3, #2
 800482a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800482c:	e103      	b.n	8004a36 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_SPI_Transmit+0x52>
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800483e:	e0fa      	b.n	8004a36 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2203      	movs	r2, #3
 8004844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	88fa      	ldrh	r2, [r7, #6]
 800485e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004886:	d107      	bne.n	8004898 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004896:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d007      	beq.n	80048b6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048be:	d14b      	bne.n	8004958 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_SPI_Transmit+0xe6>
 80048c8:	8afb      	ldrh	r3, [r7, #22]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d13e      	bne.n	800494c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	881a      	ldrh	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	1c9a      	adds	r2, r3, #2
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048f2:	e02b      	b.n	800494c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d112      	bne.n	8004928 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	881a      	ldrh	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	1c9a      	adds	r2, r3, #2
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	86da      	strh	r2, [r3, #54]	; 0x36
 8004926:	e011      	b.n	800494c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004928:	f7fc fdfc 	bl	8001524 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d803      	bhi.n	8004940 <HAL_SPI_Transmit+0x158>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d102      	bne.n	8004946 <HAL_SPI_Transmit+0x15e>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	77fb      	strb	r3, [r7, #31]
          goto error;
 800494a:	e074      	b.n	8004a36 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ce      	bne.n	80048f4 <HAL_SPI_Transmit+0x10c>
 8004956:	e04c      	b.n	80049f2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_SPI_Transmit+0x17e>
 8004960:	8afb      	ldrh	r3, [r7, #22]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d140      	bne.n	80049e8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	7812      	ldrb	r2, [r2, #0]
 8004972:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800498c:	e02c      	b.n	80049e8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d113      	bne.n	80049c4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	7812      	ldrb	r2, [r2, #0]
 80049a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80049c2:	e011      	b.n	80049e8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c4:	f7fc fdae 	bl	8001524 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d803      	bhi.n	80049dc <HAL_SPI_Transmit+0x1f4>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d102      	bne.n	80049e2 <HAL_SPI_Transmit+0x1fa>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049e6:	e026      	b.n	8004a36 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1cd      	bne.n	800498e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f894 	bl	8004b24 <SPI_EndRxTxTransaction>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e000      	b.n	8004a36 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004a34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a46:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a60:	e04c      	b.n	8004afc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d048      	beq.n	8004afc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a6a:	f7fc fd5b 	bl	8001524 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d902      	bls.n	8004a80 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d13d      	bne.n	8004afc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a98:	d111      	bne.n	8004abe <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa2:	d004      	beq.n	8004aae <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aac:	d107      	bne.n	8004abe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac6:	d10f      	bne.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ae6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e00f      	b.n	8004b1c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d1a3      	bne.n	8004a62 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2200      	movs	r2, #0
 8004b38:	2180      	movs	r1, #128	; 0x80
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f7ff ff88 	bl	8004a50 <SPI_WaitFlagStateUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e000      	b.n	8004b58 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e03f      	b.n	8004bf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fc fada 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2224      	movs	r2, #36	; 0x24
 8004b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fb45 	bl	8005234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b088      	sub	sp, #32
 8004bfe:	af02      	add	r7, sp, #8
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	4613      	mov	r3, r2
 8004c08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	f040 8083 	bne.w	8004d22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_UART_Transmit+0x2e>
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e07b      	b.n	8004d24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_UART_Transmit+0x40>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e074      	b.n	8004d24 <HAL_UART_Transmit+0x12a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2221      	movs	r2, #33	; 0x21
 8004c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004c50:	f7fc fc68 	bl	8001524 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004c6a:	e042      	b.n	8004cf2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c82:	d122      	bne.n	8004cca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2180      	movs	r1, #128	; 0x80
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f967 	bl	8004f62 <UART_WaitOnFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e042      	b.n	8004d24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	e017      	b.n	8004cf2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	e013      	b.n	8004cf2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2180      	movs	r1, #128	; 0x80
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f944 	bl	8004f62 <UART_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e01f      	b.n	8004d24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	60ba      	str	r2, [r7, #8]
 8004cea:	781a      	ldrb	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1b7      	bne.n	8004c6c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2200      	movs	r2, #0
 8004d04:	2140      	movs	r1, #64	; 0x40
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f92b 	bl	8004f62 <UART_WaitOnFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e006      	b.n	8004d24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e000      	b.n	8004d24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10d      	bne.n	8004d7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_UART_IRQHandler+0x52>
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9db 	bl	8005132 <UART_Receive_IT>
      return;
 8004d7c:	e0d1      	b.n	8004f22 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80b0 	beq.w	8004ee6 <HAL_UART_IRQHandler+0x1ba>
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <HAL_UART_IRQHandler+0x70>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80a5 	beq.w	8004ee6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_UART_IRQHandler+0x90>
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	f043 0201 	orr.w	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_UART_IRQHandler+0xb0>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	f043 0202 	orr.w	r2, r3, #2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_UART_IRQHandler+0xd0>
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df4:	f043 0204 	orr.w	r2, r3, #4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00f      	beq.n	8004e26 <HAL_UART_IRQHandler+0xfa>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d104      	bne.n	8004e1a <HAL_UART_IRQHandler+0xee>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	f043 0208 	orr.w	r2, r3, #8
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d078      	beq.n	8004f20 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <HAL_UART_IRQHandler+0x11c>
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f975 	bl	8005132 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <HAL_UART_IRQHandler+0x144>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d031      	beq.n	8004ed4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f8c0 	bl	8004ff6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d123      	bne.n	8004ecc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e92:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d013      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	4a21      	ldr	r2, [pc, #132]	; (8004f28 <HAL_UART_IRQHandler+0x1fc>)
 8004ea2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fd fd27 	bl	80028fc <HAL_DMA_Abort_IT>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d016      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec2:	e00e      	b.n	8004ee2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f843 	bl	8004f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eca:	e00a      	b.n	8004ee2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f83f 	bl	8004f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed2:	e006      	b.n	8004ee2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f83b 	bl	8004f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004ee0:	e01e      	b.n	8004f20 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee2:	bf00      	nop
    return;
 8004ee4:	e01c      	b.n	8004f20 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_UART_IRQHandler+0x1d6>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f8ac 	bl	8005058 <UART_Transmit_IT>
    return;
 8004f00:	e00f      	b.n	8004f22 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <HAL_UART_IRQHandler+0x1f6>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8f3 	bl	8005102 <UART_EndTransmit_IT>
    return;
 8004f1c:	bf00      	nop
 8004f1e:	e000      	b.n	8004f22 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004f20:	bf00      	nop
  }
}
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	08005031 	.word	0x08005031

08004f2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr

08004f3e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f72:	e02c      	b.n	8004fce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d028      	beq.n	8004fce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f82:	f7fc facf 	bl	8001524 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d21d      	bcs.n	8004fce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fa0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e00f      	b.n	8004fee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	bf0c      	ite	eq
 8004fde:	2301      	moveq	r3, #1
 8004fe0:	2300      	movne	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d0c3      	beq.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800500c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7ff ff80 	bl	8004f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b21      	cmp	r3, #33	; 0x21
 800506a:	d144      	bne.n	80050f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005074:	d11a      	bne.n	80050ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800508a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	1c9a      	adds	r2, r3, #2
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	621a      	str	r2, [r3, #32]
 800509e:	e00e      	b.n	80050be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	621a      	str	r2, [r3, #32]
 80050aa:	e008      	b.n	80050be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	1c59      	adds	r1, r3, #1
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6211      	str	r1, [r2, #32]
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	4619      	mov	r1, r3
 80050cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e000      	b.n	80050f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
  }
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005118:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff ff02 	bl	8004f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b22      	cmp	r3, #34	; 0x22
 8005144:	d171      	bne.n	800522a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514e:	d123      	bne.n	8005198 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10e      	bne.n	800517c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	1c9a      	adds	r2, r3, #2
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	629a      	str	r2, [r3, #40]	; 0x28
 800517a:	e029      	b.n	80051d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	b29b      	uxth	r3, r3
 8005184:	b2db      	uxtb	r3, r3
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
 8005196:	e01b      	b.n	80051d0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6858      	ldr	r0, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	1c59      	adds	r1, r3, #1
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6291      	str	r1, [r2, #40]	; 0x28
 80051b0:	b2c2      	uxtb	r2, r0
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	e00c      	b.n	80051d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	1c58      	adds	r0, r3, #1
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	6288      	str	r0, [r1, #40]	; 0x28
 80051c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29b      	uxth	r3, r3
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	4619      	mov	r1, r3
 80051de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d120      	bne.n	8005226 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0220 	bic.w	r2, r2, #32
 80051f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695a      	ldr	r2, [r3, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fe8e 	bl	8004f3e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	e002      	b.n	800522c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e000      	b.n	800522c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800522a:	2302      	movs	r3, #2
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005274:	f023 030c 	bic.w	r3, r3, #12
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	68f9      	ldr	r1, [r7, #12]
 800527e:	430b      	orrs	r3, r1
 8005280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a0:	f040 80aa 	bne.w	80053f8 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4aa9      	ldr	r2, [pc, #676]	; (8005550 <UART_SetConfig+0x31c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d004      	beq.n	80052b8 <UART_SetConfig+0x84>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4aa8      	ldr	r2, [pc, #672]	; (8005554 <UART_SetConfig+0x320>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d14f      	bne.n	8005358 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052b8:	f7ff fa10 	bl	80046dc <HAL_RCC_GetPCLK2Freq>
 80052bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	009a      	lsls	r2, r3, #2
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	4aa0      	ldr	r2, [pc, #640]	; (8005558 <UART_SetConfig+0x324>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	0119      	lsls	r1, r3, #4
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009a      	lsls	r2, r3, #2
 80052e8:	441a      	add	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052f4:	4b98      	ldr	r3, [pc, #608]	; (8005558 <UART_SetConfig+0x324>)
 80052f6:	fba3 0302 	umull	r0, r3, r3, r2
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	2064      	movs	r0, #100	; 0x64
 80052fe:	fb00 f303 	mul.w	r3, r0, r3
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	3332      	adds	r3, #50	; 0x32
 8005308:	4a93      	ldr	r2, [pc, #588]	; (8005558 <UART_SetConfig+0x324>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005316:	4419      	add	r1, r3
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009a      	lsls	r2, r3, #2
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	fbb2 f2f3 	udiv	r2, r2, r3
 800532e:	4b8a      	ldr	r3, [pc, #552]	; (8005558 <UART_SetConfig+0x324>)
 8005330:	fba3 0302 	umull	r0, r3, r3, r2
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	2064      	movs	r0, #100	; 0x64
 8005338:	fb00 f303 	mul.w	r3, r0, r3
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	3332      	adds	r3, #50	; 0x32
 8005342:	4a85      	ldr	r2, [pc, #532]	; (8005558 <UART_SetConfig+0x324>)
 8005344:	fba2 2303 	umull	r2, r3, r2, r3
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	f003 0207 	and.w	r2, r3, #7
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	440a      	add	r2, r1
 8005354:	609a      	str	r2, [r3, #8]
 8005356:	e0f7      	b.n	8005548 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005358:	f7ff f99e 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 800535c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	009a      	lsls	r2, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	4a78      	ldr	r2, [pc, #480]	; (8005558 <UART_SetConfig+0x324>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	0119      	lsls	r1, r3, #4
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009a      	lsls	r2, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	fbb2 f2f3 	udiv	r2, r2, r3
 8005394:	4b70      	ldr	r3, [pc, #448]	; (8005558 <UART_SetConfig+0x324>)
 8005396:	fba3 0302 	umull	r0, r3, r3, r2
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	2064      	movs	r0, #100	; 0x64
 800539e:	fb00 f303 	mul.w	r3, r0, r3
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	3332      	adds	r3, #50	; 0x32
 80053a8:	4a6b      	ldr	r2, [pc, #428]	; (8005558 <UART_SetConfig+0x324>)
 80053aa:	fba2 2303 	umull	r2, r3, r2, r3
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053b6:	4419      	add	r1, r3
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009a      	lsls	r2, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80053ce:	4b62      	ldr	r3, [pc, #392]	; (8005558 <UART_SetConfig+0x324>)
 80053d0:	fba3 0302 	umull	r0, r3, r3, r2
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	2064      	movs	r0, #100	; 0x64
 80053d8:	fb00 f303 	mul.w	r3, r0, r3
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	3332      	adds	r3, #50	; 0x32
 80053e2:	4a5d      	ldr	r2, [pc, #372]	; (8005558 <UART_SetConfig+0x324>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	f003 0207 	and.w	r2, r3, #7
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	440a      	add	r2, r1
 80053f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80053f6:	e0a7      	b.n	8005548 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a54      	ldr	r2, [pc, #336]	; (8005550 <UART_SetConfig+0x31c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <UART_SetConfig+0x1d8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a53      	ldr	r2, [pc, #332]	; (8005554 <UART_SetConfig+0x320>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d14e      	bne.n	80054aa <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 800540c:	f7ff f966 	bl	80046dc <HAL_RCC_GetPCLK2Freq>
 8005410:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009a      	lsls	r2, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	4a4b      	ldr	r2, [pc, #300]	; (8005558 <UART_SetConfig+0x324>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	0119      	lsls	r1, r3, #4
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	009a      	lsls	r2, r3, #2
 800543c:	441a      	add	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	fbb2 f2f3 	udiv	r2, r2, r3
 8005448:	4b43      	ldr	r3, [pc, #268]	; (8005558 <UART_SetConfig+0x324>)
 800544a:	fba3 0302 	umull	r0, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	2064      	movs	r0, #100	; 0x64
 8005452:	fb00 f303 	mul.w	r3, r0, r3
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	3332      	adds	r3, #50	; 0x32
 800545c:	4a3e      	ldr	r2, [pc, #248]	; (8005558 <UART_SetConfig+0x324>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005468:	4419      	add	r1, r3
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009a      	lsls	r2, r3, #2
 8005474:	441a      	add	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005480:	4b35      	ldr	r3, [pc, #212]	; (8005558 <UART_SetConfig+0x324>)
 8005482:	fba3 0302 	umull	r0, r3, r3, r2
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	2064      	movs	r0, #100	; 0x64
 800548a:	fb00 f303 	mul.w	r3, r0, r3
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	3332      	adds	r3, #50	; 0x32
 8005494:	4a30      	ldr	r2, [pc, #192]	; (8005558 <UART_SetConfig+0x324>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	f003 020f 	and.w	r2, r3, #15
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	440a      	add	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	e04e      	b.n	8005548 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 80054aa:	f7ff f8f5 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 80054ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009a      	lsls	r2, r3, #2
 80054ba:	441a      	add	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	4a24      	ldr	r2, [pc, #144]	; (8005558 <UART_SetConfig+0x324>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	0119      	lsls	r1, r3, #4
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009a      	lsls	r2, r3, #2
 80054da:	441a      	add	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80054e6:	4b1c      	ldr	r3, [pc, #112]	; (8005558 <UART_SetConfig+0x324>)
 80054e8:	fba3 0302 	umull	r0, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	2064      	movs	r0, #100	; 0x64
 80054f0:	fb00 f303 	mul.w	r3, r0, r3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	3332      	adds	r3, #50	; 0x32
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <UART_SetConfig+0x324>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005506:	4419      	add	r1, r3
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009a      	lsls	r2, r3, #2
 8005512:	441a      	add	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	fbb2 f2f3 	udiv	r2, r2, r3
 800551e:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <UART_SetConfig+0x324>)
 8005520:	fba3 0302 	umull	r0, r3, r3, r2
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	2064      	movs	r0, #100	; 0x64
 8005528:	fb00 f303 	mul.w	r3, r0, r3
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	3332      	adds	r3, #50	; 0x32
 8005532:	4a09      	ldr	r2, [pc, #36]	; (8005558 <UART_SetConfig+0x324>)
 8005534:	fba2 2303 	umull	r2, r3, r2, r3
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	440a      	add	r2, r1
 8005544:	609a      	str	r2, [r3, #8]
}
 8005546:	e7ff      	b.n	8005548 <UART_SetConfig+0x314>
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40011000 	.word	0x40011000
 8005554:	40011400 	.word	0x40011400
 8005558:	51eb851f 	.word	0x51eb851f

0800555c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800555c:	b084      	sub	sp, #16
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	f107 001c 	add.w	r0, r7, #28
 800556a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	2b01      	cmp	r3, #1
 8005572:	d122      	bne.n	80055ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800559c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d105      	bne.n	80055ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa4c 	bl	8005a4c <USB_CoreReset>
 80055b4:	4603      	mov	r3, r0
 80055b6:	73fb      	strb	r3, [r7, #15]
 80055b8:	e010      	b.n	80055dc <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fa40 	bl	8005a4c <USB_CoreReset>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d10b      	bne.n	80055fa <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f043 0206 	orr.w	r2, r3, #6
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f043 0220 	orr.w	r2, r3, #32
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005606:	b004      	add	sp, #16
 8005608:	4770      	bx	lr

0800560a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d106      	bne.n	8005656 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60da      	str	r2, [r3, #12]
 8005654:	e00b      	b.n	800566e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	e001      	b.n	800566e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e003      	b.n	8005676 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800566e:	2032      	movs	r0, #50	; 0x32
 8005670:	f7fb ff62 	bl	8001538 <HAL_Delay>

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005680:	b084      	sub	sp, #16
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800568e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e009      	b.n	80056b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	3340      	adds	r3, #64	; 0x40
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3301      	adds	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b0e      	cmp	r3, #14
 80056b8:	d9f2      	bls.n	80056a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d112      	bne.n	80056e6 <USB_DevInit+0x66>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38
 80056e4:	e00b      	b.n	80056fe <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005704:	461a      	mov	r2, r3
 8005706:	2300      	movs	r3, #0
 8005708:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005710:	4619      	mov	r1, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005718:	461a      	mov	r2, r3
 800571a:	680b      	ldr	r3, [r1, #0]
 800571c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10c      	bne.n	800573e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d104      	bne.n	8005734 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800572a:	2100      	movs	r1, #0
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f95d 	bl	80059ec <USB_SetDevSpeed>
 8005732:	e008      	b.n	8005746 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005734:	2101      	movs	r1, #1
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f958 	bl	80059ec <USB_SetDevSpeed>
 800573c:	e003      	b.n	8005746 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800573e:	2103      	movs	r1, #3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f953 	bl	80059ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005746:	2110      	movs	r1, #16
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f90b 	bl	8005964 <USB_FlushTxFifo>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f927 	bl	80059ac <USB_FlushRxFifo>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	461a      	mov	r2, r3
 8005770:	2300      	movs	r3, #0
 8005772:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577a:	461a      	mov	r2, r3
 800577c:	2300      	movs	r3, #0
 800577e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	461a      	mov	r2, r3
 8005788:	2300      	movs	r3, #0
 800578a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	e043      	b.n	800581a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057a8:	d118      	bne.n	80057dc <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	461a      	mov	r2, r3
 80057be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	e013      	b.n	80057ee <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	461a      	mov	r2, r3
 80057d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e008      	b.n	80057ee <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e8:	461a      	mov	r2, r3
 80057ea:	2300      	movs	r3, #0
 80057ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	461a      	mov	r2, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	461a      	mov	r2, r3
 800580e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005812:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3301      	adds	r3, #1
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	429a      	cmp	r2, r3
 8005820:	d3b7      	bcc.n	8005792 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	e043      	b.n	80058b0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800583e:	d118      	bne.n	8005872 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	461a      	mov	r2, r3
 8005854:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e013      	b.n	8005884 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	461a      	mov	r2, r3
 800586a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	e008      	b.n	8005884 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587e:	461a      	mov	r2, r3
 8005880:	2300      	movs	r3, #0
 8005882:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	2300      	movs	r3, #0
 8005894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	461a      	mov	r2, r3
 80058a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	3301      	adds	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d3b7      	bcc.n	8005828 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ca:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d111      	bne.n	80058f6 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d8:	461a      	mov	r2, r3
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <USB_DevInit+0x2dc>)
 80058dc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f0:	f043 0303 	orr.w	r3, r3, #3
 80058f4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005902:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	2b00      	cmp	r3, #0
 8005908:	d105      	bne.n	8005916 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	f043 0210 	orr.w	r2, r3, #16
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	4b11      	ldr	r3, [pc, #68]	; (8005960 <USB_DevInit+0x2e0>)
 800591c:	4313      	orrs	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f043 0208 	orr.w	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005936:	2b01      	cmp	r3, #1
 8005938:	d107      	bne.n	800594a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005942:	f043 0304 	orr.w	r3, r3, #4
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005956:	b004      	add	sp, #16
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	00800100 	.word	0x00800100
 8005960:	803c3800 	.word	0x803c3800

08005964 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	019b      	lsls	r3, r3, #6
 8005976:	f043 0220 	orr.w	r2, r3, #32
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3301      	adds	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <USB_FlushTxFifo+0x44>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d901      	bls.n	8005990 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e006      	b.n	800599e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b20      	cmp	r3, #32
 800599a:	d0f0      	beq.n	800597e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr
 80059a8:	00030d40 	.word	0x00030d40

080059ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2210      	movs	r2, #16
 80059bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3301      	adds	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a08      	ldr	r2, [pc, #32]	; (80059e8 <USB_FlushRxFifo+0x3c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d901      	bls.n	80059d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e006      	b.n	80059de <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d0f0      	beq.n	80059be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr
 80059e8:	00030d40 	.word	0x00030d40

080059ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	68f9      	ldr	r1, [r7, #12]
 8005a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a36:	f043 0302 	orr.w	r3, r3, #2
 8005a3a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005a3c:	2003      	movs	r0, #3
 8005a3e:	f7fb fd7b 	bl	8001538 <HAL_Delay>

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4a12      	ldr	r2, [pc, #72]	; (8005aac <USB_CoreReset+0x60>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e01b      	b.n	8005aa2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	daf2      	bge.n	8005a58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f043 0201 	orr.w	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4a08      	ldr	r2, [pc, #32]	; (8005aac <USB_CoreReset+0x60>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d901      	bls.n	8005a94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e006      	b.n	8005aa2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d0f0      	beq.n	8005a82 <USB_CoreReset+0x36>

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	00030d40 	.word	0x00030d40

08005ab0 <__errno>:
 8005ab0:	4b01      	ldr	r3, [pc, #4]	; (8005ab8 <__errno+0x8>)
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	2000000c 	.word	0x2000000c

08005abc <__libc_init_array>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	2500      	movs	r5, #0
 8005ac0:	4e0c      	ldr	r6, [pc, #48]	; (8005af4 <__libc_init_array+0x38>)
 8005ac2:	4c0d      	ldr	r4, [pc, #52]	; (8005af8 <__libc_init_array+0x3c>)
 8005ac4:	1ba4      	subs	r4, r4, r6
 8005ac6:	10a4      	asrs	r4, r4, #2
 8005ac8:	42a5      	cmp	r5, r4
 8005aca:	d109      	bne.n	8005ae0 <__libc_init_array+0x24>
 8005acc:	f000 fc34 	bl	8006338 <_init>
 8005ad0:	2500      	movs	r5, #0
 8005ad2:	4e0a      	ldr	r6, [pc, #40]	; (8005afc <__libc_init_array+0x40>)
 8005ad4:	4c0a      	ldr	r4, [pc, #40]	; (8005b00 <__libc_init_array+0x44>)
 8005ad6:	1ba4      	subs	r4, r4, r6
 8005ad8:	10a4      	asrs	r4, r4, #2
 8005ada:	42a5      	cmp	r5, r4
 8005adc:	d105      	bne.n	8005aea <__libc_init_array+0x2e>
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ae4:	4798      	blx	r3
 8005ae6:	3501      	adds	r5, #1
 8005ae8:	e7ee      	b.n	8005ac8 <__libc_init_array+0xc>
 8005aea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005aee:	4798      	blx	r3
 8005af0:	3501      	adds	r5, #1
 8005af2:	e7f2      	b.n	8005ada <__libc_init_array+0x1e>
 8005af4:	080063ec 	.word	0x080063ec
 8005af8:	080063ec 	.word	0x080063ec
 8005afc:	080063ec 	.word	0x080063ec
 8005b00:	080063f0 	.word	0x080063f0

08005b04 <memset>:
 8005b04:	4603      	mov	r3, r0
 8005b06:	4402      	add	r2, r0
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d100      	bne.n	8005b0e <memset+0xa>
 8005b0c:	4770      	bx	lr
 8005b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b12:	e7f9      	b.n	8005b08 <memset+0x4>

08005b14 <siprintf>:
 8005b14:	b40e      	push	{r1, r2, r3}
 8005b16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b1a:	b500      	push	{lr}
 8005b1c:	b09c      	sub	sp, #112	; 0x70
 8005b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b20:	9002      	str	r0, [sp, #8]
 8005b22:	9006      	str	r0, [sp, #24]
 8005b24:	9107      	str	r1, [sp, #28]
 8005b26:	9104      	str	r1, [sp, #16]
 8005b28:	4808      	ldr	r0, [pc, #32]	; (8005b4c <siprintf+0x38>)
 8005b2a:	4909      	ldr	r1, [pc, #36]	; (8005b50 <siprintf+0x3c>)
 8005b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b30:	9105      	str	r1, [sp, #20]
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	a902      	add	r1, sp, #8
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	f000 f866 	bl	8005c08 <_svfiprintf_r>
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	9b02      	ldr	r3, [sp, #8]
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	b01c      	add	sp, #112	; 0x70
 8005b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b48:	b003      	add	sp, #12
 8005b4a:	4770      	bx	lr
 8005b4c:	2000000c 	.word	0x2000000c
 8005b50:	ffff0208 	.word	0xffff0208

08005b54 <__ssputs_r>:
 8005b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	688e      	ldr	r6, [r1, #8]
 8005b5a:	4682      	mov	sl, r0
 8005b5c:	429e      	cmp	r6, r3
 8005b5e:	460c      	mov	r4, r1
 8005b60:	4690      	mov	r8, r2
 8005b62:	4699      	mov	r9, r3
 8005b64:	d837      	bhi.n	8005bd6 <__ssputs_r+0x82>
 8005b66:	898a      	ldrh	r2, [r1, #12]
 8005b68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b6c:	d031      	beq.n	8005bd2 <__ssputs_r+0x7e>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	6825      	ldr	r5, [r4, #0]
 8005b72:	6909      	ldr	r1, [r1, #16]
 8005b74:	1a6f      	subs	r7, r5, r1
 8005b76:	6965      	ldr	r5, [r4, #20]
 8005b78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005b80:	f109 0301 	add.w	r3, r9, #1
 8005b84:	443b      	add	r3, r7
 8005b86:	429d      	cmp	r5, r3
 8005b88:	bf38      	it	cc
 8005b8a:	461d      	movcc	r5, r3
 8005b8c:	0553      	lsls	r3, r2, #21
 8005b8e:	d530      	bpl.n	8005bf2 <__ssputs_r+0x9e>
 8005b90:	4629      	mov	r1, r5
 8005b92:	f000 fb37 	bl	8006204 <_malloc_r>
 8005b96:	4606      	mov	r6, r0
 8005b98:	b950      	cbnz	r0, 8005bb0 <__ssputs_r+0x5c>
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	f8ca 3000 	str.w	r3, [sl]
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005baa:	81a3      	strh	r3, [r4, #12]
 8005bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb0:	463a      	mov	r2, r7
 8005bb2:	6921      	ldr	r1, [r4, #16]
 8005bb4:	f000 fab6 	bl	8006124 <memcpy>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	6126      	str	r6, [r4, #16]
 8005bc6:	443e      	add	r6, r7
 8005bc8:	6026      	str	r6, [r4, #0]
 8005bca:	464e      	mov	r6, r9
 8005bcc:	6165      	str	r5, [r4, #20]
 8005bce:	1bed      	subs	r5, r5, r7
 8005bd0:	60a5      	str	r5, [r4, #8]
 8005bd2:	454e      	cmp	r6, r9
 8005bd4:	d900      	bls.n	8005bd8 <__ssputs_r+0x84>
 8005bd6:	464e      	mov	r6, r9
 8005bd8:	4632      	mov	r2, r6
 8005bda:	4641      	mov	r1, r8
 8005bdc:	6820      	ldr	r0, [r4, #0]
 8005bde:	f000 faac 	bl	800613a <memmove>
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	2000      	movs	r0, #0
 8005be6:	1b9b      	subs	r3, r3, r6
 8005be8:	60a3      	str	r3, [r4, #8]
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	441e      	add	r6, r3
 8005bee:	6026      	str	r6, [r4, #0]
 8005bf0:	e7dc      	b.n	8005bac <__ssputs_r+0x58>
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	f000 fb60 	bl	80062b8 <_realloc_r>
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d1e2      	bne.n	8005bc4 <__ssputs_r+0x70>
 8005bfe:	6921      	ldr	r1, [r4, #16]
 8005c00:	4650      	mov	r0, sl
 8005c02:	f000 fab3 	bl	800616c <_free_r>
 8005c06:	e7c8      	b.n	8005b9a <__ssputs_r+0x46>

08005c08 <_svfiprintf_r>:
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	461d      	mov	r5, r3
 8005c0e:	898b      	ldrh	r3, [r1, #12]
 8005c10:	b09d      	sub	sp, #116	; 0x74
 8005c12:	061f      	lsls	r7, r3, #24
 8005c14:	4680      	mov	r8, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	4616      	mov	r6, r2
 8005c1a:	d50f      	bpl.n	8005c3c <_svfiprintf_r+0x34>
 8005c1c:	690b      	ldr	r3, [r1, #16]
 8005c1e:	b96b      	cbnz	r3, 8005c3c <_svfiprintf_r+0x34>
 8005c20:	2140      	movs	r1, #64	; 0x40
 8005c22:	f000 faef 	bl	8006204 <_malloc_r>
 8005c26:	6020      	str	r0, [r4, #0]
 8005c28:	6120      	str	r0, [r4, #16]
 8005c2a:	b928      	cbnz	r0, 8005c38 <_svfiprintf_r+0x30>
 8005c2c:	230c      	movs	r3, #12
 8005c2e:	f8c8 3000 	str.w	r3, [r8]
 8005c32:	f04f 30ff 	mov.w	r0, #4294967295
 8005c36:	e0c8      	b.n	8005dca <_svfiprintf_r+0x1c2>
 8005c38:	2340      	movs	r3, #64	; 0x40
 8005c3a:	6163      	str	r3, [r4, #20]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c40:	2320      	movs	r3, #32
 8005c42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c46:	2330      	movs	r3, #48	; 0x30
 8005c48:	f04f 0b01 	mov.w	fp, #1
 8005c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c50:	9503      	str	r5, [sp, #12]
 8005c52:	4637      	mov	r7, r6
 8005c54:	463d      	mov	r5, r7
 8005c56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c5a:	b10b      	cbz	r3, 8005c60 <_svfiprintf_r+0x58>
 8005c5c:	2b25      	cmp	r3, #37	; 0x25
 8005c5e:	d13e      	bne.n	8005cde <_svfiprintf_r+0xd6>
 8005c60:	ebb7 0a06 	subs.w	sl, r7, r6
 8005c64:	d00b      	beq.n	8005c7e <_svfiprintf_r+0x76>
 8005c66:	4653      	mov	r3, sl
 8005c68:	4632      	mov	r2, r6
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	f7ff ff71 	bl	8005b54 <__ssputs_r>
 8005c72:	3001      	adds	r0, #1
 8005c74:	f000 80a4 	beq.w	8005dc0 <_svfiprintf_r+0x1b8>
 8005c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7a:	4453      	add	r3, sl
 8005c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7e:	783b      	ldrb	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 809d 	beq.w	8005dc0 <_svfiprintf_r+0x1b8>
 8005c86:	2300      	movs	r3, #0
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c90:	9304      	str	r3, [sp, #16]
 8005c92:	9307      	str	r3, [sp, #28]
 8005c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c98:	931a      	str	r3, [sp, #104]	; 0x68
 8005c9a:	462f      	mov	r7, r5
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005ca2:	4850      	ldr	r0, [pc, #320]	; (8005de4 <_svfiprintf_r+0x1dc>)
 8005ca4:	f000 fa30 	bl	8006108 <memchr>
 8005ca8:	9b04      	ldr	r3, [sp, #16]
 8005caa:	b9d0      	cbnz	r0, 8005ce2 <_svfiprintf_r+0xda>
 8005cac:	06d9      	lsls	r1, r3, #27
 8005cae:	bf44      	itt	mi
 8005cb0:	2220      	movmi	r2, #32
 8005cb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005cb6:	071a      	lsls	r2, r3, #28
 8005cb8:	bf44      	itt	mi
 8005cba:	222b      	movmi	r2, #43	; 0x2b
 8005cbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005cc0:	782a      	ldrb	r2, [r5, #0]
 8005cc2:	2a2a      	cmp	r2, #42	; 0x2a
 8005cc4:	d015      	beq.n	8005cf2 <_svfiprintf_r+0xea>
 8005cc6:	462f      	mov	r7, r5
 8005cc8:	2000      	movs	r0, #0
 8005cca:	250a      	movs	r5, #10
 8005ccc:	9a07      	ldr	r2, [sp, #28]
 8005cce:	4639      	mov	r1, r7
 8005cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd4:	3b30      	subs	r3, #48	; 0x30
 8005cd6:	2b09      	cmp	r3, #9
 8005cd8:	d94d      	bls.n	8005d76 <_svfiprintf_r+0x16e>
 8005cda:	b1b8      	cbz	r0, 8005d0c <_svfiprintf_r+0x104>
 8005cdc:	e00f      	b.n	8005cfe <_svfiprintf_r+0xf6>
 8005cde:	462f      	mov	r7, r5
 8005ce0:	e7b8      	b.n	8005c54 <_svfiprintf_r+0x4c>
 8005ce2:	4a40      	ldr	r2, [pc, #256]	; (8005de4 <_svfiprintf_r+0x1dc>)
 8005ce4:	463d      	mov	r5, r7
 8005ce6:	1a80      	subs	r0, r0, r2
 8005ce8:	fa0b f000 	lsl.w	r0, fp, r0
 8005cec:	4318      	orrs	r0, r3
 8005cee:	9004      	str	r0, [sp, #16]
 8005cf0:	e7d3      	b.n	8005c9a <_svfiprintf_r+0x92>
 8005cf2:	9a03      	ldr	r2, [sp, #12]
 8005cf4:	1d11      	adds	r1, r2, #4
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	9103      	str	r1, [sp, #12]
 8005cfa:	2a00      	cmp	r2, #0
 8005cfc:	db01      	blt.n	8005d02 <_svfiprintf_r+0xfa>
 8005cfe:	9207      	str	r2, [sp, #28]
 8005d00:	e004      	b.n	8005d0c <_svfiprintf_r+0x104>
 8005d02:	4252      	negs	r2, r2
 8005d04:	f043 0302 	orr.w	r3, r3, #2
 8005d08:	9207      	str	r2, [sp, #28]
 8005d0a:	9304      	str	r3, [sp, #16]
 8005d0c:	783b      	ldrb	r3, [r7, #0]
 8005d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005d10:	d10c      	bne.n	8005d2c <_svfiprintf_r+0x124>
 8005d12:	787b      	ldrb	r3, [r7, #1]
 8005d14:	2b2a      	cmp	r3, #42	; 0x2a
 8005d16:	d133      	bne.n	8005d80 <_svfiprintf_r+0x178>
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	3702      	adds	r7, #2
 8005d1c:	1d1a      	adds	r2, r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	9203      	str	r2, [sp, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bfb8      	it	lt
 8005d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d2a:	9305      	str	r3, [sp, #20]
 8005d2c:	4d2e      	ldr	r5, [pc, #184]	; (8005de8 <_svfiprintf_r+0x1e0>)
 8005d2e:	2203      	movs	r2, #3
 8005d30:	7839      	ldrb	r1, [r7, #0]
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 f9e8 	bl	8006108 <memchr>
 8005d38:	b138      	cbz	r0, 8005d4a <_svfiprintf_r+0x142>
 8005d3a:	2340      	movs	r3, #64	; 0x40
 8005d3c:	1b40      	subs	r0, r0, r5
 8005d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8005d42:	9b04      	ldr	r3, [sp, #16]
 8005d44:	3701      	adds	r7, #1
 8005d46:	4303      	orrs	r3, r0
 8005d48:	9304      	str	r3, [sp, #16]
 8005d4a:	7839      	ldrb	r1, [r7, #0]
 8005d4c:	2206      	movs	r2, #6
 8005d4e:	4827      	ldr	r0, [pc, #156]	; (8005dec <_svfiprintf_r+0x1e4>)
 8005d50:	1c7e      	adds	r6, r7, #1
 8005d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d56:	f000 f9d7 	bl	8006108 <memchr>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d038      	beq.n	8005dd0 <_svfiprintf_r+0x1c8>
 8005d5e:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <_svfiprintf_r+0x1e8>)
 8005d60:	bb13      	cbnz	r3, 8005da8 <_svfiprintf_r+0x1a0>
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	3307      	adds	r3, #7
 8005d66:	f023 0307 	bic.w	r3, r3, #7
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	9303      	str	r3, [sp, #12]
 8005d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d70:	444b      	add	r3, r9
 8005d72:	9309      	str	r3, [sp, #36]	; 0x24
 8005d74:	e76d      	b.n	8005c52 <_svfiprintf_r+0x4a>
 8005d76:	fb05 3202 	mla	r2, r5, r2, r3
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	460f      	mov	r7, r1
 8005d7e:	e7a6      	b.n	8005cce <_svfiprintf_r+0xc6>
 8005d80:	2300      	movs	r3, #0
 8005d82:	250a      	movs	r5, #10
 8005d84:	4619      	mov	r1, r3
 8005d86:	3701      	adds	r7, #1
 8005d88:	9305      	str	r3, [sp, #20]
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d90:	3a30      	subs	r2, #48	; 0x30
 8005d92:	2a09      	cmp	r2, #9
 8005d94:	d903      	bls.n	8005d9e <_svfiprintf_r+0x196>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0c8      	beq.n	8005d2c <_svfiprintf_r+0x124>
 8005d9a:	9105      	str	r1, [sp, #20]
 8005d9c:	e7c6      	b.n	8005d2c <_svfiprintf_r+0x124>
 8005d9e:	fb05 2101 	mla	r1, r5, r1, r2
 8005da2:	2301      	movs	r3, #1
 8005da4:	4607      	mov	r7, r0
 8005da6:	e7f0      	b.n	8005d8a <_svfiprintf_r+0x182>
 8005da8:	ab03      	add	r3, sp, #12
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	4622      	mov	r2, r4
 8005dae:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <_svfiprintf_r+0x1ec>)
 8005db0:	a904      	add	r1, sp, #16
 8005db2:	4640      	mov	r0, r8
 8005db4:	f3af 8000 	nop.w
 8005db8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005dbc:	4681      	mov	r9, r0
 8005dbe:	d1d6      	bne.n	8005d6e <_svfiprintf_r+0x166>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	065b      	lsls	r3, r3, #25
 8005dc4:	f53f af35 	bmi.w	8005c32 <_svfiprintf_r+0x2a>
 8005dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dca:	b01d      	add	sp, #116	; 0x74
 8005dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd0:	ab03      	add	r3, sp, #12
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <_svfiprintf_r+0x1ec>)
 8005dd8:	a904      	add	r1, sp, #16
 8005dda:	4640      	mov	r0, r8
 8005ddc:	f000 f882 	bl	8005ee4 <_printf_i>
 8005de0:	e7ea      	b.n	8005db8 <_svfiprintf_r+0x1b0>
 8005de2:	bf00      	nop
 8005de4:	080063b0 	.word	0x080063b0
 8005de8:	080063b6 	.word	0x080063b6
 8005dec:	080063ba 	.word	0x080063ba
 8005df0:	00000000 	.word	0x00000000
 8005df4:	08005b55 	.word	0x08005b55

08005df8 <_printf_common>:
 8005df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	4691      	mov	r9, r2
 8005dfe:	461f      	mov	r7, r3
 8005e00:	688a      	ldr	r2, [r1, #8]
 8005e02:	690b      	ldr	r3, [r1, #16]
 8005e04:	4606      	mov	r6, r0
 8005e06:	4293      	cmp	r3, r2
 8005e08:	bfb8      	it	lt
 8005e0a:	4613      	movlt	r3, r2
 8005e0c:	f8c9 3000 	str.w	r3, [r9]
 8005e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e14:	460c      	mov	r4, r1
 8005e16:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e1a:	b112      	cbz	r2, 8005e22 <_printf_common+0x2a>
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	f8c9 3000 	str.w	r3, [r9]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	0699      	lsls	r1, r3, #26
 8005e26:	bf42      	ittt	mi
 8005e28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005e2c:	3302      	addmi	r3, #2
 8005e2e:	f8c9 3000 	strmi.w	r3, [r9]
 8005e32:	6825      	ldr	r5, [r4, #0]
 8005e34:	f015 0506 	ands.w	r5, r5, #6
 8005e38:	d107      	bne.n	8005e4a <_printf_common+0x52>
 8005e3a:	f104 0a19 	add.w	sl, r4, #25
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	f8d9 2000 	ldr.w	r2, [r9]
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	42ab      	cmp	r3, r5
 8005e48:	dc29      	bgt.n	8005e9e <_printf_common+0xa6>
 8005e4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	3300      	adds	r3, #0
 8005e52:	bf18      	it	ne
 8005e54:	2301      	movne	r3, #1
 8005e56:	0692      	lsls	r2, r2, #26
 8005e58:	d42e      	bmi.n	8005eb8 <_printf_common+0xc0>
 8005e5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4630      	mov	r0, r6
 8005e62:	47c0      	blx	r8
 8005e64:	3001      	adds	r0, #1
 8005e66:	d021      	beq.n	8005eac <_printf_common+0xb4>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	68e5      	ldr	r5, [r4, #12]
 8005e6c:	f003 0306 	and.w	r3, r3, #6
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	bf18      	it	ne
 8005e74:	2500      	movne	r5, #0
 8005e76:	f8d9 2000 	ldr.w	r2, [r9]
 8005e7a:	f04f 0900 	mov.w	r9, #0
 8005e7e:	bf08      	it	eq
 8005e80:	1aad      	subeq	r5, r5, r2
 8005e82:	68a3      	ldr	r3, [r4, #8]
 8005e84:	6922      	ldr	r2, [r4, #16]
 8005e86:	bf08      	it	eq
 8005e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	bfc4      	itt	gt
 8005e90:	1a9b      	subgt	r3, r3, r2
 8005e92:	18ed      	addgt	r5, r5, r3
 8005e94:	341a      	adds	r4, #26
 8005e96:	454d      	cmp	r5, r9
 8005e98:	d11a      	bne.n	8005ed0 <_printf_common+0xd8>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e008      	b.n	8005eb0 <_printf_common+0xb8>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4652      	mov	r2, sl
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	47c0      	blx	r8
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d103      	bne.n	8005eb4 <_printf_common+0xbc>
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	e7c2      	b.n	8005e3e <_printf_common+0x46>
 8005eb8:	2030      	movs	r0, #48	; 0x30
 8005eba:	18e1      	adds	r1, r4, r3
 8005ebc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ec6:	4422      	add	r2, r4
 8005ec8:	3302      	adds	r3, #2
 8005eca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ece:	e7c4      	b.n	8005e5a <_printf_common+0x62>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	4639      	mov	r1, r7
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	47c0      	blx	r8
 8005eda:	3001      	adds	r0, #1
 8005edc:	d0e6      	beq.n	8005eac <_printf_common+0xb4>
 8005ede:	f109 0901 	add.w	r9, r9, #1
 8005ee2:	e7d8      	b.n	8005e96 <_printf_common+0x9e>

08005ee4 <_printf_i>:
 8005ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ee8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005eec:	460c      	mov	r4, r1
 8005eee:	7e09      	ldrb	r1, [r1, #24]
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	296e      	cmp	r1, #110	; 0x6e
 8005ef4:	4617      	mov	r7, r2
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	4698      	mov	r8, r3
 8005efa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005efc:	f000 80b3 	beq.w	8006066 <_printf_i+0x182>
 8005f00:	d822      	bhi.n	8005f48 <_printf_i+0x64>
 8005f02:	2963      	cmp	r1, #99	; 0x63
 8005f04:	d036      	beq.n	8005f74 <_printf_i+0x90>
 8005f06:	d80a      	bhi.n	8005f1e <_printf_i+0x3a>
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	f000 80b9 	beq.w	8006080 <_printf_i+0x19c>
 8005f0e:	2958      	cmp	r1, #88	; 0x58
 8005f10:	f000 8083 	beq.w	800601a <_printf_i+0x136>
 8005f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005f1c:	e032      	b.n	8005f84 <_printf_i+0xa0>
 8005f1e:	2964      	cmp	r1, #100	; 0x64
 8005f20:	d001      	beq.n	8005f26 <_printf_i+0x42>
 8005f22:	2969      	cmp	r1, #105	; 0x69
 8005f24:	d1f6      	bne.n	8005f14 <_printf_i+0x30>
 8005f26:	6820      	ldr	r0, [r4, #0]
 8005f28:	6813      	ldr	r3, [r2, #0]
 8005f2a:	0605      	lsls	r5, r0, #24
 8005f2c:	f103 0104 	add.w	r1, r3, #4
 8005f30:	d52a      	bpl.n	8005f88 <_printf_i+0xa4>
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	da03      	bge.n	8005f42 <_printf_i+0x5e>
 8005f3a:	222d      	movs	r2, #45	; 0x2d
 8005f3c:	425b      	negs	r3, r3
 8005f3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005f42:	486f      	ldr	r0, [pc, #444]	; (8006100 <_printf_i+0x21c>)
 8005f44:	220a      	movs	r2, #10
 8005f46:	e039      	b.n	8005fbc <_printf_i+0xd8>
 8005f48:	2973      	cmp	r1, #115	; 0x73
 8005f4a:	f000 809d 	beq.w	8006088 <_printf_i+0x1a4>
 8005f4e:	d808      	bhi.n	8005f62 <_printf_i+0x7e>
 8005f50:	296f      	cmp	r1, #111	; 0x6f
 8005f52:	d020      	beq.n	8005f96 <_printf_i+0xb2>
 8005f54:	2970      	cmp	r1, #112	; 0x70
 8005f56:	d1dd      	bne.n	8005f14 <_printf_i+0x30>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	f043 0320 	orr.w	r3, r3, #32
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	e003      	b.n	8005f6a <_printf_i+0x86>
 8005f62:	2975      	cmp	r1, #117	; 0x75
 8005f64:	d017      	beq.n	8005f96 <_printf_i+0xb2>
 8005f66:	2978      	cmp	r1, #120	; 0x78
 8005f68:	d1d4      	bne.n	8005f14 <_printf_i+0x30>
 8005f6a:	2378      	movs	r3, #120	; 0x78
 8005f6c:	4865      	ldr	r0, [pc, #404]	; (8006104 <_printf_i+0x220>)
 8005f6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f72:	e055      	b.n	8006020 <_printf_i+0x13c>
 8005f74:	6813      	ldr	r3, [r2, #0]
 8005f76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f7a:	1d19      	adds	r1, r3, #4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6011      	str	r1, [r2, #0]
 8005f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f84:	2301      	movs	r3, #1
 8005f86:	e08c      	b.n	80060a2 <_printf_i+0x1be>
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f8e:	6011      	str	r1, [r2, #0]
 8005f90:	bf18      	it	ne
 8005f92:	b21b      	sxthne	r3, r3
 8005f94:	e7cf      	b.n	8005f36 <_printf_i+0x52>
 8005f96:	6813      	ldr	r3, [r2, #0]
 8005f98:	6825      	ldr	r5, [r4, #0]
 8005f9a:	1d18      	adds	r0, r3, #4
 8005f9c:	6010      	str	r0, [r2, #0]
 8005f9e:	0628      	lsls	r0, r5, #24
 8005fa0:	d501      	bpl.n	8005fa6 <_printf_i+0xc2>
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	e002      	b.n	8005fac <_printf_i+0xc8>
 8005fa6:	0668      	lsls	r0, r5, #25
 8005fa8:	d5fb      	bpl.n	8005fa2 <_printf_i+0xbe>
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	296f      	cmp	r1, #111	; 0x6f
 8005fae:	bf14      	ite	ne
 8005fb0:	220a      	movne	r2, #10
 8005fb2:	2208      	moveq	r2, #8
 8005fb4:	4852      	ldr	r0, [pc, #328]	; (8006100 <_printf_i+0x21c>)
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fbc:	6865      	ldr	r5, [r4, #4]
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	60a5      	str	r5, [r4, #8]
 8005fc2:	f2c0 8095 	blt.w	80060f0 <_printf_i+0x20c>
 8005fc6:	6821      	ldr	r1, [r4, #0]
 8005fc8:	f021 0104 	bic.w	r1, r1, #4
 8005fcc:	6021      	str	r1, [r4, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d13d      	bne.n	800604e <_printf_i+0x16a>
 8005fd2:	2d00      	cmp	r5, #0
 8005fd4:	f040 808e 	bne.w	80060f4 <_printf_i+0x210>
 8005fd8:	4665      	mov	r5, ip
 8005fda:	2a08      	cmp	r2, #8
 8005fdc:	d10b      	bne.n	8005ff6 <_printf_i+0x112>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	07db      	lsls	r3, r3, #31
 8005fe2:	d508      	bpl.n	8005ff6 <_printf_i+0x112>
 8005fe4:	6923      	ldr	r3, [r4, #16]
 8005fe6:	6862      	ldr	r2, [r4, #4]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	bfde      	ittt	le
 8005fec:	2330      	movle	r3, #48	; 0x30
 8005fee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ff2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ff6:	ebac 0305 	sub.w	r3, ip, r5
 8005ffa:	6123      	str	r3, [r4, #16]
 8005ffc:	f8cd 8000 	str.w	r8, [sp]
 8006000:	463b      	mov	r3, r7
 8006002:	aa03      	add	r2, sp, #12
 8006004:	4621      	mov	r1, r4
 8006006:	4630      	mov	r0, r6
 8006008:	f7ff fef6 	bl	8005df8 <_printf_common>
 800600c:	3001      	adds	r0, #1
 800600e:	d14d      	bne.n	80060ac <_printf_i+0x1c8>
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	b005      	add	sp, #20
 8006016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800601a:	4839      	ldr	r0, [pc, #228]	; (8006100 <_printf_i+0x21c>)
 800601c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006020:	6813      	ldr	r3, [r2, #0]
 8006022:	6821      	ldr	r1, [r4, #0]
 8006024:	1d1d      	adds	r5, r3, #4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6015      	str	r5, [r2, #0]
 800602a:	060a      	lsls	r2, r1, #24
 800602c:	d50b      	bpl.n	8006046 <_printf_i+0x162>
 800602e:	07ca      	lsls	r2, r1, #31
 8006030:	bf44      	itt	mi
 8006032:	f041 0120 	orrmi.w	r1, r1, #32
 8006036:	6021      	strmi	r1, [r4, #0]
 8006038:	b91b      	cbnz	r3, 8006042 <_printf_i+0x15e>
 800603a:	6822      	ldr	r2, [r4, #0]
 800603c:	f022 0220 	bic.w	r2, r2, #32
 8006040:	6022      	str	r2, [r4, #0]
 8006042:	2210      	movs	r2, #16
 8006044:	e7b7      	b.n	8005fb6 <_printf_i+0xd2>
 8006046:	064d      	lsls	r5, r1, #25
 8006048:	bf48      	it	mi
 800604a:	b29b      	uxthmi	r3, r3
 800604c:	e7ef      	b.n	800602e <_printf_i+0x14a>
 800604e:	4665      	mov	r5, ip
 8006050:	fbb3 f1f2 	udiv	r1, r3, r2
 8006054:	fb02 3311 	mls	r3, r2, r1, r3
 8006058:	5cc3      	ldrb	r3, [r0, r3]
 800605a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800605e:	460b      	mov	r3, r1
 8006060:	2900      	cmp	r1, #0
 8006062:	d1f5      	bne.n	8006050 <_printf_i+0x16c>
 8006064:	e7b9      	b.n	8005fda <_printf_i+0xf6>
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	6825      	ldr	r5, [r4, #0]
 800606a:	1d18      	adds	r0, r3, #4
 800606c:	6961      	ldr	r1, [r4, #20]
 800606e:	6010      	str	r0, [r2, #0]
 8006070:	0628      	lsls	r0, r5, #24
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	d501      	bpl.n	800607a <_printf_i+0x196>
 8006076:	6019      	str	r1, [r3, #0]
 8006078:	e002      	b.n	8006080 <_printf_i+0x19c>
 800607a:	066a      	lsls	r2, r5, #25
 800607c:	d5fb      	bpl.n	8006076 <_printf_i+0x192>
 800607e:	8019      	strh	r1, [r3, #0]
 8006080:	2300      	movs	r3, #0
 8006082:	4665      	mov	r5, ip
 8006084:	6123      	str	r3, [r4, #16]
 8006086:	e7b9      	b.n	8005ffc <_printf_i+0x118>
 8006088:	6813      	ldr	r3, [r2, #0]
 800608a:	1d19      	adds	r1, r3, #4
 800608c:	6011      	str	r1, [r2, #0]
 800608e:	681d      	ldr	r5, [r3, #0]
 8006090:	6862      	ldr	r2, [r4, #4]
 8006092:	2100      	movs	r1, #0
 8006094:	4628      	mov	r0, r5
 8006096:	f000 f837 	bl	8006108 <memchr>
 800609a:	b108      	cbz	r0, 80060a0 <_printf_i+0x1bc>
 800609c:	1b40      	subs	r0, r0, r5
 800609e:	6060      	str	r0, [r4, #4]
 80060a0:	6863      	ldr	r3, [r4, #4]
 80060a2:	6123      	str	r3, [r4, #16]
 80060a4:	2300      	movs	r3, #0
 80060a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060aa:	e7a7      	b.n	8005ffc <_printf_i+0x118>
 80060ac:	6923      	ldr	r3, [r4, #16]
 80060ae:	462a      	mov	r2, r5
 80060b0:	4639      	mov	r1, r7
 80060b2:	4630      	mov	r0, r6
 80060b4:	47c0      	blx	r8
 80060b6:	3001      	adds	r0, #1
 80060b8:	d0aa      	beq.n	8006010 <_printf_i+0x12c>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	079b      	lsls	r3, r3, #30
 80060be:	d413      	bmi.n	80060e8 <_printf_i+0x204>
 80060c0:	68e0      	ldr	r0, [r4, #12]
 80060c2:	9b03      	ldr	r3, [sp, #12]
 80060c4:	4298      	cmp	r0, r3
 80060c6:	bfb8      	it	lt
 80060c8:	4618      	movlt	r0, r3
 80060ca:	e7a3      	b.n	8006014 <_printf_i+0x130>
 80060cc:	2301      	movs	r3, #1
 80060ce:	464a      	mov	r2, r9
 80060d0:	4639      	mov	r1, r7
 80060d2:	4630      	mov	r0, r6
 80060d4:	47c0      	blx	r8
 80060d6:	3001      	adds	r0, #1
 80060d8:	d09a      	beq.n	8006010 <_printf_i+0x12c>
 80060da:	3501      	adds	r5, #1
 80060dc:	68e3      	ldr	r3, [r4, #12]
 80060de:	9a03      	ldr	r2, [sp, #12]
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	42ab      	cmp	r3, r5
 80060e4:	dcf2      	bgt.n	80060cc <_printf_i+0x1e8>
 80060e6:	e7eb      	b.n	80060c0 <_printf_i+0x1dc>
 80060e8:	2500      	movs	r5, #0
 80060ea:	f104 0919 	add.w	r9, r4, #25
 80060ee:	e7f5      	b.n	80060dc <_printf_i+0x1f8>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1ac      	bne.n	800604e <_printf_i+0x16a>
 80060f4:	7803      	ldrb	r3, [r0, #0]
 80060f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060fe:	e76c      	b.n	8005fda <_printf_i+0xf6>
 8006100:	080063c1 	.word	0x080063c1
 8006104:	080063d2 	.word	0x080063d2

08006108 <memchr>:
 8006108:	b510      	push	{r4, lr}
 800610a:	b2c9      	uxtb	r1, r1
 800610c:	4402      	add	r2, r0
 800610e:	4290      	cmp	r0, r2
 8006110:	4603      	mov	r3, r0
 8006112:	d101      	bne.n	8006118 <memchr+0x10>
 8006114:	2300      	movs	r3, #0
 8006116:	e003      	b.n	8006120 <memchr+0x18>
 8006118:	781c      	ldrb	r4, [r3, #0]
 800611a:	3001      	adds	r0, #1
 800611c:	428c      	cmp	r4, r1
 800611e:	d1f6      	bne.n	800610e <memchr+0x6>
 8006120:	4618      	mov	r0, r3
 8006122:	bd10      	pop	{r4, pc}

08006124 <memcpy>:
 8006124:	b510      	push	{r4, lr}
 8006126:	1e43      	subs	r3, r0, #1
 8006128:	440a      	add	r2, r1
 800612a:	4291      	cmp	r1, r2
 800612c:	d100      	bne.n	8006130 <memcpy+0xc>
 800612e:	bd10      	pop	{r4, pc}
 8006130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006138:	e7f7      	b.n	800612a <memcpy+0x6>

0800613a <memmove>:
 800613a:	4288      	cmp	r0, r1
 800613c:	b510      	push	{r4, lr}
 800613e:	eb01 0302 	add.w	r3, r1, r2
 8006142:	d807      	bhi.n	8006154 <memmove+0x1a>
 8006144:	1e42      	subs	r2, r0, #1
 8006146:	4299      	cmp	r1, r3
 8006148:	d00a      	beq.n	8006160 <memmove+0x26>
 800614a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800614e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006152:	e7f8      	b.n	8006146 <memmove+0xc>
 8006154:	4283      	cmp	r3, r0
 8006156:	d9f5      	bls.n	8006144 <memmove+0xa>
 8006158:	1881      	adds	r1, r0, r2
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	42d3      	cmn	r3, r2
 800615e:	d100      	bne.n	8006162 <memmove+0x28>
 8006160:	bd10      	pop	{r4, pc}
 8006162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006166:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800616a:	e7f7      	b.n	800615c <memmove+0x22>

0800616c <_free_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4605      	mov	r5, r0
 8006170:	2900      	cmp	r1, #0
 8006172:	d043      	beq.n	80061fc <_free_r+0x90>
 8006174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006178:	1f0c      	subs	r4, r1, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	bfb8      	it	lt
 800617e:	18e4      	addlt	r4, r4, r3
 8006180:	f000 f8d0 	bl	8006324 <__malloc_lock>
 8006184:	4a1e      	ldr	r2, [pc, #120]	; (8006200 <_free_r+0x94>)
 8006186:	6813      	ldr	r3, [r2, #0]
 8006188:	4610      	mov	r0, r2
 800618a:	b933      	cbnz	r3, 800619a <_free_r+0x2e>
 800618c:	6063      	str	r3, [r4, #4]
 800618e:	6014      	str	r4, [r2, #0]
 8006190:	4628      	mov	r0, r5
 8006192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006196:	f000 b8c6 	b.w	8006326 <__malloc_unlock>
 800619a:	42a3      	cmp	r3, r4
 800619c:	d90b      	bls.n	80061b6 <_free_r+0x4a>
 800619e:	6821      	ldr	r1, [r4, #0]
 80061a0:	1862      	adds	r2, r4, r1
 80061a2:	4293      	cmp	r3, r2
 80061a4:	bf01      	itttt	eq
 80061a6:	681a      	ldreq	r2, [r3, #0]
 80061a8:	685b      	ldreq	r3, [r3, #4]
 80061aa:	1852      	addeq	r2, r2, r1
 80061ac:	6022      	streq	r2, [r4, #0]
 80061ae:	6063      	str	r3, [r4, #4]
 80061b0:	6004      	str	r4, [r0, #0]
 80061b2:	e7ed      	b.n	8006190 <_free_r+0x24>
 80061b4:	4613      	mov	r3, r2
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	b10a      	cbz	r2, 80061be <_free_r+0x52>
 80061ba:	42a2      	cmp	r2, r4
 80061bc:	d9fa      	bls.n	80061b4 <_free_r+0x48>
 80061be:	6819      	ldr	r1, [r3, #0]
 80061c0:	1858      	adds	r0, r3, r1
 80061c2:	42a0      	cmp	r0, r4
 80061c4:	d10b      	bne.n	80061de <_free_r+0x72>
 80061c6:	6820      	ldr	r0, [r4, #0]
 80061c8:	4401      	add	r1, r0
 80061ca:	1858      	adds	r0, r3, r1
 80061cc:	4282      	cmp	r2, r0
 80061ce:	6019      	str	r1, [r3, #0]
 80061d0:	d1de      	bne.n	8006190 <_free_r+0x24>
 80061d2:	6810      	ldr	r0, [r2, #0]
 80061d4:	6852      	ldr	r2, [r2, #4]
 80061d6:	4401      	add	r1, r0
 80061d8:	6019      	str	r1, [r3, #0]
 80061da:	605a      	str	r2, [r3, #4]
 80061dc:	e7d8      	b.n	8006190 <_free_r+0x24>
 80061de:	d902      	bls.n	80061e6 <_free_r+0x7a>
 80061e0:	230c      	movs	r3, #12
 80061e2:	602b      	str	r3, [r5, #0]
 80061e4:	e7d4      	b.n	8006190 <_free_r+0x24>
 80061e6:	6820      	ldr	r0, [r4, #0]
 80061e8:	1821      	adds	r1, r4, r0
 80061ea:	428a      	cmp	r2, r1
 80061ec:	bf01      	itttt	eq
 80061ee:	6811      	ldreq	r1, [r2, #0]
 80061f0:	6852      	ldreq	r2, [r2, #4]
 80061f2:	1809      	addeq	r1, r1, r0
 80061f4:	6021      	streq	r1, [r4, #0]
 80061f6:	6062      	str	r2, [r4, #4]
 80061f8:	605c      	str	r4, [r3, #4]
 80061fa:	e7c9      	b.n	8006190 <_free_r+0x24>
 80061fc:	bd38      	pop	{r3, r4, r5, pc}
 80061fe:	bf00      	nop
 8006200:	20000090 	.word	0x20000090

08006204 <_malloc_r>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	1ccd      	adds	r5, r1, #3
 8006208:	f025 0503 	bic.w	r5, r5, #3
 800620c:	3508      	adds	r5, #8
 800620e:	2d0c      	cmp	r5, #12
 8006210:	bf38      	it	cc
 8006212:	250c      	movcc	r5, #12
 8006214:	2d00      	cmp	r5, #0
 8006216:	4606      	mov	r6, r0
 8006218:	db01      	blt.n	800621e <_malloc_r+0x1a>
 800621a:	42a9      	cmp	r1, r5
 800621c:	d903      	bls.n	8006226 <_malloc_r+0x22>
 800621e:	230c      	movs	r3, #12
 8006220:	6033      	str	r3, [r6, #0]
 8006222:	2000      	movs	r0, #0
 8006224:	bd70      	pop	{r4, r5, r6, pc}
 8006226:	f000 f87d 	bl	8006324 <__malloc_lock>
 800622a:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <_malloc_r+0xac>)
 800622c:	6814      	ldr	r4, [r2, #0]
 800622e:	4621      	mov	r1, r4
 8006230:	b991      	cbnz	r1, 8006258 <_malloc_r+0x54>
 8006232:	4c20      	ldr	r4, [pc, #128]	; (80062b4 <_malloc_r+0xb0>)
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	b91b      	cbnz	r3, 8006240 <_malloc_r+0x3c>
 8006238:	4630      	mov	r0, r6
 800623a:	f000 f863 	bl	8006304 <_sbrk_r>
 800623e:	6020      	str	r0, [r4, #0]
 8006240:	4629      	mov	r1, r5
 8006242:	4630      	mov	r0, r6
 8006244:	f000 f85e 	bl	8006304 <_sbrk_r>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d124      	bne.n	8006296 <_malloc_r+0x92>
 800624c:	230c      	movs	r3, #12
 800624e:	4630      	mov	r0, r6
 8006250:	6033      	str	r3, [r6, #0]
 8006252:	f000 f868 	bl	8006326 <__malloc_unlock>
 8006256:	e7e4      	b.n	8006222 <_malloc_r+0x1e>
 8006258:	680b      	ldr	r3, [r1, #0]
 800625a:	1b5b      	subs	r3, r3, r5
 800625c:	d418      	bmi.n	8006290 <_malloc_r+0x8c>
 800625e:	2b0b      	cmp	r3, #11
 8006260:	d90f      	bls.n	8006282 <_malloc_r+0x7e>
 8006262:	600b      	str	r3, [r1, #0]
 8006264:	18cc      	adds	r4, r1, r3
 8006266:	50cd      	str	r5, [r1, r3]
 8006268:	4630      	mov	r0, r6
 800626a:	f000 f85c 	bl	8006326 <__malloc_unlock>
 800626e:	f104 000b 	add.w	r0, r4, #11
 8006272:	1d23      	adds	r3, r4, #4
 8006274:	f020 0007 	bic.w	r0, r0, #7
 8006278:	1ac3      	subs	r3, r0, r3
 800627a:	d0d3      	beq.n	8006224 <_malloc_r+0x20>
 800627c:	425a      	negs	r2, r3
 800627e:	50e2      	str	r2, [r4, r3]
 8006280:	e7d0      	b.n	8006224 <_malloc_r+0x20>
 8006282:	684b      	ldr	r3, [r1, #4]
 8006284:	428c      	cmp	r4, r1
 8006286:	bf16      	itet	ne
 8006288:	6063      	strne	r3, [r4, #4]
 800628a:	6013      	streq	r3, [r2, #0]
 800628c:	460c      	movne	r4, r1
 800628e:	e7eb      	b.n	8006268 <_malloc_r+0x64>
 8006290:	460c      	mov	r4, r1
 8006292:	6849      	ldr	r1, [r1, #4]
 8006294:	e7cc      	b.n	8006230 <_malloc_r+0x2c>
 8006296:	1cc4      	adds	r4, r0, #3
 8006298:	f024 0403 	bic.w	r4, r4, #3
 800629c:	42a0      	cmp	r0, r4
 800629e:	d005      	beq.n	80062ac <_malloc_r+0xa8>
 80062a0:	1a21      	subs	r1, r4, r0
 80062a2:	4630      	mov	r0, r6
 80062a4:	f000 f82e 	bl	8006304 <_sbrk_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d0cf      	beq.n	800624c <_malloc_r+0x48>
 80062ac:	6025      	str	r5, [r4, #0]
 80062ae:	e7db      	b.n	8006268 <_malloc_r+0x64>
 80062b0:	20000090 	.word	0x20000090
 80062b4:	20000094 	.word	0x20000094

080062b8 <_realloc_r>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	4607      	mov	r7, r0
 80062bc:	4614      	mov	r4, r2
 80062be:	460e      	mov	r6, r1
 80062c0:	b921      	cbnz	r1, 80062cc <_realloc_r+0x14>
 80062c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062c6:	4611      	mov	r1, r2
 80062c8:	f7ff bf9c 	b.w	8006204 <_malloc_r>
 80062cc:	b922      	cbnz	r2, 80062d8 <_realloc_r+0x20>
 80062ce:	f7ff ff4d 	bl	800616c <_free_r>
 80062d2:	4625      	mov	r5, r4
 80062d4:	4628      	mov	r0, r5
 80062d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062d8:	f000 f826 	bl	8006328 <_malloc_usable_size_r>
 80062dc:	42a0      	cmp	r0, r4
 80062de:	d20f      	bcs.n	8006300 <_realloc_r+0x48>
 80062e0:	4621      	mov	r1, r4
 80062e2:	4638      	mov	r0, r7
 80062e4:	f7ff ff8e 	bl	8006204 <_malloc_r>
 80062e8:	4605      	mov	r5, r0
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d0f2      	beq.n	80062d4 <_realloc_r+0x1c>
 80062ee:	4631      	mov	r1, r6
 80062f0:	4622      	mov	r2, r4
 80062f2:	f7ff ff17 	bl	8006124 <memcpy>
 80062f6:	4631      	mov	r1, r6
 80062f8:	4638      	mov	r0, r7
 80062fa:	f7ff ff37 	bl	800616c <_free_r>
 80062fe:	e7e9      	b.n	80062d4 <_realloc_r+0x1c>
 8006300:	4635      	mov	r5, r6
 8006302:	e7e7      	b.n	80062d4 <_realloc_r+0x1c>

08006304 <_sbrk_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	2300      	movs	r3, #0
 8006308:	4c05      	ldr	r4, [pc, #20]	; (8006320 <_sbrk_r+0x1c>)
 800630a:	4605      	mov	r5, r0
 800630c:	4608      	mov	r0, r1
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	f7fb f816 	bl	8001340 <_sbrk>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_sbrk_r+0x1a>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	b103      	cbz	r3, 800631e <_sbrk_r+0x1a>
 800631c:	602b      	str	r3, [r5, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	200006cc 	.word	0x200006cc

08006324 <__malloc_lock>:
 8006324:	4770      	bx	lr

08006326 <__malloc_unlock>:
 8006326:	4770      	bx	lr

08006328 <_malloc_usable_size_r>:
 8006328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800632c:	1f18      	subs	r0, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	bfbc      	itt	lt
 8006332:	580b      	ldrlt	r3, [r1, r0]
 8006334:	18c0      	addlt	r0, r0, r3
 8006336:	4770      	bx	lr

08006338 <_init>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	bf00      	nop
 800633c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633e:	bc08      	pop	{r3}
 8006340:	469e      	mov	lr, r3
 8006342:	4770      	bx	lr

08006344 <_fini>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr
